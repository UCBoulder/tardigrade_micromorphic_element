import os
import sys
import glob
import subprocess

class TestHarness(object):
    """Class which defines the test harness"""
    
    def __init__(self):
        """Initialize the test harness"""
        self.orig_stdout = sys.stdout
        
        self.filename = "results.txt"

        self.make     = "MAKE_COMMAND"

        self.python   = "PYTHON_COMMAND"

        if(os.path.isfile(self.filename)):
            os.remove(self.filename)
        self.f = open(self.filename,"w")
        sys.stdout = self.f
        self.owd   = os.getcwd()
        
        #Identify module locations
        self.unit_test_location = os.path.join(".","src","cpp","tests")
        self.fformat = os.path.join("makefile")
        
        #Add the module locations to the system path for now
        sys.path.append(os.path.abspath(self.unit_test_location))
        
        #Identify regression tests
        self.regression_tests = [os.path.join("tests","regression_tests","const_u","const_u.inp"),\
                                 os.path.join("tests","regression_tests","linear_u","linear_u.inp")]
    


    def run_function_tests(self):
        """Run the tests associated with verifying the lower-level functions"""
        
        print "======================================\n"+\
              "|                                    |\n"+\
              "|         Run function tests         |\n"+\
              "|                                    |\n"+\
              "======================================\n"+\
              "| These tests are of lower level     |\n"+\
              "| functions which can be verified    |\n"+\
              "| best individually and depend only  |\n"+\
              "| a limit and well known set of      |\n"+\
              "| functions.                         |\n"+\
              "======================================\n"
        
        os.chdir(os.path.join(self.owd,"src","cpp"))
        proc = subprocess.Popen([self.python,"run_tests.py","-v"])
        proc.wait()
        (stdout, stderr) = proc.communicate()
        
        if proc.returncode != 0:
            print(stderr)
            raise IOError

        os.chdir(os.owd)

        print "======================================\n"+\
              "|                                    |\n"+\
              "|        Run regression tests        |\n"+\
              "|                                    |\n"+\
              "======================================\n"+\
              "| These tests are of higher level    |\n"+\
              "| functions which must be verified   |\n"+\
              "| against the code as a whole.       |\n"+\
              "======================================\n"
        
        for f in self.regression_tests:
            try:
                sys.stdout = self.orig_stdout                           #Change the output to the screen instead of the results file
                proc = subprocess.Popen(["driver ",f])                  #Run the finite element model indicated
                proc.wait()
                (stdout, stderr) = proc.communicate()

                if proc.returncode != 0:
                    print(stderr)
                    raise IOError

            except:
                print "!!! Error in execution !!!\nError: {0}".format(sys.exc_info()[0]) #Raise exception
                sys.stdout = self.f                                                      #Set the standard out back to the results file
                print "!!! Error in execution !!!\nError: {0}".format(sys.exc_info()[0]) #Repeat the error message into the file
        os.chdir(self.owd) #Reset the working directory
        
        print "======================================\n"+\
              "|                                    |\n"+\
              "|          Tests Completed!          |\n"+\
              "|                                    |\n"+\
              "======================================\n"
        self.f.close()
        sys.stdout = self.orig_stdout
        
    def generate_report(self):
        """Generate the LaTeX report"""
        #Run test processing
        os.system(r"python "+os.path.join(".","doc","Report","tests","process_tests.py"))
        #Change directories
        os.chdir(os.path.join(".","doc","Report"))
        #Run pdflatex
        os.system(r"pdflatex Micromorphic_Element_Report.tex")
        #Run bibtex
        os.system(r"bibtex Micromorphic_Element_Report")
        #Run pdflatex
        os.system(r"pdflatex Micromorphic_Element_Report.tex")
        os.system(r"pdflatex Micromorphic_Element_Report.tex")
        os.chidr(self.owd)
    
    def _flatten_list(self,l):
        """Flatten list of lists"""
        return [item for sublist in l for item in sublist]
        
if __name__ == '__main__':
    TestHarness().run_function_tests()
    TestHarness().generate_report()
