/*!===========================================================================
   |                                                                         |
   |                        deformation_measures.cpp                         |
   |                                                                         |
   ===========================================================================
   | The source file for a wrapper that converts variables and their         |
   | gradients generated by MOOSE into deformation measures which can be     |
   | used to compute the micromorphic stress measures and their tangents.    |
   | This is done to avoid any possible assumptions of symmetry which could  |
   | be present in the Tensor Mechanics physics module.                      |
   ===========================================================================
   | Dependencies:                                                           |
   |     Eigen: A matrix library available at eigen.tuxfamily.org            |
   ===========================================================================
   */

#include<deformation_measures.h>

namespace deformation_measures

{

    void get_deformation_gradient(const double (&_grad_u)[3][3], Matrix_3x3 &F){

        /*!==================================
           |    get_deformation_gradient    |
           ==================================

           Compute the deformation gradient from the 
           gradients of the displacements. The deformation 
           gradient can be computed via

           Finv(i,j) = eye(i,j) - _grad_u[i][j]

           where Finv is the inverse of the deformation gradient.

        */

        for (int i=0; i<3; i++){

            for (int j=0; j<3; j++){

                F(i,j) = -_grad_u[i][j];

            }

        }

        for (int i=0; i<3; i++){F(i,i) += 1;}

        F = F.inverse().eval();

        return;
    }

    void assemble_chi(const double (&_phi)[9], Matrix_3x3 &chi){

        /*!======================
           |    assemble_chi    |
           ======================

           Assemble the micro-deformation 
           tensor chi from the phi degrees of 
           freedom.

           _phi is assumed to be organized in 
           Voigt notation form i.e.

           phi_11, phi_22, phi_33, phi_23, phi_13, phi_12, phi_32, phi_31, phi_21

        */

        chi(0,0) = 1. + _phi[0];
        chi(1,1) = 1. + _phi[1];
        chi(2,2) = 1. + _phi[2];
        chi(1,2) = _phi[3];
        chi(0,2) = _phi[4];
        chi(0,1) = _phi[5];
        chi(2,1) = _phi[6];
        chi(2,0) = _phi[7];
        chi(1,0) = _phi[8];

    }

    void assemble_grad_chi(const double (&_grad_phi)[9][3], const Matrix_3x3 &F, Matrix_3x9 &grad_chi){

        /*!==========================
          |    assemble_grad_chi    |
          ===========================

          Assemble the gradient of chi w.r.t. the 
          reference coordinates.

          _grad_phi is assumed to be organized

          _grad_phi[I][k] = phi_iI,k

          where I is a ``super'' index which has the form

               0  1  2  3  4  5  6  7  8
          I = 11,22,33,23,13,12,32,31,21

          and k ranges from

              0  1  2
          k = 1, 2, 3

          We will map _phi_iI,k back to the reference 
          coordinates via

          _phi_iI,J = _phi_iI,k F_kJ

          and then assemble it into the required matrix form.


        */


        //We map the gradient from the current configuration to 
        //the reference configuration.
        double _grad_phi_map[9][3];

        for (int I=0; I<9; I++){

            for (int J=0; J<3; J++){

                _grad_phi_map[I][J] = 0.;

                for (int k=0; k<3; k++){

                    _grad_phi_map[I][J] += _grad_phi[I][k]*F(k,J);

                }

            }

        }

        grad_chi(0,0) = _grad_phi_map[0][0]; //111
        grad_chi(0,1) = _grad_phi_map[5][1]; //122
        grad_chi(0,2) = _grad_phi_map[4][2]; //133
        grad_chi(0,3) = _grad_phi_map[5][2]; //123
        grad_chi(0,4) = _grad_phi_map[0][2]; //113
        grad_chi(0,5) = _grad_phi_map[0][1]; //112
        grad_chi(0,6) = _grad_phi_map[4][1]; //132
        grad_chi(0,7) = _grad_phi_map[4][0]; //131
        grad_chi(0,8) = _grad_phi_map[5][0]; //121
        
        grad_chi(1,0) = _grad_phi_map[8][0]; //211
        grad_chi(1,1) = _grad_phi_map[1][1]; //222
        grad_chi(1,2) = _grad_phi_map[3][2]; //233
        grad_chi(1,3) = _grad_phi_map[1][2]; //223
        grad_chi(1,4) = _grad_phi_map[8][2]; //213
        grad_chi(1,5) = _grad_phi_map[8][1]; //212
        grad_chi(1,6) = _grad_phi_map[3][1]; //232
        grad_chi(1,7) = _grad_phi_map[3][0]; //231
        grad_chi(1,8) = _grad_phi_map[1][0]; //221

        grad_chi(2,0) = _grad_phi_map[7][0]; //311
        grad_chi(2,1) = _grad_phi_map[6][1]; //322
        grad_chi(2,2) = _grad_phi_map[2][2]; //333
        grad_chi(2,3) = _grad_phi_map[6][2]; //323
        grad_chi(2,4) = _grad_phi_map[7][2]; //313
        grad_chi(2,5) = _grad_phi_map[7][1]; //312
        grad_chi(2,6) = _grad_phi_map[2][1]; //332
        grad_chi(2,7) = _grad_phi_map[2][0]; //331
        grad_chi(2,8) = _grad_phi_map[6][0]; //321

        return;

    }

    void get_right_cauchy_green(const Matrix_3x3 &F, Matrix_3x3 &RCG){
        /*!================================
           |    get_right_cauchy_green    |
           ================================

           Get the right Cauchy-Green deformation 
           tensor.

           C_IJ = F_iI F_iJ

        */

        RCG = F.transpose()*F;
        return;
    }

    void get_left_cauchy_green(const Matrix_3x3 &F, Matrix_3x3 &LCG){

        /*!===============================
           |    get_left_cauchy_green    |
           ===============================

           Get the left Cauchy-Green deformation
           tensor.

           b_ij = F_iI F_jI

        */

        LCG = F*F.transpose();
        return;
    }

    void get_lagrange_strain(const Matrix_3x3 &F, Matrix_3x3& E){

        /*!=============================
           |    get_lagrange_strain    |
           =============================

           Get the lagrange strain tensor.

           E_IJ = 0.5*(F_iI F_iJ - I_IJ)

        */

        E = 0.5*F.transpose()*F;
        for (int i=0; i<3; i++){E(i,i) -= 0.5;}

        return;
    }

    void get_almansi_strain(const Matrix_3x3 &F, Matrix_3x3 &e){
        /*!============================
           |    get_almansi_strain    |
           ============================

           Compute the almansi strain.

           e_ij = 0.5*(I_ij - (F_iI F_jI)**-1)

        */

        e = -0.5*(F*F.transpose()).inverse();
        for (int i=0; i<3; i++){e(i,i) += 0.5;}
        return;
    }

    void get_small_strain(const double (&_grad_u)[3][3], Matrix_3x3 &epsilon){
         /*!=========================
           |    get_small_strain    |
           ==========================

           Compute the small strain tensor.

           epsilon(i,j) = 0.5*(_grad_u[i][j] + _grad_u[j][i])

         */

         for (int i=0; i<3; i++){

             for (int j=0; j<3; j++){

                 epsilon(i,j) = 0.5*(_grad_u[i][j] + _grad_u[j][i]);

             }
         }
             
         return;
    }

    void get_psi(const Matrix_3x3 &F, const Matrix_3x3 &chi, Matrix_3x3 &psi){
        /*!=================
           |    get_psi    |
           =================

           Compute the mixed deformation measure psi.

           psi_IJ = F_iI chi_iJ

        */

        psi = F.transpose()*chi;

        return;
    }

    void get_micro_strain(const Matrix_3x3 &psi, Matrix_3x3 &E_micro){
        /*==========================
          |    get_micro_strain    |
          ==========================

          Compute the micromorphic strain.

          E_micro_IJ = psi_IJ - eye_IJ

        */

        E_micro = psi - Matrix_3x3::Identity();

        return;
    }

    void get_gamma(const Matrix_3x3 &F, const Matrix_3x9 &grad_chi, Matrix_3x9 &gamma){
        /*!===================
           |    get_gamma    |
           ===================

           Compute the value of the mixed deformation measure gamma.

           gamma_IJK = F_iI chi_iJ,K

           The form provided here is gamma_IJ

           where
                0   1   2   3   4   5   6   7   8
           J = 11, 22, 33, 23, 13, 12, 32, 31, 21

        */

        gamma = F.transpose()*grad_chi;

        return;
    }

    void voigt_3x3_symm_tensor(const Matrix_3x3 &A, Vector_6 &v){
        /*!==============================
           |    voigt_3x3_symm_tensor   |
           ==============================

           Create the voigt notation of a symmetric second order tensor.

        */

        v(0) = A(0,0);
        v(1) = A(1,1);
        v(2) = A(2,2);
        v(3) = A(1,2);
        v(4) = A(0,2);
        v(5) = A(0,1);

        return;
    }

    void voigt_3x3_tensor(const Matrix_3x3 &A, Vector_9 &v){
        /*!=========================
           |    voigt_3x3_tensor   |
           =========================

           Create the voigt notation of a general second order tensor.

        */

        v(0) = A(0,0);
        v(1) = A(1,1);
        v(2) = A(2,2);
        v(3) = A(1,2);
        v(4) = A(0,2);
        v(5) = A(0,1);
        v(6) = A(2,1);
        v(7) = A(2,0);
        v(8) = A(1,0);

        return;
    }

    void get_sot_to_voigt_map(int (&sot_to_voigt_map)[3][3]){
        /*!==============================
        |    get_sot_to_voigt_map    |
        ==============================

        Get the second order tensor to voigt map.

        */

        sot_to_voigt_map[0][0] = 0;
        sot_to_voigt_map[1][1] = 1;
        sot_to_voigt_map[2][2] = 2;
        sot_to_voigt_map[1][2] = 3;
        sot_to_voigt_map[0][2] = 4;
        sot_to_voigt_map[0][1] = 5;
        sot_to_voigt_map[2][1] = 6;
        sot_to_voigt_map[2][0] = 7;
        sot_to_voigt_map[1][0] = 8;

        return;
    }

    void get_tot_to_voigt_map(int (&tot_to_voigt_map)[3][3][3]){
        /*!==============================
        |    get_tot_to_voigt_map    |
        ==============================

        Get the third order tensor to voigt map.

        */

        int sot_to_voigt_map[3][3] = {{0,5,4},
                                      {8,1,3},
                                      {7,6,2}};

        for (int i=0; i<3; i++){

            for (int j=0; j<3; j++){

                for (int k=0; k<3; k++){

                    tot_to_voigt_map[i][j][k] = sot_to_voigt_map[j][k] + 9*i;

                }

            }

        }

        return;
    }
    
    void undo_voigt_3x3_tensor(const Vector_9 &v, Matrix_3x3 &A){
        /*!===============================
           |    undo_voigt_3x3_tensor    |
           ===============================
        
           Undo the voigt notation on a vector of length 9.
        
        */
        
        A(0,0) = v(0);
        A(1,1) = v(1);
        A(2,2) = v(2);
        A(1,2) = v(3);
        A(0,2) = v(4);
        A(0,1) = v(5);
        A(2,1) = v(6);
        A(2,0) = v(7);
        A(1,0) = v(8);
    }

    void voigt_3x9_tensor(const Matrix_3x9 &A, Vector_27 &v){
        /*!==========================
           |    voigt_3x9_tensor    |
           ==========================

           Create the voigt notation of a general third order tensor
           which has the second two indices are in voigt notation already.

        */

        for (int i=0; i<3; i++){

            for (int j=0; j<9; j++){
                v(i*9 + j) = A(i,j); 
            }

        }
        return;
    }
    
    void undo_voigt_3x9_tensor(const Vector_27 &v, Matrix_3x9 &A){
        /*!===============================
           |    undo_voigt_3x9_tensor    |
           ===============================

           Undo the voigt notation of a general third order tensor
           which has the second two indices are in voigt notation already.

        */

        for (int i=0; i<3; i++){

            for (int j=0; j<9; j++){
                A(i,j) = v(i*9 + j);
            }

        }
        return;
    }
    
    void perform_left_positive_cyclic_permutation(Vector_27 &A){
        /*!==========================================
           |    perform_left_cyclic_permutation    |
           ==========================================
          
           Perform a left positive cyclic permutation on a third order tensor in vector form i.e.
           
           A_ijk -> A_jki
        
        */
        
        Vector_27 swap;
        
        swap[0] = A[0];
        swap[1] = A[14];
        swap[2] = A[22];
        swap[3] = A[23];
        swap[4] = A[18];
        swap[5] = A[9];
        swap[6] = A[13];
        swap[7] = A[4];
        swap[8] = A[5];
        swap[9] = A[8];
        swap[10] = A[10];
        swap[11] = A[21];
        swap[12] = A[19];
        swap[13] = A[26];
        swap[14] = A[17];
        swap[15] = A[12];
        swap[16] = A[3];
        swap[17] = A[1];
        swap[18] = A[7];
        swap[19] = A[15];
        swap[20] = A[20];
        swap[21] = A[24];
        swap[22] = A[25];
        swap[23] = A[16];
        swap[24] = A[11];
        swap[25] = A[2];
        swap[26] = A[6];
        
        A = swap;
        
    }

    void perform_right_positive_cyclic_permutation(Vector_27 &A){
        /*!==========================================
           |    perform_right_cyclic_permutation    |
           ==========================================
          
           Perform a right positive cyclic permutation on a third order tensor in vector form i.e.
           
           A_ijk -> A_kij
        
        */
        
        Vector_27 swap;
        
        swap[0] = A[0];
        swap[1] = A[17];
        swap[2] = A[25];
        swap[3] = A[16];
        swap[4] = A[7];
        swap[5] = A[8];
        swap[6] = A[26];
        swap[7] = A[18];
        swap[8] = A[9];
        swap[9] = A[5];
        swap[10] = A[10];
        swap[11] = A[24];
        swap[12] = A[15];
        swap[13] = A[6];
        swap[14] = A[1];
        swap[15] = A[19];
        swap[16] = A[23];
        swap[17] = A[14];
        swap[18] = A[4];
        swap[19] = A[12];
        swap[20] = A[20];
        swap[21] = A[11];
        swap[22] = A[2];
        swap[23] = A[3];
        swap[24] = A[21];
        swap[25] = A[22];
        swap[26] = A[13];
        
        A = swap;
        
    }
    
    void dot_2ot_4ot(const int &index, const int &mode, const Matrix_3x3 &sot, const Matrix_9x9 &fot, Matrix_9x9 &result){
        /*!==================
        |    dot_2ot_4ot    |
        =====================
        
        Compute the dot product of a second order tensor and a fourth order tensor at index i+1 i.e.
        
        index = 0, mode=0
        
        result_ijkl = sot_im fot_mjkl
        
        index = 1, mode=0
        
        result_ijkl = sot_im fot_jmkl
        
        index = 0, mode=1
        
        result_ijkl = sot_jm fot_mikl
        
        index = 1, mode=1
        
        result_ijkl = sot_jm fot_imkl
        
        */

        int sot_to_voigt_map[3][3] = {{0,5,4},
                                      {8,1,3},
                                      {7,6,2}};

        result = Matrix_9x9::Zero();

        int Ihat;
        int Jhat;
        int Khat;
        int Lhat;

        if(index == 0){
            for (int i=0; i<3; i++){
                for (int j=0; j<3; j++){
                    Ihat = sot_to_voigt_map[i][j];
                    for (int k=0; k<3; k++){
                        for (int l=0; l<3; l++){
                            Jhat = sot_to_voigt_map[k][l];

                            for (int m=0; m<3; m++){
                                Khat = sot_to_voigt_map[m][j];
                                result(Ihat,Jhat) += sot(i,m)*fot(Khat,Jhat);
                            }
                        }
                    }
                }
            }
        }
        else if (index == 1){
            for (int i=0; i<3; i++){
                for (int j=0; j<3; j++){
                    Ihat = sot_to_voigt_map[i][j];
                    for (int k=0; k<3; k++){
                        for (int l=0; l<3; l++){
                            Jhat = sot_to_voigt_map[k][l];

                            for (int m=0; m<3; m++){
                                Khat = sot_to_voigt_map[j][m];
                                result(Ihat,Jhat) += sot(i,m)*fot(Khat,Jhat);
                            }
                        }
                    }
                }
            }
        }
        else if (index == 2){
            for (int i=0; i<3; i++){
                for (int j=0; j<3; j++){
                    Ihat = sot_to_voigt_map[i][j];
                    for (int k=0; k<3; k++){
                        Khat = sot_to_voigt_map[j][k];
                        for (int l=0; l<3; l++){
                            Jhat = sot_to_voigt_map[k][l];

                            for (int m=0; m<3; m++){
                                Lhat = sot_to_voigt_map[m][l];
                                result(Ihat,Jhat) += sot(i,m)*fot(Khat,Lhat);
                            }
                        }
                    }
                }
            }
        }
        else if (index == 3){
            for (int i=0; i<3; i++){
                for (int j=0; j<3; j++){
                    Ihat = sot_to_voigt_map[i][j];
                    for (int k=0; k<3; k++){
                        Khat = sot_to_voigt_map[j][k];
                        for (int l=0; l<3; l++){
                            Jhat = sot_to_voigt_map[k][l];

                            for (int m=0; m<3; m++){
                                Lhat = sot_to_voigt_map[l][m];
                                result(Ihat,Jhat) += sot(i,m)*fot(Khat,Lhat);
                            }
                        }
                    }
                }
            }
        }
        else {
            std::cout << "Error: Index out of range\n";
            assert(1==0); //TODO: Replace with better error handling
        }
        if (mode == 1){
            result.row(3).swap(result.row(6));
            result.row(4).swap(result.row(7));
            result.row(5).swap(result.row(8));
        }
        return;
    }

    void dot_2ot_5ot(const int &i, const Matrix_3x3 &sot, const Matrix_9x27 &fot, Matrix_9x27 &result){
        /*!==================
        |    dot_2ot_5ot    |
        =====================
        
        Compute the dot product of a second order tensor and a fifth order tensor at index i+1 i.e.
        
        index = 0
        
        result_ijklm = sot_in fot_njklm
        
        index = 1
        
        result_ijklm = sot_in fot_jnklm
        
        */
        
        //Extract the second order tensor
        double sot11 = sot(0,0);
        double sot12 = sot(0,1);
        double sot13 = sot(0,2);
        double sot21 = sot(1,0);
        double sot22 = sot(1,1);
        double sot23 = sot(1,2);
        double sot31 = sot(2,0);
        double sot32 = sot(2,1);
        double sot33 = sot(2,2);

        //Extract the fifth order tensor
        double fot11111 = fot(0,0);
        double fot11112 = fot(0,5);
        double fot11113 = fot(0,4);
        double fot11121 = fot(0,8);
        double fot11122 = fot(0,1);
        double fot11123 = fot(0,3);
        double fot11131 = fot(0,7);
        double fot11132 = fot(0,6);
        double fot11133 = fot(0,2);
        double fot11211 = fot(0,9);
        double fot11212 = fot(0,14);
        double fot11213 = fot(0,13);
        double fot11221 = fot(0,17);
        double fot11222 = fot(0,10);
        double fot11223 = fot(0,12);
        double fot11231 = fot(0,16);
        double fot11232 = fot(0,15);
        double fot11233 = fot(0,11);
        double fot11311 = fot(0,18);
        double fot11312 = fot(0,23);
        double fot11313 = fot(0,22);
        double fot11321 = fot(0,26);
        double fot11322 = fot(0,19);
        double fot11323 = fot(0,21);
        double fot11331 = fot(0,25);
        double fot11332 = fot(0,24);
        double fot11333 = fot(0,20);
        double fot12111 = fot(5,0);
        double fot12112 = fot(5,5);
        double fot12113 = fot(5,4);
        double fot12121 = fot(5,8);
        double fot12122 = fot(5,1);
        double fot12123 = fot(5,3);
        double fot12131 = fot(5,7);
        double fot12132 = fot(5,6);
        double fot12133 = fot(5,2);
        double fot12211 = fot(5,9);
        double fot12212 = fot(5,14);
        double fot12213 = fot(5,13);
        double fot12221 = fot(5,17);
        double fot12222 = fot(5,10);
        double fot12223 = fot(5,12);
        double fot12231 = fot(5,16);
        double fot12232 = fot(5,15);
        double fot12233 = fot(5,11);
        double fot12311 = fot(5,18);
        double fot12312 = fot(5,23);
        double fot12313 = fot(5,22);
        double fot12321 = fot(5,26);
        double fot12322 = fot(5,19);
        double fot12323 = fot(5,21);
        double fot12331 = fot(5,25);
        double fot12332 = fot(5,24);
        double fot12333 = fot(5,20);
        double fot13111 = fot(4,0);
        double fot13112 = fot(4,5);
        double fot13113 = fot(4,4);
        double fot13121 = fot(4,8);
        double fot13122 = fot(4,1);
        double fot13123 = fot(4,3);
        double fot13131 = fot(4,7);
        double fot13132 = fot(4,6);
        double fot13133 = fot(4,2);
        double fot13211 = fot(4,9);
        double fot13212 = fot(4,14);
        double fot13213 = fot(4,13);
        double fot13221 = fot(4,17);
        double fot13222 = fot(4,10);
        double fot13223 = fot(4,12);
        double fot13231 = fot(4,16);
        double fot13232 = fot(4,15);
        double fot13233 = fot(4,11);
        double fot13311 = fot(4,18);
        double fot13312 = fot(4,23);
        double fot13313 = fot(4,22);
        double fot13321 = fot(4,26);
        double fot13322 = fot(4,19);
        double fot13323 = fot(4,21);
        double fot13331 = fot(4,25);
        double fot13332 = fot(4,24);
        double fot13333 = fot(4,20);
        double fot21111 = fot(8,0);
        double fot21112 = fot(8,5);
        double fot21113 = fot(8,4);
        double fot21121 = fot(8,8);
        double fot21122 = fot(8,1);
        double fot21123 = fot(8,3);
        double fot21131 = fot(8,7);
        double fot21132 = fot(8,6);
        double fot21133 = fot(8,2);
        double fot21211 = fot(8,9);
        double fot21212 = fot(8,14);
        double fot21213 = fot(8,13);
        double fot21221 = fot(8,17);
        double fot21222 = fot(8,10);
        double fot21223 = fot(8,12);
        double fot21231 = fot(8,16);
        double fot21232 = fot(8,15);
        double fot21233 = fot(8,11);
        double fot21311 = fot(8,18);
        double fot21312 = fot(8,23);
        double fot21313 = fot(8,22);
        double fot21321 = fot(8,26);
        double fot21322 = fot(8,19);
        double fot21323 = fot(8,21);
        double fot21331 = fot(8,25);
        double fot21332 = fot(8,24);
        double fot21333 = fot(8,20);
        double fot22111 = fot(1,0);
        double fot22112 = fot(1,5);
        double fot22113 = fot(1,4);
        double fot22121 = fot(1,8);
        double fot22122 = fot(1,1);
        double fot22123 = fot(1,3);
        double fot22131 = fot(1,7);
        double fot22132 = fot(1,6);
        double fot22133 = fot(1,2);
        double fot22211 = fot(1,9);
        double fot22212 = fot(1,14);
        double fot22213 = fot(1,13);
        double fot22221 = fot(1,17);
        double fot22222 = fot(1,10);
        double fot22223 = fot(1,12);
        double fot22231 = fot(1,16);
        double fot22232 = fot(1,15);
        double fot22233 = fot(1,11);
        double fot22311 = fot(1,18);
        double fot22312 = fot(1,23);
        double fot22313 = fot(1,22);
        double fot22321 = fot(1,26);
        double fot22322 = fot(1,19);
        double fot22323 = fot(1,21);
        double fot22331 = fot(1,25);
        double fot22332 = fot(1,24);
        double fot22333 = fot(1,20);
        double fot23111 = fot(3,0);
        double fot23112 = fot(3,5);
        double fot23113 = fot(3,4);
        double fot23121 = fot(3,8);
        double fot23122 = fot(3,1);
        double fot23123 = fot(3,3);
        double fot23131 = fot(3,7);
        double fot23132 = fot(3,6);
        double fot23133 = fot(3,2);
        double fot23211 = fot(3,9);
        double fot23212 = fot(3,14);
        double fot23213 = fot(3,13);
        double fot23221 = fot(3,17);
        double fot23222 = fot(3,10);
        double fot23223 = fot(3,12);
        double fot23231 = fot(3,16);
        double fot23232 = fot(3,15);
        double fot23233 = fot(3,11);
        double fot23311 = fot(3,18);
        double fot23312 = fot(3,23);
        double fot23313 = fot(3,22);
        double fot23321 = fot(3,26);
        double fot23322 = fot(3,19);
        double fot23323 = fot(3,21);
        double fot23331 = fot(3,25);
        double fot23332 = fot(3,24);
        double fot23333 = fot(3,20);
        double fot31111 = fot(7,0);
        double fot31112 = fot(7,5);
        double fot31113 = fot(7,4);
        double fot31121 = fot(7,8);
        double fot31122 = fot(7,1);
        double fot31123 = fot(7,3);
        double fot31131 = fot(7,7);
        double fot31132 = fot(7,6);
        double fot31133 = fot(7,2);
        double fot31211 = fot(7,9);
        double fot31212 = fot(7,14);
        double fot31213 = fot(7,13);
        double fot31221 = fot(7,17);
        double fot31222 = fot(7,10);
        double fot31223 = fot(7,12);
        double fot31231 = fot(7,16);
        double fot31232 = fot(7,15);
        double fot31233 = fot(7,11);
        double fot31311 = fot(7,18);
        double fot31312 = fot(7,23);
        double fot31313 = fot(7,22);
        double fot31321 = fot(7,26);
        double fot31322 = fot(7,19);
        double fot31323 = fot(7,21);
        double fot31331 = fot(7,25);
        double fot31332 = fot(7,24);
        double fot31333 = fot(7,20);
        double fot32111 = fot(6,0);
        double fot32112 = fot(6,5);
        double fot32113 = fot(6,4);
        double fot32121 = fot(6,8);
        double fot32122 = fot(6,1);
        double fot32123 = fot(6,3);
        double fot32131 = fot(6,7);
        double fot32132 = fot(6,6);
        double fot32133 = fot(6,2);
        double fot32211 = fot(6,9);
        double fot32212 = fot(6,14);
        double fot32213 = fot(6,13);
        double fot32221 = fot(6,17);
        double fot32222 = fot(6,10);
        double fot32223 = fot(6,12);
        double fot32231 = fot(6,16);
        double fot32232 = fot(6,15);
        double fot32233 = fot(6,11);
        double fot32311 = fot(6,18);
        double fot32312 = fot(6,23);
        double fot32313 = fot(6,22);
        double fot32321 = fot(6,26);
        double fot32322 = fot(6,19);
        double fot32323 = fot(6,21);
        double fot32331 = fot(6,25);
        double fot32332 = fot(6,24);
        double fot32333 = fot(6,20);
        double fot33111 = fot(2,0);
        double fot33112 = fot(2,5);
        double fot33113 = fot(2,4);
        double fot33121 = fot(2,8);
        double fot33122 = fot(2,1);
        double fot33123 = fot(2,3);
        double fot33131 = fot(2,7);
        double fot33132 = fot(2,6);
        double fot33133 = fot(2,2);
        double fot33211 = fot(2,9);
        double fot33212 = fot(2,14);
        double fot33213 = fot(2,13);
        double fot33221 = fot(2,17);
        double fot33222 = fot(2,10);
        double fot33223 = fot(2,12);
        double fot33231 = fot(2,16);
        double fot33232 = fot(2,15);
        double fot33233 = fot(2,11);
        double fot33311 = fot(2,18);
        double fot33312 = fot(2,23);
        double fot33313 = fot(2,22);
        double fot33321 = fot(2,26);
        double fot33322 = fot(2,19);
        double fot33323 = fot(2,21);
        double fot33331 = fot(2,25);
        double fot33332 = fot(2,24);
        double fot33333 = fot(2,20);

        //Compute the dot product
        if (i==0){
                result(0,0) = fot11111*sot11 + fot21111*sot12 + fot31111*sot13;
                result(0,1) = fot11122*sot11 + fot21122*sot12 + fot31122*sot13;
                result(0,2) = fot11133*sot11 + fot21133*sot12 + fot31133*sot13;
                result(0,3) = fot11123*sot11 + fot21123*sot12 + fot31123*sot13;
                result(0,4) = fot11113*sot11 + fot21113*sot12 + fot31113*sot13;
                result(0,5) = fot11112*sot11 + fot21112*sot12 + fot31112*sot13;
                result(0,6) = fot11132*sot11 + fot21132*sot12 + fot31132*sot13;
                result(0,7) = fot11131*sot11 + fot21131*sot12 + fot31131*sot13;
                result(0,8) = fot11121*sot11 + fot21121*sot12 + fot31121*sot13;
                result(0,9) = fot11211*sot11 + fot21211*sot12 + fot31211*sot13;
                result(0,10) = fot11222*sot11 + fot21222*sot12 + fot31222*sot13;
                result(0,11) = fot11233*sot11 + fot21233*sot12 + fot31233*sot13;
                result(0,12) = fot11223*sot11 + fot21223*sot12 + fot31223*sot13;
                result(0,13) = fot11213*sot11 + fot21213*sot12 + fot31213*sot13;
                result(0,14) = fot11212*sot11 + fot21212*sot12 + fot31212*sot13;
                result(0,15) = fot11232*sot11 + fot21232*sot12 + fot31232*sot13;
                result(0,16) = fot11231*sot11 + fot21231*sot12 + fot31231*sot13;
                result(0,17) = fot11221*sot11 + fot21221*sot12 + fot31221*sot13;
                result(0,18) = fot11311*sot11 + fot21311*sot12 + fot31311*sot13;
                result(0,19) = fot11322*sot11 + fot21322*sot12 + fot31322*sot13;
                result(0,20) = fot11333*sot11 + fot21333*sot12 + fot31333*sot13;
                result(0,21) = fot11323*sot11 + fot21323*sot12 + fot31323*sot13;
                result(0,22) = fot11313*sot11 + fot21313*sot12 + fot31313*sot13;
                result(0,23) = fot11312*sot11 + fot21312*sot12 + fot31312*sot13;
                result(0,24) = fot11332*sot11 + fot21332*sot12 + fot31332*sot13;
                result(0,25) = fot11331*sot11 + fot21331*sot12 + fot31331*sot13;
                result(0,26) = fot11321*sot11 + fot21321*sot12 + fot31321*sot13;
                result(1,0) = fot12111*sot21 + fot22111*sot22 + fot32111*sot23;
                result(1,1) = fot12122*sot21 + fot22122*sot22 + fot32122*sot23;
                result(1,2) = fot12133*sot21 + fot22133*sot22 + fot32133*sot23;
                result(1,3) = fot12123*sot21 + fot22123*sot22 + fot32123*sot23;
                result(1,4) = fot12113*sot21 + fot22113*sot22 + fot32113*sot23;
                result(1,5) = fot12112*sot21 + fot22112*sot22 + fot32112*sot23;
                result(1,6) = fot12132*sot21 + fot22132*sot22 + fot32132*sot23;
                result(1,7) = fot12131*sot21 + fot22131*sot22 + fot32131*sot23;
                result(1,8) = fot12121*sot21 + fot22121*sot22 + fot32121*sot23;
                result(1,9) = fot12211*sot21 + fot22211*sot22 + fot32211*sot23;
                result(1,10) = fot12222*sot21 + fot22222*sot22 + fot32222*sot23;
                result(1,11) = fot12233*sot21 + fot22233*sot22 + fot32233*sot23;
                result(1,12) = fot12223*sot21 + fot22223*sot22 + fot32223*sot23;
                result(1,13) = fot12213*sot21 + fot22213*sot22 + fot32213*sot23;
                result(1,14) = fot12212*sot21 + fot22212*sot22 + fot32212*sot23;
                result(1,15) = fot12232*sot21 + fot22232*sot22 + fot32232*sot23;
                result(1,16) = fot12231*sot21 + fot22231*sot22 + fot32231*sot23;
                result(1,17) = fot12221*sot21 + fot22221*sot22 + fot32221*sot23;
                result(1,18) = fot12311*sot21 + fot22311*sot22 + fot32311*sot23;
                result(1,19) = fot12322*sot21 + fot22322*sot22 + fot32322*sot23;
                result(1,20) = fot12333*sot21 + fot22333*sot22 + fot32333*sot23;
                result(1,21) = fot12323*sot21 + fot22323*sot22 + fot32323*sot23;
                result(1,22) = fot12313*sot21 + fot22313*sot22 + fot32313*sot23;
                result(1,23) = fot12312*sot21 + fot22312*sot22 + fot32312*sot23;
                result(1,24) = fot12332*sot21 + fot22332*sot22 + fot32332*sot23;
                result(1,25) = fot12331*sot21 + fot22331*sot22 + fot32331*sot23;
                result(1,26) = fot12321*sot21 + fot22321*sot22 + fot32321*sot23;
                result(2,0) = fot13111*sot31 + fot23111*sot32 + fot33111*sot33;
                result(2,1) = fot13122*sot31 + fot23122*sot32 + fot33122*sot33;
                result(2,2) = fot13133*sot31 + fot23133*sot32 + fot33133*sot33;
                result(2,3) = fot13123*sot31 + fot23123*sot32 + fot33123*sot33;
                result(2,4) = fot13113*sot31 + fot23113*sot32 + fot33113*sot33;
                result(2,5) = fot13112*sot31 + fot23112*sot32 + fot33112*sot33;
                result(2,6) = fot13132*sot31 + fot23132*sot32 + fot33132*sot33;
                result(2,7) = fot13131*sot31 + fot23131*sot32 + fot33131*sot33;
                result(2,8) = fot13121*sot31 + fot23121*sot32 + fot33121*sot33;
                result(2,9) = fot13211*sot31 + fot23211*sot32 + fot33211*sot33;
                result(2,10) = fot13222*sot31 + fot23222*sot32 + fot33222*sot33;
                result(2,11) = fot13233*sot31 + fot23233*sot32 + fot33233*sot33;
                result(2,12) = fot13223*sot31 + fot23223*sot32 + fot33223*sot33;
                result(2,13) = fot13213*sot31 + fot23213*sot32 + fot33213*sot33;
                result(2,14) = fot13212*sot31 + fot23212*sot32 + fot33212*sot33;
                result(2,15) = fot13232*sot31 + fot23232*sot32 + fot33232*sot33;
                result(2,16) = fot13231*sot31 + fot23231*sot32 + fot33231*sot33;
                result(2,17) = fot13221*sot31 + fot23221*sot32 + fot33221*sot33;
                result(2,18) = fot13311*sot31 + fot23311*sot32 + fot33311*sot33;
                result(2,19) = fot13322*sot31 + fot23322*sot32 + fot33322*sot33;
                result(2,20) = fot13333*sot31 + fot23333*sot32 + fot33333*sot33;
                result(2,21) = fot13323*sot31 + fot23323*sot32 + fot33323*sot33;
                result(2,22) = fot13313*sot31 + fot23313*sot32 + fot33313*sot33;
                result(2,23) = fot13312*sot31 + fot23312*sot32 + fot33312*sot33;
                result(2,24) = fot13332*sot31 + fot23332*sot32 + fot33332*sot33;
                result(2,25) = fot13331*sot31 + fot23331*sot32 + fot33331*sot33;
                result(2,26) = fot13321*sot31 + fot23321*sot32 + fot33321*sot33;
                result(3,0) = fot13111*sot21 + fot23111*sot22 + fot33111*sot23;
                result(3,1) = fot13122*sot21 + fot23122*sot22 + fot33122*sot23;
                result(3,2) = fot13133*sot21 + fot23133*sot22 + fot33133*sot23;
                result(3,3) = fot13123*sot21 + fot23123*sot22 + fot33123*sot23;
                result(3,4) = fot13113*sot21 + fot23113*sot22 + fot33113*sot23;
                result(3,5) = fot13112*sot21 + fot23112*sot22 + fot33112*sot23;
                result(3,6) = fot13132*sot21 + fot23132*sot22 + fot33132*sot23;
                result(3,7) = fot13131*sot21 + fot23131*sot22 + fot33131*sot23;
                result(3,8) = fot13121*sot21 + fot23121*sot22 + fot33121*sot23;
                result(3,9) = fot13211*sot21 + fot23211*sot22 + fot33211*sot23;
                result(3,10) = fot13222*sot21 + fot23222*sot22 + fot33222*sot23;
                result(3,11) = fot13233*sot21 + fot23233*sot22 + fot33233*sot23;
                result(3,12) = fot13223*sot21 + fot23223*sot22 + fot33223*sot23;
                result(3,13) = fot13213*sot21 + fot23213*sot22 + fot33213*sot23;
                result(3,14) = fot13212*sot21 + fot23212*sot22 + fot33212*sot23;
                result(3,15) = fot13232*sot21 + fot23232*sot22 + fot33232*sot23;
                result(3,16) = fot13231*sot21 + fot23231*sot22 + fot33231*sot23;
                result(3,17) = fot13221*sot21 + fot23221*sot22 + fot33221*sot23;
                result(3,18) = fot13311*sot21 + fot23311*sot22 + fot33311*sot23;
                result(3,19) = fot13322*sot21 + fot23322*sot22 + fot33322*sot23;
                result(3,20) = fot13333*sot21 + fot23333*sot22 + fot33333*sot23;
                result(3,21) = fot13323*sot21 + fot23323*sot22 + fot33323*sot23;
                result(3,22) = fot13313*sot21 + fot23313*sot22 + fot33313*sot23;
                result(3,23) = fot13312*sot21 + fot23312*sot22 + fot33312*sot23;
                result(3,24) = fot13332*sot21 + fot23332*sot22 + fot33332*sot23;
                result(3,25) = fot13331*sot21 + fot23331*sot22 + fot33331*sot23;
                result(3,26) = fot13321*sot21 + fot23321*sot22 + fot33321*sot23;
                result(4,0) = fot13111*sot11 + fot23111*sot12 + fot33111*sot13;
                result(4,1) = fot13122*sot11 + fot23122*sot12 + fot33122*sot13;
                result(4,2) = fot13133*sot11 + fot23133*sot12 + fot33133*sot13;
                result(4,3) = fot13123*sot11 + fot23123*sot12 + fot33123*sot13;
                result(4,4) = fot13113*sot11 + fot23113*sot12 + fot33113*sot13;
                result(4,5) = fot13112*sot11 + fot23112*sot12 + fot33112*sot13;
                result(4,6) = fot13132*sot11 + fot23132*sot12 + fot33132*sot13;
                result(4,7) = fot13131*sot11 + fot23131*sot12 + fot33131*sot13;
                result(4,8) = fot13121*sot11 + fot23121*sot12 + fot33121*sot13;
                result(4,9) = fot13211*sot11 + fot23211*sot12 + fot33211*sot13;
                result(4,10) = fot13222*sot11 + fot23222*sot12 + fot33222*sot13;
                result(4,11) = fot13233*sot11 + fot23233*sot12 + fot33233*sot13;
                result(4,12) = fot13223*sot11 + fot23223*sot12 + fot33223*sot13;
                result(4,13) = fot13213*sot11 + fot23213*sot12 + fot33213*sot13;
                result(4,14) = fot13212*sot11 + fot23212*sot12 + fot33212*sot13;
                result(4,15) = fot13232*sot11 + fot23232*sot12 + fot33232*sot13;
                result(4,16) = fot13231*sot11 + fot23231*sot12 + fot33231*sot13;
                result(4,17) = fot13221*sot11 + fot23221*sot12 + fot33221*sot13;
                result(4,18) = fot13311*sot11 + fot23311*sot12 + fot33311*sot13;
                result(4,19) = fot13322*sot11 + fot23322*sot12 + fot33322*sot13;
                result(4,20) = fot13333*sot11 + fot23333*sot12 + fot33333*sot13;
                result(4,21) = fot13323*sot11 + fot23323*sot12 + fot33323*sot13;
                result(4,22) = fot13313*sot11 + fot23313*sot12 + fot33313*sot13;
                result(4,23) = fot13312*sot11 + fot23312*sot12 + fot33312*sot13;
                result(4,24) = fot13332*sot11 + fot23332*sot12 + fot33332*sot13;
                result(4,25) = fot13331*sot11 + fot23331*sot12 + fot33331*sot13;
                result(4,26) = fot13321*sot11 + fot23321*sot12 + fot33321*sot13;
                result(5,0) = fot12111*sot11 + fot22111*sot12 + fot32111*sot13;
                result(5,1) = fot12122*sot11 + fot22122*sot12 + fot32122*sot13;
                result(5,2) = fot12133*sot11 + fot22133*sot12 + fot32133*sot13;
                result(5,3) = fot12123*sot11 + fot22123*sot12 + fot32123*sot13;
                result(5,4) = fot12113*sot11 + fot22113*sot12 + fot32113*sot13;
                result(5,5) = fot12112*sot11 + fot22112*sot12 + fot32112*sot13;
                result(5,6) = fot12132*sot11 + fot22132*sot12 + fot32132*sot13;
                result(5,7) = fot12131*sot11 + fot22131*sot12 + fot32131*sot13;
                result(5,8) = fot12121*sot11 + fot22121*sot12 + fot32121*sot13;
                result(5,9) = fot12211*sot11 + fot22211*sot12 + fot32211*sot13;
                result(5,10) = fot12222*sot11 + fot22222*sot12 + fot32222*sot13;
                result(5,11) = fot12233*sot11 + fot22233*sot12 + fot32233*sot13;
                result(5,12) = fot12223*sot11 + fot22223*sot12 + fot32223*sot13;
                result(5,13) = fot12213*sot11 + fot22213*sot12 + fot32213*sot13;
                result(5,14) = fot12212*sot11 + fot22212*sot12 + fot32212*sot13;
                result(5,15) = fot12232*sot11 + fot22232*sot12 + fot32232*sot13;
                result(5,16) = fot12231*sot11 + fot22231*sot12 + fot32231*sot13;
                result(5,17) = fot12221*sot11 + fot22221*sot12 + fot32221*sot13;
                result(5,18) = fot12311*sot11 + fot22311*sot12 + fot32311*sot13;
                result(5,19) = fot12322*sot11 + fot22322*sot12 + fot32322*sot13;
                result(5,20) = fot12333*sot11 + fot22333*sot12 + fot32333*sot13;
                result(5,21) = fot12323*sot11 + fot22323*sot12 + fot32323*sot13;
                result(5,22) = fot12313*sot11 + fot22313*sot12 + fot32313*sot13;
                result(5,23) = fot12312*sot11 + fot22312*sot12 + fot32312*sot13;
                result(5,24) = fot12332*sot11 + fot22332*sot12 + fot32332*sot13;
                result(5,25) = fot12331*sot11 + fot22331*sot12 + fot32331*sot13;
                result(5,26) = fot12321*sot11 + fot22321*sot12 + fot32321*sot13;
                result(6,0) = fot12111*sot31 + fot22111*sot32 + fot32111*sot33;
                result(6,1) = fot12122*sot31 + fot22122*sot32 + fot32122*sot33;
                result(6,2) = fot12133*sot31 + fot22133*sot32 + fot32133*sot33;
                result(6,3) = fot12123*sot31 + fot22123*sot32 + fot32123*sot33;
                result(6,4) = fot12113*sot31 + fot22113*sot32 + fot32113*sot33;
                result(6,5) = fot12112*sot31 + fot22112*sot32 + fot32112*sot33;
                result(6,6) = fot12132*sot31 + fot22132*sot32 + fot32132*sot33;
                result(6,7) = fot12131*sot31 + fot22131*sot32 + fot32131*sot33;
                result(6,8) = fot12121*sot31 + fot22121*sot32 + fot32121*sot33;
                result(6,9) = fot12211*sot31 + fot22211*sot32 + fot32211*sot33;
                result(6,10) = fot12222*sot31 + fot22222*sot32 + fot32222*sot33;
                result(6,11) = fot12233*sot31 + fot22233*sot32 + fot32233*sot33;
                result(6,12) = fot12223*sot31 + fot22223*sot32 + fot32223*sot33;
                result(6,13) = fot12213*sot31 + fot22213*sot32 + fot32213*sot33;
                result(6,14) = fot12212*sot31 + fot22212*sot32 + fot32212*sot33;
                result(6,15) = fot12232*sot31 + fot22232*sot32 + fot32232*sot33;
                result(6,16) = fot12231*sot31 + fot22231*sot32 + fot32231*sot33;
                result(6,17) = fot12221*sot31 + fot22221*sot32 + fot32221*sot33;
                result(6,18) = fot12311*sot31 + fot22311*sot32 + fot32311*sot33;
                result(6,19) = fot12322*sot31 + fot22322*sot32 + fot32322*sot33;
                result(6,20) = fot12333*sot31 + fot22333*sot32 + fot32333*sot33;
                result(6,21) = fot12323*sot31 + fot22323*sot32 + fot32323*sot33;
                result(6,22) = fot12313*sot31 + fot22313*sot32 + fot32313*sot33;
                result(6,23) = fot12312*sot31 + fot22312*sot32 + fot32312*sot33;
                result(6,24) = fot12332*sot31 + fot22332*sot32 + fot32332*sot33;
                result(6,25) = fot12331*sot31 + fot22331*sot32 + fot32331*sot33;
                result(6,26) = fot12321*sot31 + fot22321*sot32 + fot32321*sot33;
                result(7,0) = fot11111*sot31 + fot21111*sot32 + fot31111*sot33;
                result(7,1) = fot11122*sot31 + fot21122*sot32 + fot31122*sot33;
                result(7,2) = fot11133*sot31 + fot21133*sot32 + fot31133*sot33;
                result(7,3) = fot11123*sot31 + fot21123*sot32 + fot31123*sot33;
                result(7,4) = fot11113*sot31 + fot21113*sot32 + fot31113*sot33;
                result(7,5) = fot11112*sot31 + fot21112*sot32 + fot31112*sot33;
                result(7,6) = fot11132*sot31 + fot21132*sot32 + fot31132*sot33;
                result(7,7) = fot11131*sot31 + fot21131*sot32 + fot31131*sot33;
                result(7,8) = fot11121*sot31 + fot21121*sot32 + fot31121*sot33;
                result(7,9) = fot11211*sot31 + fot21211*sot32 + fot31211*sot33;
                result(7,10) = fot11222*sot31 + fot21222*sot32 + fot31222*sot33;
                result(7,11) = fot11233*sot31 + fot21233*sot32 + fot31233*sot33;
                result(7,12) = fot11223*sot31 + fot21223*sot32 + fot31223*sot33;
                result(7,13) = fot11213*sot31 + fot21213*sot32 + fot31213*sot33;
                result(7,14) = fot11212*sot31 + fot21212*sot32 + fot31212*sot33;
                result(7,15) = fot11232*sot31 + fot21232*sot32 + fot31232*sot33;
                result(7,16) = fot11231*sot31 + fot21231*sot32 + fot31231*sot33;
                result(7,17) = fot11221*sot31 + fot21221*sot32 + fot31221*sot33;
                result(7,18) = fot11311*sot31 + fot21311*sot32 + fot31311*sot33;
                result(7,19) = fot11322*sot31 + fot21322*sot32 + fot31322*sot33;
                result(7,20) = fot11333*sot31 + fot21333*sot32 + fot31333*sot33;
                result(7,21) = fot11323*sot31 + fot21323*sot32 + fot31323*sot33;
                result(7,22) = fot11313*sot31 + fot21313*sot32 + fot31313*sot33;
                result(7,23) = fot11312*sot31 + fot21312*sot32 + fot31312*sot33;
                result(7,24) = fot11332*sot31 + fot21332*sot32 + fot31332*sot33;
                result(7,25) = fot11331*sot31 + fot21331*sot32 + fot31331*sot33;
                result(7,26) = fot11321*sot31 + fot21321*sot32 + fot31321*sot33;
                result(8,0) = fot11111*sot21 + fot21111*sot22 + fot31111*sot23;
                result(8,1) = fot11122*sot21 + fot21122*sot22 + fot31122*sot23;
                result(8,2) = fot11133*sot21 + fot21133*sot22 + fot31133*sot23;
                result(8,3) = fot11123*sot21 + fot21123*sot22 + fot31123*sot23;
                result(8,4) = fot11113*sot21 + fot21113*sot22 + fot31113*sot23;
                result(8,5) = fot11112*sot21 + fot21112*sot22 + fot31112*sot23;
                result(8,6) = fot11132*sot21 + fot21132*sot22 + fot31132*sot23;
                result(8,7) = fot11131*sot21 + fot21131*sot22 + fot31131*sot23;
                result(8,8) = fot11121*sot21 + fot21121*sot22 + fot31121*sot23;
                result(8,9) = fot11211*sot21 + fot21211*sot22 + fot31211*sot23;
                result(8,10) = fot11222*sot21 + fot21222*sot22 + fot31222*sot23;
                result(8,11) = fot11233*sot21 + fot21233*sot22 + fot31233*sot23;
                result(8,12) = fot11223*sot21 + fot21223*sot22 + fot31223*sot23;
                result(8,13) = fot11213*sot21 + fot21213*sot22 + fot31213*sot23;
                result(8,14) = fot11212*sot21 + fot21212*sot22 + fot31212*sot23;
                result(8,15) = fot11232*sot21 + fot21232*sot22 + fot31232*sot23;
                result(8,16) = fot11231*sot21 + fot21231*sot22 + fot31231*sot23;
                result(8,17) = fot11221*sot21 + fot21221*sot22 + fot31221*sot23;
                result(8,18) = fot11311*sot21 + fot21311*sot22 + fot31311*sot23;
                result(8,19) = fot11322*sot21 + fot21322*sot22 + fot31322*sot23;
                result(8,20) = fot11333*sot21 + fot21333*sot22 + fot31333*sot23;
                result(8,21) = fot11323*sot21 + fot21323*sot22 + fot31323*sot23;
                result(8,22) = fot11313*sot21 + fot21313*sot22 + fot31313*sot23;
                result(8,23) = fot11312*sot21 + fot21312*sot22 + fot31312*sot23;
                result(8,24) = fot11332*sot21 + fot21332*sot22 + fot31332*sot23;
                result(8,25) = fot11331*sot21 + fot21331*sot22 + fot31331*sot23;
                result(8,26) = fot11321*sot21 + fot21321*sot22 + fot31321*sot23;
        }
        else if(i==1){
                result(0,0) = fot11111*sot11 + fot12111*sot12 + fot13111*sot13;
                result(0,1) = fot11122*sot11 + fot12122*sot12 + fot13122*sot13;
                result(0,2) = fot11133*sot11 + fot12133*sot12 + fot13133*sot13;
                result(0,3) = fot11123*sot11 + fot12123*sot12 + fot13123*sot13;
                result(0,4) = fot11113*sot11 + fot12113*sot12 + fot13113*sot13;
                result(0,5) = fot11112*sot11 + fot12112*sot12 + fot13112*sot13;
                result(0,6) = fot11132*sot11 + fot12132*sot12 + fot13132*sot13;
                result(0,7) = fot11131*sot11 + fot12131*sot12 + fot13131*sot13;
                result(0,8) = fot11121*sot11 + fot12121*sot12 + fot13121*sot13;
                result(0,9) = fot11211*sot11 + fot12211*sot12 + fot13211*sot13;
                result(0,10) = fot11222*sot11 + fot12222*sot12 + fot13222*sot13;
                result(0,11) = fot11233*sot11 + fot12233*sot12 + fot13233*sot13;
                result(0,12) = fot11223*sot11 + fot12223*sot12 + fot13223*sot13;
                result(0,13) = fot11213*sot11 + fot12213*sot12 + fot13213*sot13;
                result(0,14) = fot11212*sot11 + fot12212*sot12 + fot13212*sot13;
                result(0,15) = fot11232*sot11 + fot12232*sot12 + fot13232*sot13;
                result(0,16) = fot11231*sot11 + fot12231*sot12 + fot13231*sot13;
                result(0,17) = fot11221*sot11 + fot12221*sot12 + fot13221*sot13;
                result(0,18) = fot11311*sot11 + fot12311*sot12 + fot13311*sot13;
                result(0,19) = fot11322*sot11 + fot12322*sot12 + fot13322*sot13;
                result(0,20) = fot11333*sot11 + fot12333*sot12 + fot13333*sot13;
                result(0,21) = fot11323*sot11 + fot12323*sot12 + fot13323*sot13;
                result(0,22) = fot11313*sot11 + fot12313*sot12 + fot13313*sot13;
                result(0,23) = fot11312*sot11 + fot12312*sot12 + fot13312*sot13;
                result(0,24) = fot11332*sot11 + fot12332*sot12 + fot13332*sot13;
                result(0,25) = fot11331*sot11 + fot12331*sot12 + fot13331*sot13;
                result(0,26) = fot11321*sot11 + fot12321*sot12 + fot13321*sot13;
                result(1,0) = fot21111*sot21 + fot22111*sot22 + fot23111*sot23;
                result(1,1) = fot21122*sot21 + fot22122*sot22 + fot23122*sot23;
                result(1,2) = fot21133*sot21 + fot22133*sot22 + fot23133*sot23;
                result(1,3) = fot21123*sot21 + fot22123*sot22 + fot23123*sot23;
                result(1,4) = fot21113*sot21 + fot22113*sot22 + fot23113*sot23;
                result(1,5) = fot21112*sot21 + fot22112*sot22 + fot23112*sot23;
                result(1,6) = fot21132*sot21 + fot22132*sot22 + fot23132*sot23;
                result(1,7) = fot21131*sot21 + fot22131*sot22 + fot23131*sot23;
                result(1,8) = fot21121*sot21 + fot22121*sot22 + fot23121*sot23;
                result(1,9) = fot21211*sot21 + fot22211*sot22 + fot23211*sot23;
                result(1,10) = fot21222*sot21 + fot22222*sot22 + fot23222*sot23;
                result(1,11) = fot21233*sot21 + fot22233*sot22 + fot23233*sot23;
                result(1,12) = fot21223*sot21 + fot22223*sot22 + fot23223*sot23;
                result(1,13) = fot21213*sot21 + fot22213*sot22 + fot23213*sot23;
                result(1,14) = fot21212*sot21 + fot22212*sot22 + fot23212*sot23;
                result(1,15) = fot21232*sot21 + fot22232*sot22 + fot23232*sot23;
                result(1,16) = fot21231*sot21 + fot22231*sot22 + fot23231*sot23;
                result(1,17) = fot21221*sot21 + fot22221*sot22 + fot23221*sot23;
                result(1,18) = fot21311*sot21 + fot22311*sot22 + fot23311*sot23;
                result(1,19) = fot21322*sot21 + fot22322*sot22 + fot23322*sot23;
                result(1,20) = fot21333*sot21 + fot22333*sot22 + fot23333*sot23;
                result(1,21) = fot21323*sot21 + fot22323*sot22 + fot23323*sot23;
                result(1,22) = fot21313*sot21 + fot22313*sot22 + fot23313*sot23;
                result(1,23) = fot21312*sot21 + fot22312*sot22 + fot23312*sot23;
                result(1,24) = fot21332*sot21 + fot22332*sot22 + fot23332*sot23;
                result(1,25) = fot21331*sot21 + fot22331*sot22 + fot23331*sot23;
                result(1,26) = fot21321*sot21 + fot22321*sot22 + fot23321*sot23;
                result(2,0) = fot31111*sot31 + fot32111*sot32 + fot33111*sot33;
                result(2,1) = fot31122*sot31 + fot32122*sot32 + fot33122*sot33;
                result(2,2) = fot31133*sot31 + fot32133*sot32 + fot33133*sot33;
                result(2,3) = fot31123*sot31 + fot32123*sot32 + fot33123*sot33;
                result(2,4) = fot31113*sot31 + fot32113*sot32 + fot33113*sot33;
                result(2,5) = fot31112*sot31 + fot32112*sot32 + fot33112*sot33;
                result(2,6) = fot31132*sot31 + fot32132*sot32 + fot33132*sot33;
                result(2,7) = fot31131*sot31 + fot32131*sot32 + fot33131*sot33;
                result(2,8) = fot31121*sot31 + fot32121*sot32 + fot33121*sot33;
                result(2,9) = fot31211*sot31 + fot32211*sot32 + fot33211*sot33;
                result(2,10) = fot31222*sot31 + fot32222*sot32 + fot33222*sot33;
                result(2,11) = fot31233*sot31 + fot32233*sot32 + fot33233*sot33;
                result(2,12) = fot31223*sot31 + fot32223*sot32 + fot33223*sot33;
                result(2,13) = fot31213*sot31 + fot32213*sot32 + fot33213*sot33;
                result(2,14) = fot31212*sot31 + fot32212*sot32 + fot33212*sot33;
                result(2,15) = fot31232*sot31 + fot32232*sot32 + fot33232*sot33;
                result(2,16) = fot31231*sot31 + fot32231*sot32 + fot33231*sot33;
                result(2,17) = fot31221*sot31 + fot32221*sot32 + fot33221*sot33;
                result(2,18) = fot31311*sot31 + fot32311*sot32 + fot33311*sot33;
                result(2,19) = fot31322*sot31 + fot32322*sot32 + fot33322*sot33;
                result(2,20) = fot31333*sot31 + fot32333*sot32 + fot33333*sot33;
                result(2,21) = fot31323*sot31 + fot32323*sot32 + fot33323*sot33;
                result(2,22) = fot31313*sot31 + fot32313*sot32 + fot33313*sot33;
                result(2,23) = fot31312*sot31 + fot32312*sot32 + fot33312*sot33;
                result(2,24) = fot31332*sot31 + fot32332*sot32 + fot33332*sot33;
                result(2,25) = fot31331*sot31 + fot32331*sot32 + fot33331*sot33;
                result(2,26) = fot31321*sot31 + fot32321*sot32 + fot33321*sot33;
                result(3,0) = fot31111*sot21 + fot32111*sot22 + fot33111*sot23;
                result(3,1) = fot31122*sot21 + fot32122*sot22 + fot33122*sot23;
                result(3,2) = fot31133*sot21 + fot32133*sot22 + fot33133*sot23;
                result(3,3) = fot31123*sot21 + fot32123*sot22 + fot33123*sot23;
                result(3,4) = fot31113*sot21 + fot32113*sot22 + fot33113*sot23;
                result(3,5) = fot31112*sot21 + fot32112*sot22 + fot33112*sot23;
                result(3,6) = fot31132*sot21 + fot32132*sot22 + fot33132*sot23;
                result(3,7) = fot31131*sot21 + fot32131*sot22 + fot33131*sot23;
                result(3,8) = fot31121*sot21 + fot32121*sot22 + fot33121*sot23;
                result(3,9) = fot31211*sot21 + fot32211*sot22 + fot33211*sot23;
                result(3,10) = fot31222*sot21 + fot32222*sot22 + fot33222*sot23;
                result(3,11) = fot31233*sot21 + fot32233*sot22 + fot33233*sot23;
                result(3,12) = fot31223*sot21 + fot32223*sot22 + fot33223*sot23;
                result(3,13) = fot31213*sot21 + fot32213*sot22 + fot33213*sot23;
                result(3,14) = fot31212*sot21 + fot32212*sot22 + fot33212*sot23;
                result(3,15) = fot31232*sot21 + fot32232*sot22 + fot33232*sot23;
                result(3,16) = fot31231*sot21 + fot32231*sot22 + fot33231*sot23;
                result(3,17) = fot31221*sot21 + fot32221*sot22 + fot33221*sot23;
                result(3,18) = fot31311*sot21 + fot32311*sot22 + fot33311*sot23;
                result(3,19) = fot31322*sot21 + fot32322*sot22 + fot33322*sot23;
                result(3,20) = fot31333*sot21 + fot32333*sot22 + fot33333*sot23;
                result(3,21) = fot31323*sot21 + fot32323*sot22 + fot33323*sot23;
                result(3,22) = fot31313*sot21 + fot32313*sot22 + fot33313*sot23;
                result(3,23) = fot31312*sot21 + fot32312*sot22 + fot33312*sot23;
                result(3,24) = fot31332*sot21 + fot32332*sot22 + fot33332*sot23;
                result(3,25) = fot31331*sot21 + fot32331*sot22 + fot33331*sot23;
                result(3,26) = fot31321*sot21 + fot32321*sot22 + fot33321*sot23;
                result(4,0) = fot31111*sot11 + fot32111*sot12 + fot33111*sot13;
                result(4,1) = fot31122*sot11 + fot32122*sot12 + fot33122*sot13;
                result(4,2) = fot31133*sot11 + fot32133*sot12 + fot33133*sot13;
                result(4,3) = fot31123*sot11 + fot32123*sot12 + fot33123*sot13;
                result(4,4) = fot31113*sot11 + fot32113*sot12 + fot33113*sot13;
                result(4,5) = fot31112*sot11 + fot32112*sot12 + fot33112*sot13;
                result(4,6) = fot31132*sot11 + fot32132*sot12 + fot33132*sot13;
                result(4,7) = fot31131*sot11 + fot32131*sot12 + fot33131*sot13;
                result(4,8) = fot31121*sot11 + fot32121*sot12 + fot33121*sot13;
                result(4,9) = fot31211*sot11 + fot32211*sot12 + fot33211*sot13;
                result(4,10) = fot31222*sot11 + fot32222*sot12 + fot33222*sot13;
                result(4,11) = fot31233*sot11 + fot32233*sot12 + fot33233*sot13;
                result(4,12) = fot31223*sot11 + fot32223*sot12 + fot33223*sot13;
                result(4,13) = fot31213*sot11 + fot32213*sot12 + fot33213*sot13;
                result(4,14) = fot31212*sot11 + fot32212*sot12 + fot33212*sot13;
                result(4,15) = fot31232*sot11 + fot32232*sot12 + fot33232*sot13;
                result(4,16) = fot31231*sot11 + fot32231*sot12 + fot33231*sot13;
                result(4,17) = fot31221*sot11 + fot32221*sot12 + fot33221*sot13;
                result(4,18) = fot31311*sot11 + fot32311*sot12 + fot33311*sot13;
                result(4,19) = fot31322*sot11 + fot32322*sot12 + fot33322*sot13;
                result(4,20) = fot31333*sot11 + fot32333*sot12 + fot33333*sot13;
                result(4,21) = fot31323*sot11 + fot32323*sot12 + fot33323*sot13;
                result(4,22) = fot31313*sot11 + fot32313*sot12 + fot33313*sot13;
                result(4,23) = fot31312*sot11 + fot32312*sot12 + fot33312*sot13;
                result(4,24) = fot31332*sot11 + fot32332*sot12 + fot33332*sot13;
                result(4,25) = fot31331*sot11 + fot32331*sot12 + fot33331*sot13;
                result(4,26) = fot31321*sot11 + fot32321*sot12 + fot33321*sot13;
                result(5,0) = fot21111*sot11 + fot22111*sot12 + fot23111*sot13;
                result(5,1) = fot21122*sot11 + fot22122*sot12 + fot23122*sot13;
                result(5,2) = fot21133*sot11 + fot22133*sot12 + fot23133*sot13;
                result(5,3) = fot21123*sot11 + fot22123*sot12 + fot23123*sot13;
                result(5,4) = fot21113*sot11 + fot22113*sot12 + fot23113*sot13;
                result(5,5) = fot21112*sot11 + fot22112*sot12 + fot23112*sot13;
                result(5,6) = fot21132*sot11 + fot22132*sot12 + fot23132*sot13;
                result(5,7) = fot21131*sot11 + fot22131*sot12 + fot23131*sot13;
                result(5,8) = fot21121*sot11 + fot22121*sot12 + fot23121*sot13;
                result(5,9) = fot21211*sot11 + fot22211*sot12 + fot23211*sot13;
                result(5,10) = fot21222*sot11 + fot22222*sot12 + fot23222*sot13;
                result(5,11) = fot21233*sot11 + fot22233*sot12 + fot23233*sot13;
                result(5,12) = fot21223*sot11 + fot22223*sot12 + fot23223*sot13;
                result(5,13) = fot21213*sot11 + fot22213*sot12 + fot23213*sot13;
                result(5,14) = fot21212*sot11 + fot22212*sot12 + fot23212*sot13;
                result(5,15) = fot21232*sot11 + fot22232*sot12 + fot23232*sot13;
                result(5,16) = fot21231*sot11 + fot22231*sot12 + fot23231*sot13;
                result(5,17) = fot21221*sot11 + fot22221*sot12 + fot23221*sot13;
                result(5,18) = fot21311*sot11 + fot22311*sot12 + fot23311*sot13;
                result(5,19) = fot21322*sot11 + fot22322*sot12 + fot23322*sot13;
                result(5,20) = fot21333*sot11 + fot22333*sot12 + fot23333*sot13;
                result(5,21) = fot21323*sot11 + fot22323*sot12 + fot23323*sot13;
                result(5,22) = fot21313*sot11 + fot22313*sot12 + fot23313*sot13;
                result(5,23) = fot21312*sot11 + fot22312*sot12 + fot23312*sot13;
                result(5,24) = fot21332*sot11 + fot22332*sot12 + fot23332*sot13;
                result(5,25) = fot21331*sot11 + fot22331*sot12 + fot23331*sot13;
                result(5,26) = fot21321*sot11 + fot22321*sot12 + fot23321*sot13;
                result(6,0) = fot21111*sot31 + fot22111*sot32 + fot23111*sot33;
                result(6,1) = fot21122*sot31 + fot22122*sot32 + fot23122*sot33;
                result(6,2) = fot21133*sot31 + fot22133*sot32 + fot23133*sot33;
                result(6,3) = fot21123*sot31 + fot22123*sot32 + fot23123*sot33;
                result(6,4) = fot21113*sot31 + fot22113*sot32 + fot23113*sot33;
                result(6,5) = fot21112*sot31 + fot22112*sot32 + fot23112*sot33;
                result(6,6) = fot21132*sot31 + fot22132*sot32 + fot23132*sot33;
                result(6,7) = fot21131*sot31 + fot22131*sot32 + fot23131*sot33;
                result(6,8) = fot21121*sot31 + fot22121*sot32 + fot23121*sot33;
                result(6,9) = fot21211*sot31 + fot22211*sot32 + fot23211*sot33;
                result(6,10) = fot21222*sot31 + fot22222*sot32 + fot23222*sot33;
                result(6,11) = fot21233*sot31 + fot22233*sot32 + fot23233*sot33;
                result(6,12) = fot21223*sot31 + fot22223*sot32 + fot23223*sot33;
                result(6,13) = fot21213*sot31 + fot22213*sot32 + fot23213*sot33;
                result(6,14) = fot21212*sot31 + fot22212*sot32 + fot23212*sot33;
                result(6,15) = fot21232*sot31 + fot22232*sot32 + fot23232*sot33;
                result(6,16) = fot21231*sot31 + fot22231*sot32 + fot23231*sot33;
                result(6,17) = fot21221*sot31 + fot22221*sot32 + fot23221*sot33;
                result(6,18) = fot21311*sot31 + fot22311*sot32 + fot23311*sot33;
                result(6,19) = fot21322*sot31 + fot22322*sot32 + fot23322*sot33;
                result(6,20) = fot21333*sot31 + fot22333*sot32 + fot23333*sot33;
                result(6,21) = fot21323*sot31 + fot22323*sot32 + fot23323*sot33;
                result(6,22) = fot21313*sot31 + fot22313*sot32 + fot23313*sot33;
                result(6,23) = fot21312*sot31 + fot22312*sot32 + fot23312*sot33;
                result(6,24) = fot21332*sot31 + fot22332*sot32 + fot23332*sot33;
                result(6,25) = fot21331*sot31 + fot22331*sot32 + fot23331*sot33;
                result(6,26) = fot21321*sot31 + fot22321*sot32 + fot23321*sot33;
                result(7,0) = fot11111*sot31 + fot12111*sot32 + fot13111*sot33;
                result(7,1) = fot11122*sot31 + fot12122*sot32 + fot13122*sot33;
                result(7,2) = fot11133*sot31 + fot12133*sot32 + fot13133*sot33;
                result(7,3) = fot11123*sot31 + fot12123*sot32 + fot13123*sot33;
                result(7,4) = fot11113*sot31 + fot12113*sot32 + fot13113*sot33;
                result(7,5) = fot11112*sot31 + fot12112*sot32 + fot13112*sot33;
                result(7,6) = fot11132*sot31 + fot12132*sot32 + fot13132*sot33;
                result(7,7) = fot11131*sot31 + fot12131*sot32 + fot13131*sot33;
                result(7,8) = fot11121*sot31 + fot12121*sot32 + fot13121*sot33;
                result(7,9) = fot11211*sot31 + fot12211*sot32 + fot13211*sot33;
                result(7,10) = fot11222*sot31 + fot12222*sot32 + fot13222*sot33;
                result(7,11) = fot11233*sot31 + fot12233*sot32 + fot13233*sot33;
                result(7,12) = fot11223*sot31 + fot12223*sot32 + fot13223*sot33;
                result(7,13) = fot11213*sot31 + fot12213*sot32 + fot13213*sot33;
                result(7,14) = fot11212*sot31 + fot12212*sot32 + fot13212*sot33;
                result(7,15) = fot11232*sot31 + fot12232*sot32 + fot13232*sot33;
                result(7,16) = fot11231*sot31 + fot12231*sot32 + fot13231*sot33;
                result(7,17) = fot11221*sot31 + fot12221*sot32 + fot13221*sot33;
                result(7,18) = fot11311*sot31 + fot12311*sot32 + fot13311*sot33;
                result(7,19) = fot11322*sot31 + fot12322*sot32 + fot13322*sot33;
                result(7,20) = fot11333*sot31 + fot12333*sot32 + fot13333*sot33;
                result(7,21) = fot11323*sot31 + fot12323*sot32 + fot13323*sot33;
                result(7,22) = fot11313*sot31 + fot12313*sot32 + fot13313*sot33;
                result(7,23) = fot11312*sot31 + fot12312*sot32 + fot13312*sot33;
                result(7,24) = fot11332*sot31 + fot12332*sot32 + fot13332*sot33;
                result(7,25) = fot11331*sot31 + fot12331*sot32 + fot13331*sot33;
                result(7,26) = fot11321*sot31 + fot12321*sot32 + fot13321*sot33;
                result(8,0) = fot11111*sot21 + fot12111*sot22 + fot13111*sot23;
                result(8,1) = fot11122*sot21 + fot12122*sot22 + fot13122*sot23;
                result(8,2) = fot11133*sot21 + fot12133*sot22 + fot13133*sot23;
                result(8,3) = fot11123*sot21 + fot12123*sot22 + fot13123*sot23;
                result(8,4) = fot11113*sot21 + fot12113*sot22 + fot13113*sot23;
                result(8,5) = fot11112*sot21 + fot12112*sot22 + fot13112*sot23;
                result(8,6) = fot11132*sot21 + fot12132*sot22 + fot13132*sot23;
                result(8,7) = fot11131*sot21 + fot12131*sot22 + fot13131*sot23;
                result(8,8) = fot11121*sot21 + fot12121*sot22 + fot13121*sot23;
                result(8,9) = fot11211*sot21 + fot12211*sot22 + fot13211*sot23;
                result(8,10) = fot11222*sot21 + fot12222*sot22 + fot13222*sot23;
                result(8,11) = fot11233*sot21 + fot12233*sot22 + fot13233*sot23;
                result(8,12) = fot11223*sot21 + fot12223*sot22 + fot13223*sot23;
                result(8,13) = fot11213*sot21 + fot12213*sot22 + fot13213*sot23;
                result(8,14) = fot11212*sot21 + fot12212*sot22 + fot13212*sot23;
                result(8,15) = fot11232*sot21 + fot12232*sot22 + fot13232*sot23;
                result(8,16) = fot11231*sot21 + fot12231*sot22 + fot13231*sot23;
                result(8,17) = fot11221*sot21 + fot12221*sot22 + fot13221*sot23;
                result(8,18) = fot11311*sot21 + fot12311*sot22 + fot13311*sot23;
                result(8,19) = fot11322*sot21 + fot12322*sot22 + fot13322*sot23;
                result(8,20) = fot11333*sot21 + fot12333*sot22 + fot13333*sot23;
                result(8,21) = fot11323*sot21 + fot12323*sot22 + fot13323*sot23;
                result(8,22) = fot11313*sot21 + fot12313*sot22 + fot13313*sot23;
                result(8,23) = fot11312*sot21 + fot12312*sot22 + fot13312*sot23;
                result(8,24) = fot11332*sot21 + fot12332*sot22 + fot13332*sot23;
                result(8,25) = fot11331*sot21 + fot12331*sot22 + fot13331*sot23;
                result(8,26) = fot11321*sot21 + fot12321*sot22 + fot13321*sot23;
        }
        else if(i==2){
                result(0,0) = fot11111*sot11 + fot11211*sot12 + fot11311*sot13;
                result(0,1) = fot11122*sot11 + fot11222*sot12 + fot11322*sot13;
                result(0,2) = fot11133*sot11 + fot11233*sot12 + fot11333*sot13;
                result(0,3) = fot11123*sot11 + fot11223*sot12 + fot11323*sot13;
                result(0,4) = fot11113*sot11 + fot11213*sot12 + fot11313*sot13;
                result(0,5) = fot11112*sot11 + fot11212*sot12 + fot11312*sot13;
                result(0,6) = fot11132*sot11 + fot11232*sot12 + fot11332*sot13;
                result(0,7) = fot11131*sot11 + fot11231*sot12 + fot11331*sot13;
                result(0,8) = fot11121*sot11 + fot11221*sot12 + fot11321*sot13;
                result(0,9) = fot12111*sot11 + fot12211*sot12 + fot12311*sot13;
                result(0,10) = fot12122*sot11 + fot12222*sot12 + fot12322*sot13;
                result(0,11) = fot12133*sot11 + fot12233*sot12 + fot12333*sot13;
                result(0,12) = fot12123*sot11 + fot12223*sot12 + fot12323*sot13;
                result(0,13) = fot12113*sot11 + fot12213*sot12 + fot12313*sot13;
                result(0,14) = fot12112*sot11 + fot12212*sot12 + fot12312*sot13;
                result(0,15) = fot12132*sot11 + fot12232*sot12 + fot12332*sot13;
                result(0,16) = fot12131*sot11 + fot12231*sot12 + fot12331*sot13;
                result(0,17) = fot12121*sot11 + fot12221*sot12 + fot12321*sot13;
                result(0,18) = fot13111*sot11 + fot13211*sot12 + fot13311*sot13;
                result(0,19) = fot13122*sot11 + fot13222*sot12 + fot13322*sot13;
                result(0,20) = fot13133*sot11 + fot13233*sot12 + fot13333*sot13;
                result(0,21) = fot13123*sot11 + fot13223*sot12 + fot13323*sot13;
                result(0,22) = fot13113*sot11 + fot13213*sot12 + fot13313*sot13;
                result(0,23) = fot13112*sot11 + fot13212*sot12 + fot13312*sot13;
                result(0,24) = fot13132*sot11 + fot13232*sot12 + fot13332*sot13;
                result(0,25) = fot13131*sot11 + fot13231*sot12 + fot13331*sot13;
                result(0,26) = fot13121*sot11 + fot13221*sot12 + fot13321*sot13;
                result(1,0) = fot21111*sot21 + fot21211*sot22 + fot21311*sot23;
                result(1,1) = fot21122*sot21 + fot21222*sot22 + fot21322*sot23;
                result(1,2) = fot21133*sot21 + fot21233*sot22 + fot21333*sot23;
                result(1,3) = fot21123*sot21 + fot21223*sot22 + fot21323*sot23;
                result(1,4) = fot21113*sot21 + fot21213*sot22 + fot21313*sot23;
                result(1,5) = fot21112*sot21 + fot21212*sot22 + fot21312*sot23;
                result(1,6) = fot21132*sot21 + fot21232*sot22 + fot21332*sot23;
                result(1,7) = fot21131*sot21 + fot21231*sot22 + fot21331*sot23;
                result(1,8) = fot21121*sot21 + fot21221*sot22 + fot21321*sot23;
                result(1,9) = fot22111*sot21 + fot22211*sot22 + fot22311*sot23;
                result(1,10) = fot22122*sot21 + fot22222*sot22 + fot22322*sot23;
                result(1,11) = fot22133*sot21 + fot22233*sot22 + fot22333*sot23;
                result(1,12) = fot22123*sot21 + fot22223*sot22 + fot22323*sot23;
                result(1,13) = fot22113*sot21 + fot22213*sot22 + fot22313*sot23;
                result(1,14) = fot22112*sot21 + fot22212*sot22 + fot22312*sot23;
                result(1,15) = fot22132*sot21 + fot22232*sot22 + fot22332*sot23;
                result(1,16) = fot22131*sot21 + fot22231*sot22 + fot22331*sot23;
                result(1,17) = fot22121*sot21 + fot22221*sot22 + fot22321*sot23;
                result(1,18) = fot23111*sot21 + fot23211*sot22 + fot23311*sot23;
                result(1,19) = fot23122*sot21 + fot23222*sot22 + fot23322*sot23;
                result(1,20) = fot23133*sot21 + fot23233*sot22 + fot23333*sot23;
                result(1,21) = fot23123*sot21 + fot23223*sot22 + fot23323*sot23;
                result(1,22) = fot23113*sot21 + fot23213*sot22 + fot23313*sot23;
                result(1,23) = fot23112*sot21 + fot23212*sot22 + fot23312*sot23;
                result(1,24) = fot23132*sot21 + fot23232*sot22 + fot23332*sot23;
                result(1,25) = fot23131*sot21 + fot23231*sot22 + fot23331*sot23;
                result(1,26) = fot23121*sot21 + fot23221*sot22 + fot23321*sot23;
                result(2,0) = fot31111*sot31 + fot31211*sot32 + fot31311*sot33;
                result(2,1) = fot31122*sot31 + fot31222*sot32 + fot31322*sot33;
                result(2,2) = fot31133*sot31 + fot31233*sot32 + fot31333*sot33;
                result(2,3) = fot31123*sot31 + fot31223*sot32 + fot31323*sot33;
                result(2,4) = fot31113*sot31 + fot31213*sot32 + fot31313*sot33;
                result(2,5) = fot31112*sot31 + fot31212*sot32 + fot31312*sot33;
                result(2,6) = fot31132*sot31 + fot31232*sot32 + fot31332*sot33;
                result(2,7) = fot31131*sot31 + fot31231*sot32 + fot31331*sot33;
                result(2,8) = fot31121*sot31 + fot31221*sot32 + fot31321*sot33;
                result(2,9) = fot32111*sot31 + fot32211*sot32 + fot32311*sot33;
                result(2,10) = fot32122*sot31 + fot32222*sot32 + fot32322*sot33;
                result(2,11) = fot32133*sot31 + fot32233*sot32 + fot32333*sot33;
                result(2,12) = fot32123*sot31 + fot32223*sot32 + fot32323*sot33;
                result(2,13) = fot32113*sot31 + fot32213*sot32 + fot32313*sot33;
                result(2,14) = fot32112*sot31 + fot32212*sot32 + fot32312*sot33;
                result(2,15) = fot32132*sot31 + fot32232*sot32 + fot32332*sot33;
                result(2,16) = fot32131*sot31 + fot32231*sot32 + fot32331*sot33;
                result(2,17) = fot32121*sot31 + fot32221*sot32 + fot32321*sot33;
                result(2,18) = fot33111*sot31 + fot33211*sot32 + fot33311*sot33;
                result(2,19) = fot33122*sot31 + fot33222*sot32 + fot33322*sot33;
                result(2,20) = fot33133*sot31 + fot33233*sot32 + fot33333*sot33;
                result(2,21) = fot33123*sot31 + fot33223*sot32 + fot33323*sot33;
                result(2,22) = fot33113*sot31 + fot33213*sot32 + fot33313*sot33;
                result(2,23) = fot33112*sot31 + fot33212*sot32 + fot33312*sot33;
                result(2,24) = fot33132*sot31 + fot33232*sot32 + fot33332*sot33;
                result(2,25) = fot33131*sot31 + fot33231*sot32 + fot33331*sot33;
                result(2,26) = fot33121*sot31 + fot33221*sot32 + fot33321*sot33;
                result(3,0) = fot31111*sot21 + fot31211*sot22 + fot31311*sot23;
                result(3,1) = fot31122*sot21 + fot31222*sot22 + fot31322*sot23;
                result(3,2) = fot31133*sot21 + fot31233*sot22 + fot31333*sot23;
                result(3,3) = fot31123*sot21 + fot31223*sot22 + fot31323*sot23;
                result(3,4) = fot31113*sot21 + fot31213*sot22 + fot31313*sot23;
                result(3,5) = fot31112*sot21 + fot31212*sot22 + fot31312*sot23;
                result(3,6) = fot31132*sot21 + fot31232*sot22 + fot31332*sot23;
                result(3,7) = fot31131*sot21 + fot31231*sot22 + fot31331*sot23;
                result(3,8) = fot31121*sot21 + fot31221*sot22 + fot31321*sot23;
                result(3,9) = fot32111*sot21 + fot32211*sot22 + fot32311*sot23;
                result(3,10) = fot32122*sot21 + fot32222*sot22 + fot32322*sot23;
                result(3,11) = fot32133*sot21 + fot32233*sot22 + fot32333*sot23;
                result(3,12) = fot32123*sot21 + fot32223*sot22 + fot32323*sot23;
                result(3,13) = fot32113*sot21 + fot32213*sot22 + fot32313*sot23;
                result(3,14) = fot32112*sot21 + fot32212*sot22 + fot32312*sot23;
                result(3,15) = fot32132*sot21 + fot32232*sot22 + fot32332*sot23;
                result(3,16) = fot32131*sot21 + fot32231*sot22 + fot32331*sot23;
                result(3,17) = fot32121*sot21 + fot32221*sot22 + fot32321*sot23;
                result(3,18) = fot33111*sot21 + fot33211*sot22 + fot33311*sot23;
                result(3,19) = fot33122*sot21 + fot33222*sot22 + fot33322*sot23;
                result(3,20) = fot33133*sot21 + fot33233*sot22 + fot33333*sot23;
                result(3,21) = fot33123*sot21 + fot33223*sot22 + fot33323*sot23;
                result(3,22) = fot33113*sot21 + fot33213*sot22 + fot33313*sot23;
                result(3,23) = fot33112*sot21 + fot33212*sot22 + fot33312*sot23;
                result(3,24) = fot33132*sot21 + fot33232*sot22 + fot33332*sot23;
                result(3,25) = fot33131*sot21 + fot33231*sot22 + fot33331*sot23;
                result(3,26) = fot33121*sot21 + fot33221*sot22 + fot33321*sot23;
                result(4,0) = fot31111*sot11 + fot31211*sot12 + fot31311*sot13;
                result(4,1) = fot31122*sot11 + fot31222*sot12 + fot31322*sot13;
                result(4,2) = fot31133*sot11 + fot31233*sot12 + fot31333*sot13;
                result(4,3) = fot31123*sot11 + fot31223*sot12 + fot31323*sot13;
                result(4,4) = fot31113*sot11 + fot31213*sot12 + fot31313*sot13;
                result(4,5) = fot31112*sot11 + fot31212*sot12 + fot31312*sot13;
                result(4,6) = fot31132*sot11 + fot31232*sot12 + fot31332*sot13;
                result(4,7) = fot31131*sot11 + fot31231*sot12 + fot31331*sot13;
                result(4,8) = fot31121*sot11 + fot31221*sot12 + fot31321*sot13;
                result(4,9) = fot32111*sot11 + fot32211*sot12 + fot32311*sot13;
                result(4,10) = fot32122*sot11 + fot32222*sot12 + fot32322*sot13;
                result(4,11) = fot32133*sot11 + fot32233*sot12 + fot32333*sot13;
                result(4,12) = fot32123*sot11 + fot32223*sot12 + fot32323*sot13;
                result(4,13) = fot32113*sot11 + fot32213*sot12 + fot32313*sot13;
                result(4,14) = fot32112*sot11 + fot32212*sot12 + fot32312*sot13;
                result(4,15) = fot32132*sot11 + fot32232*sot12 + fot32332*sot13;
                result(4,16) = fot32131*sot11 + fot32231*sot12 + fot32331*sot13;
                result(4,17) = fot32121*sot11 + fot32221*sot12 + fot32321*sot13;
                result(4,18) = fot33111*sot11 + fot33211*sot12 + fot33311*sot13;
                result(4,19) = fot33122*sot11 + fot33222*sot12 + fot33322*sot13;
                result(4,20) = fot33133*sot11 + fot33233*sot12 + fot33333*sot13;
                result(4,21) = fot33123*sot11 + fot33223*sot12 + fot33323*sot13;
                result(4,22) = fot33113*sot11 + fot33213*sot12 + fot33313*sot13;
                result(4,23) = fot33112*sot11 + fot33212*sot12 + fot33312*sot13;
                result(4,24) = fot33132*sot11 + fot33232*sot12 + fot33332*sot13;
                result(4,25) = fot33131*sot11 + fot33231*sot12 + fot33331*sot13;
                result(4,26) = fot33121*sot11 + fot33221*sot12 + fot33321*sot13;
                result(5,0) = fot21111*sot11 + fot21211*sot12 + fot21311*sot13;
                result(5,1) = fot21122*sot11 + fot21222*sot12 + fot21322*sot13;
                result(5,2) = fot21133*sot11 + fot21233*sot12 + fot21333*sot13;
                result(5,3) = fot21123*sot11 + fot21223*sot12 + fot21323*sot13;
                result(5,4) = fot21113*sot11 + fot21213*sot12 + fot21313*sot13;
                result(5,5) = fot21112*sot11 + fot21212*sot12 + fot21312*sot13;
                result(5,6) = fot21132*sot11 + fot21232*sot12 + fot21332*sot13;
                result(5,7) = fot21131*sot11 + fot21231*sot12 + fot21331*sot13;
                result(5,8) = fot21121*sot11 + fot21221*sot12 + fot21321*sot13;
                result(5,9) = fot22111*sot11 + fot22211*sot12 + fot22311*sot13;
                result(5,10) = fot22122*sot11 + fot22222*sot12 + fot22322*sot13;
                result(5,11) = fot22133*sot11 + fot22233*sot12 + fot22333*sot13;
                result(5,12) = fot22123*sot11 + fot22223*sot12 + fot22323*sot13;
                result(5,13) = fot22113*sot11 + fot22213*sot12 + fot22313*sot13;
                result(5,14) = fot22112*sot11 + fot22212*sot12 + fot22312*sot13;
                result(5,15) = fot22132*sot11 + fot22232*sot12 + fot22332*sot13;
                result(5,16) = fot22131*sot11 + fot22231*sot12 + fot22331*sot13;
                result(5,17) = fot22121*sot11 + fot22221*sot12 + fot22321*sot13;
                result(5,18) = fot23111*sot11 + fot23211*sot12 + fot23311*sot13;
                result(5,19) = fot23122*sot11 + fot23222*sot12 + fot23322*sot13;
                result(5,20) = fot23133*sot11 + fot23233*sot12 + fot23333*sot13;
                result(5,21) = fot23123*sot11 + fot23223*sot12 + fot23323*sot13;
                result(5,22) = fot23113*sot11 + fot23213*sot12 + fot23313*sot13;
                result(5,23) = fot23112*sot11 + fot23212*sot12 + fot23312*sot13;
                result(5,24) = fot23132*sot11 + fot23232*sot12 + fot23332*sot13;
                result(5,25) = fot23131*sot11 + fot23231*sot12 + fot23331*sot13;
                result(5,26) = fot23121*sot11 + fot23221*sot12 + fot23321*sot13;
                result(6,0) = fot21111*sot31 + fot21211*sot32 + fot21311*sot33;
                result(6,1) = fot21122*sot31 + fot21222*sot32 + fot21322*sot33;
                result(6,2) = fot21133*sot31 + fot21233*sot32 + fot21333*sot33;
                result(6,3) = fot21123*sot31 + fot21223*sot32 + fot21323*sot33;
                result(6,4) = fot21113*sot31 + fot21213*sot32 + fot21313*sot33;
                result(6,5) = fot21112*sot31 + fot21212*sot32 + fot21312*sot33;
                result(6,6) = fot21132*sot31 + fot21232*sot32 + fot21332*sot33;
                result(6,7) = fot21131*sot31 + fot21231*sot32 + fot21331*sot33;
                result(6,8) = fot21121*sot31 + fot21221*sot32 + fot21321*sot33;
                result(6,9) = fot22111*sot31 + fot22211*sot32 + fot22311*sot33;
                result(6,10) = fot22122*sot31 + fot22222*sot32 + fot22322*sot33;
                result(6,11) = fot22133*sot31 + fot22233*sot32 + fot22333*sot33;
                result(6,12) = fot22123*sot31 + fot22223*sot32 + fot22323*sot33;
                result(6,13) = fot22113*sot31 + fot22213*sot32 + fot22313*sot33;
                result(6,14) = fot22112*sot31 + fot22212*sot32 + fot22312*sot33;
                result(6,15) = fot22132*sot31 + fot22232*sot32 + fot22332*sot33;
                result(6,16) = fot22131*sot31 + fot22231*sot32 + fot22331*sot33;
                result(6,17) = fot22121*sot31 + fot22221*sot32 + fot22321*sot33;
                result(6,18) = fot23111*sot31 + fot23211*sot32 + fot23311*sot33;
                result(6,19) = fot23122*sot31 + fot23222*sot32 + fot23322*sot33;
                result(6,20) = fot23133*sot31 + fot23233*sot32 + fot23333*sot33;
                result(6,21) = fot23123*sot31 + fot23223*sot32 + fot23323*sot33;
                result(6,22) = fot23113*sot31 + fot23213*sot32 + fot23313*sot33;
                result(6,23) = fot23112*sot31 + fot23212*sot32 + fot23312*sot33;
                result(6,24) = fot23132*sot31 + fot23232*sot32 + fot23332*sot33;
                result(6,25) = fot23131*sot31 + fot23231*sot32 + fot23331*sot33;
                result(6,26) = fot23121*sot31 + fot23221*sot32 + fot23321*sot33;
                result(7,0) = fot11111*sot31 + fot11211*sot32 + fot11311*sot33;
                result(7,1) = fot11122*sot31 + fot11222*sot32 + fot11322*sot33;
                result(7,2) = fot11133*sot31 + fot11233*sot32 + fot11333*sot33;
                result(7,3) = fot11123*sot31 + fot11223*sot32 + fot11323*sot33;
                result(7,4) = fot11113*sot31 + fot11213*sot32 + fot11313*sot33;
                result(7,5) = fot11112*sot31 + fot11212*sot32 + fot11312*sot33;
                result(7,6) = fot11132*sot31 + fot11232*sot32 + fot11332*sot33;
                result(7,7) = fot11131*sot31 + fot11231*sot32 + fot11331*sot33;
                result(7,8) = fot11121*sot31 + fot11221*sot32 + fot11321*sot33;
                result(7,9) = fot12111*sot31 + fot12211*sot32 + fot12311*sot33;
                result(7,10) = fot12122*sot31 + fot12222*sot32 + fot12322*sot33;
                result(7,11) = fot12133*sot31 + fot12233*sot32 + fot12333*sot33;
                result(7,12) = fot12123*sot31 + fot12223*sot32 + fot12323*sot33;
                result(7,13) = fot12113*sot31 + fot12213*sot32 + fot12313*sot33;
                result(7,14) = fot12112*sot31 + fot12212*sot32 + fot12312*sot33;
                result(7,15) = fot12132*sot31 + fot12232*sot32 + fot12332*sot33;
                result(7,16) = fot12131*sot31 + fot12231*sot32 + fot12331*sot33;
                result(7,17) = fot12121*sot31 + fot12221*sot32 + fot12321*sot33;
                result(7,18) = fot13111*sot31 + fot13211*sot32 + fot13311*sot33;
                result(7,19) = fot13122*sot31 + fot13222*sot32 + fot13322*sot33;
                result(7,20) = fot13133*sot31 + fot13233*sot32 + fot13333*sot33;
                result(7,21) = fot13123*sot31 + fot13223*sot32 + fot13323*sot33;
                result(7,22) = fot13113*sot31 + fot13213*sot32 + fot13313*sot33;
                result(7,23) = fot13112*sot31 + fot13212*sot32 + fot13312*sot33;
                result(7,24) = fot13132*sot31 + fot13232*sot32 + fot13332*sot33;
                result(7,25) = fot13131*sot31 + fot13231*sot32 + fot13331*sot33;
                result(7,26) = fot13121*sot31 + fot13221*sot32 + fot13321*sot33;
                result(8,0) = fot11111*sot21 + fot11211*sot22 + fot11311*sot23;
                result(8,1) = fot11122*sot21 + fot11222*sot22 + fot11322*sot23;
                result(8,2) = fot11133*sot21 + fot11233*sot22 + fot11333*sot23;
                result(8,3) = fot11123*sot21 + fot11223*sot22 + fot11323*sot23;
                result(8,4) = fot11113*sot21 + fot11213*sot22 + fot11313*sot23;
                result(8,5) = fot11112*sot21 + fot11212*sot22 + fot11312*sot23;
                result(8,6) = fot11132*sot21 + fot11232*sot22 + fot11332*sot23;
                result(8,7) = fot11131*sot21 + fot11231*sot22 + fot11331*sot23;
                result(8,8) = fot11121*sot21 + fot11221*sot22 + fot11321*sot23;
                result(8,9) = fot12111*sot21 + fot12211*sot22 + fot12311*sot23;
                result(8,10) = fot12122*sot21 + fot12222*sot22 + fot12322*sot23;
                result(8,11) = fot12133*sot21 + fot12233*sot22 + fot12333*sot23;
                result(8,12) = fot12123*sot21 + fot12223*sot22 + fot12323*sot23;
                result(8,13) = fot12113*sot21 + fot12213*sot22 + fot12313*sot23;
                result(8,14) = fot12112*sot21 + fot12212*sot22 + fot12312*sot23;
                result(8,15) = fot12132*sot21 + fot12232*sot22 + fot12332*sot23;
                result(8,16) = fot12131*sot21 + fot12231*sot22 + fot12331*sot23;
                result(8,17) = fot12121*sot21 + fot12221*sot22 + fot12321*sot23;
                result(8,18) = fot13111*sot21 + fot13211*sot22 + fot13311*sot23;
                result(8,19) = fot13122*sot21 + fot13222*sot22 + fot13322*sot23;
                result(8,20) = fot13133*sot21 + fot13233*sot22 + fot13333*sot23;
                result(8,21) = fot13123*sot21 + fot13223*sot22 + fot13323*sot23;
                result(8,22) = fot13113*sot21 + fot13213*sot22 + fot13313*sot23;
                result(8,23) = fot13112*sot21 + fot13212*sot22 + fot13312*sot23;
                result(8,24) = fot13132*sot21 + fot13232*sot22 + fot13332*sot23;
                result(8,25) = fot13131*sot21 + fot13231*sot22 + fot13331*sot23;
                result(8,26) = fot13121*sot21 + fot13221*sot22 + fot13321*sot23;
        }
        else if(i==3){
                result(0,0) = fot11111*sot11 + fot11121*sot12 + fot11131*sot13;
                result(0,1) = fot11212*sot11 + fot11222*sot12 + fot11232*sot13;
                result(0,2) = fot11313*sot11 + fot11323*sot12 + fot11333*sot13;
                result(0,3) = fot11213*sot11 + fot11223*sot12 + fot11233*sot13;
                result(0,4) = fot11113*sot11 + fot11123*sot12 + fot11133*sot13;
                result(0,5) = fot11112*sot11 + fot11122*sot12 + fot11132*sot13;
                result(0,6) = fot11312*sot11 + fot11322*sot12 + fot11332*sot13;
                result(0,7) = fot11311*sot11 + fot11321*sot12 + fot11331*sot13;
                result(0,8) = fot11211*sot11 + fot11221*sot12 + fot11231*sot13;
                result(0,9) = fot12111*sot11 + fot12121*sot12 + fot12131*sot13;
                result(0,10) = fot12212*sot11 + fot12222*sot12 + fot12232*sot13;
                result(0,11) = fot12313*sot11 + fot12323*sot12 + fot12333*sot13;
                result(0,12) = fot12213*sot11 + fot12223*sot12 + fot12233*sot13;
                result(0,13) = fot12113*sot11 + fot12123*sot12 + fot12133*sot13;
                result(0,14) = fot12112*sot11 + fot12122*sot12 + fot12132*sot13;
                result(0,15) = fot12312*sot11 + fot12322*sot12 + fot12332*sot13;
                result(0,16) = fot12311*sot11 + fot12321*sot12 + fot12331*sot13;
                result(0,17) = fot12211*sot11 + fot12221*sot12 + fot12231*sot13;
                result(0,18) = fot13111*sot11 + fot13121*sot12 + fot13131*sot13;
                result(0,19) = fot13212*sot11 + fot13222*sot12 + fot13232*sot13;
                result(0,20) = fot13313*sot11 + fot13323*sot12 + fot13333*sot13;
                result(0,21) = fot13213*sot11 + fot13223*sot12 + fot13233*sot13;
                result(0,22) = fot13113*sot11 + fot13123*sot12 + fot13133*sot13;
                result(0,23) = fot13112*sot11 + fot13122*sot12 + fot13132*sot13;
                result(0,24) = fot13312*sot11 + fot13322*sot12 + fot13332*sot13;
                result(0,25) = fot13311*sot11 + fot13321*sot12 + fot13331*sot13;
                result(0,26) = fot13211*sot11 + fot13221*sot12 + fot13231*sot13;
                result(1,0) = fot21111*sot21 + fot21121*sot22 + fot21131*sot23;
                result(1,1) = fot21212*sot21 + fot21222*sot22 + fot21232*sot23;
                result(1,2) = fot21313*sot21 + fot21323*sot22 + fot21333*sot23;
                result(1,3) = fot21213*sot21 + fot21223*sot22 + fot21233*sot23;
                result(1,4) = fot21113*sot21 + fot21123*sot22 + fot21133*sot23;
                result(1,5) = fot21112*sot21 + fot21122*sot22 + fot21132*sot23;
                result(1,6) = fot21312*sot21 + fot21322*sot22 + fot21332*sot23;
                result(1,7) = fot21311*sot21 + fot21321*sot22 + fot21331*sot23;
                result(1,8) = fot21211*sot21 + fot21221*sot22 + fot21231*sot23;
                result(1,9) = fot22111*sot21 + fot22121*sot22 + fot22131*sot23;
                result(1,10) = fot22212*sot21 + fot22222*sot22 + fot22232*sot23;
                result(1,11) = fot22313*sot21 + fot22323*sot22 + fot22333*sot23;
                result(1,12) = fot22213*sot21 + fot22223*sot22 + fot22233*sot23;
                result(1,13) = fot22113*sot21 + fot22123*sot22 + fot22133*sot23;
                result(1,14) = fot22112*sot21 + fot22122*sot22 + fot22132*sot23;
                result(1,15) = fot22312*sot21 + fot22322*sot22 + fot22332*sot23;
                result(1,16) = fot22311*sot21 + fot22321*sot22 + fot22331*sot23;
                result(1,17) = fot22211*sot21 + fot22221*sot22 + fot22231*sot23;
                result(1,18) = fot23111*sot21 + fot23121*sot22 + fot23131*sot23;
                result(1,19) = fot23212*sot21 + fot23222*sot22 + fot23232*sot23;
                result(1,20) = fot23313*sot21 + fot23323*sot22 + fot23333*sot23;
                result(1,21) = fot23213*sot21 + fot23223*sot22 + fot23233*sot23;
                result(1,22) = fot23113*sot21 + fot23123*sot22 + fot23133*sot23;
                result(1,23) = fot23112*sot21 + fot23122*sot22 + fot23132*sot23;
                result(1,24) = fot23312*sot21 + fot23322*sot22 + fot23332*sot23;
                result(1,25) = fot23311*sot21 + fot23321*sot22 + fot23331*sot23;
                result(1,26) = fot23211*sot21 + fot23221*sot22 + fot23231*sot23;
                result(2,0) = fot31111*sot31 + fot31121*sot32 + fot31131*sot33;
                result(2,1) = fot31212*sot31 + fot31222*sot32 + fot31232*sot33;
                result(2,2) = fot31313*sot31 + fot31323*sot32 + fot31333*sot33;
                result(2,3) = fot31213*sot31 + fot31223*sot32 + fot31233*sot33;
                result(2,4) = fot31113*sot31 + fot31123*sot32 + fot31133*sot33;
                result(2,5) = fot31112*sot31 + fot31122*sot32 + fot31132*sot33;
                result(2,6) = fot31312*sot31 + fot31322*sot32 + fot31332*sot33;
                result(2,7) = fot31311*sot31 + fot31321*sot32 + fot31331*sot33;
                result(2,8) = fot31211*sot31 + fot31221*sot32 + fot31231*sot33;
                result(2,9) = fot32111*sot31 + fot32121*sot32 + fot32131*sot33;
                result(2,10) = fot32212*sot31 + fot32222*sot32 + fot32232*sot33;
                result(2,11) = fot32313*sot31 + fot32323*sot32 + fot32333*sot33;
                result(2,12) = fot32213*sot31 + fot32223*sot32 + fot32233*sot33;
                result(2,13) = fot32113*sot31 + fot32123*sot32 + fot32133*sot33;
                result(2,14) = fot32112*sot31 + fot32122*sot32 + fot32132*sot33;
                result(2,15) = fot32312*sot31 + fot32322*sot32 + fot32332*sot33;
                result(2,16) = fot32311*sot31 + fot32321*sot32 + fot32331*sot33;
                result(2,17) = fot32211*sot31 + fot32221*sot32 + fot32231*sot33;
                result(2,18) = fot33111*sot31 + fot33121*sot32 + fot33131*sot33;
                result(2,19) = fot33212*sot31 + fot33222*sot32 + fot33232*sot33;
                result(2,20) = fot33313*sot31 + fot33323*sot32 + fot33333*sot33;
                result(2,21) = fot33213*sot31 + fot33223*sot32 + fot33233*sot33;
                result(2,22) = fot33113*sot31 + fot33123*sot32 + fot33133*sot33;
                result(2,23) = fot33112*sot31 + fot33122*sot32 + fot33132*sot33;
                result(2,24) = fot33312*sot31 + fot33322*sot32 + fot33332*sot33;
                result(2,25) = fot33311*sot31 + fot33321*sot32 + fot33331*sot33;
                result(2,26) = fot33211*sot31 + fot33221*sot32 + fot33231*sot33;
                result(3,0) = fot31111*sot21 + fot31121*sot22 + fot31131*sot23;
                result(3,1) = fot31212*sot21 + fot31222*sot22 + fot31232*sot23;
                result(3,2) = fot31313*sot21 + fot31323*sot22 + fot31333*sot23;
                result(3,3) = fot31213*sot21 + fot31223*sot22 + fot31233*sot23;
                result(3,4) = fot31113*sot21 + fot31123*sot22 + fot31133*sot23;
                result(3,5) = fot31112*sot21 + fot31122*sot22 + fot31132*sot23;
                result(3,6) = fot31312*sot21 + fot31322*sot22 + fot31332*sot23;
                result(3,7) = fot31311*sot21 + fot31321*sot22 + fot31331*sot23;
                result(3,8) = fot31211*sot21 + fot31221*sot22 + fot31231*sot23;
                result(3,9) = fot32111*sot21 + fot32121*sot22 + fot32131*sot23;
                result(3,10) = fot32212*sot21 + fot32222*sot22 + fot32232*sot23;
                result(3,11) = fot32313*sot21 + fot32323*sot22 + fot32333*sot23;
                result(3,12) = fot32213*sot21 + fot32223*sot22 + fot32233*sot23;
                result(3,13) = fot32113*sot21 + fot32123*sot22 + fot32133*sot23;
                result(3,14) = fot32112*sot21 + fot32122*sot22 + fot32132*sot23;
                result(3,15) = fot32312*sot21 + fot32322*sot22 + fot32332*sot23;
                result(3,16) = fot32311*sot21 + fot32321*sot22 + fot32331*sot23;
                result(3,17) = fot32211*sot21 + fot32221*sot22 + fot32231*sot23;
                result(3,18) = fot33111*sot21 + fot33121*sot22 + fot33131*sot23;
                result(3,19) = fot33212*sot21 + fot33222*sot22 + fot33232*sot23;
                result(3,20) = fot33313*sot21 + fot33323*sot22 + fot33333*sot23;
                result(3,21) = fot33213*sot21 + fot33223*sot22 + fot33233*sot23;
                result(3,22) = fot33113*sot21 + fot33123*sot22 + fot33133*sot23;
                result(3,23) = fot33112*sot21 + fot33122*sot22 + fot33132*sot23;
                result(3,24) = fot33312*sot21 + fot33322*sot22 + fot33332*sot23;
                result(3,25) = fot33311*sot21 + fot33321*sot22 + fot33331*sot23;
                result(3,26) = fot33211*sot21 + fot33221*sot22 + fot33231*sot23;
                result(4,0) = fot31111*sot11 + fot31121*sot12 + fot31131*sot13;
                result(4,1) = fot31212*sot11 + fot31222*sot12 + fot31232*sot13;
                result(4,2) = fot31313*sot11 + fot31323*sot12 + fot31333*sot13;
                result(4,3) = fot31213*sot11 + fot31223*sot12 + fot31233*sot13;
                result(4,4) = fot31113*sot11 + fot31123*sot12 + fot31133*sot13;
                result(4,5) = fot31112*sot11 + fot31122*sot12 + fot31132*sot13;
                result(4,6) = fot31312*sot11 + fot31322*sot12 + fot31332*sot13;
                result(4,7) = fot31311*sot11 + fot31321*sot12 + fot31331*sot13;
                result(4,8) = fot31211*sot11 + fot31221*sot12 + fot31231*sot13;
                result(4,9) = fot32111*sot11 + fot32121*sot12 + fot32131*sot13;
                result(4,10) = fot32212*sot11 + fot32222*sot12 + fot32232*sot13;
                result(4,11) = fot32313*sot11 + fot32323*sot12 + fot32333*sot13;
                result(4,12) = fot32213*sot11 + fot32223*sot12 + fot32233*sot13;
                result(4,13) = fot32113*sot11 + fot32123*sot12 + fot32133*sot13;
                result(4,14) = fot32112*sot11 + fot32122*sot12 + fot32132*sot13;
                result(4,15) = fot32312*sot11 + fot32322*sot12 + fot32332*sot13;
                result(4,16) = fot32311*sot11 + fot32321*sot12 + fot32331*sot13;
                result(4,17) = fot32211*sot11 + fot32221*sot12 + fot32231*sot13;
                result(4,18) = fot33111*sot11 + fot33121*sot12 + fot33131*sot13;
                result(4,19) = fot33212*sot11 + fot33222*sot12 + fot33232*sot13;
                result(4,20) = fot33313*sot11 + fot33323*sot12 + fot33333*sot13;
                result(4,21) = fot33213*sot11 + fot33223*sot12 + fot33233*sot13;
                result(4,22) = fot33113*sot11 + fot33123*sot12 + fot33133*sot13;
                result(4,23) = fot33112*sot11 + fot33122*sot12 + fot33132*sot13;
                result(4,24) = fot33312*sot11 + fot33322*sot12 + fot33332*sot13;
                result(4,25) = fot33311*sot11 + fot33321*sot12 + fot33331*sot13;
                result(4,26) = fot33211*sot11 + fot33221*sot12 + fot33231*sot13;
                result(5,0) = fot21111*sot11 + fot21121*sot12 + fot21131*sot13;
                result(5,1) = fot21212*sot11 + fot21222*sot12 + fot21232*sot13;
                result(5,2) = fot21313*sot11 + fot21323*sot12 + fot21333*sot13;
                result(5,3) = fot21213*sot11 + fot21223*sot12 + fot21233*sot13;
                result(5,4) = fot21113*sot11 + fot21123*sot12 + fot21133*sot13;
                result(5,5) = fot21112*sot11 + fot21122*sot12 + fot21132*sot13;
                result(5,6) = fot21312*sot11 + fot21322*sot12 + fot21332*sot13;
                result(5,7) = fot21311*sot11 + fot21321*sot12 + fot21331*sot13;
                result(5,8) = fot21211*sot11 + fot21221*sot12 + fot21231*sot13;
                result(5,9) = fot22111*sot11 + fot22121*sot12 + fot22131*sot13;
                result(5,10) = fot22212*sot11 + fot22222*sot12 + fot22232*sot13;
                result(5,11) = fot22313*sot11 + fot22323*sot12 + fot22333*sot13;
                result(5,12) = fot22213*sot11 + fot22223*sot12 + fot22233*sot13;
                result(5,13) = fot22113*sot11 + fot22123*sot12 + fot22133*sot13;
                result(5,14) = fot22112*sot11 + fot22122*sot12 + fot22132*sot13;
                result(5,15) = fot22312*sot11 + fot22322*sot12 + fot22332*sot13;
                result(5,16) = fot22311*sot11 + fot22321*sot12 + fot22331*sot13;
                result(5,17) = fot22211*sot11 + fot22221*sot12 + fot22231*sot13;
                result(5,18) = fot23111*sot11 + fot23121*sot12 + fot23131*sot13;
                result(5,19) = fot23212*sot11 + fot23222*sot12 + fot23232*sot13;
                result(5,20) = fot23313*sot11 + fot23323*sot12 + fot23333*sot13;
                result(5,21) = fot23213*sot11 + fot23223*sot12 + fot23233*sot13;
                result(5,22) = fot23113*sot11 + fot23123*sot12 + fot23133*sot13;
                result(5,23) = fot23112*sot11 + fot23122*sot12 + fot23132*sot13;
                result(5,24) = fot23312*sot11 + fot23322*sot12 + fot23332*sot13;
                result(5,25) = fot23311*sot11 + fot23321*sot12 + fot23331*sot13;
                result(5,26) = fot23211*sot11 + fot23221*sot12 + fot23231*sot13;
                result(6,0) = fot21111*sot31 + fot21121*sot32 + fot21131*sot33;
                result(6,1) = fot21212*sot31 + fot21222*sot32 + fot21232*sot33;
                result(6,2) = fot21313*sot31 + fot21323*sot32 + fot21333*sot33;
                result(6,3) = fot21213*sot31 + fot21223*sot32 + fot21233*sot33;
                result(6,4) = fot21113*sot31 + fot21123*sot32 + fot21133*sot33;
                result(6,5) = fot21112*sot31 + fot21122*sot32 + fot21132*sot33;
                result(6,6) = fot21312*sot31 + fot21322*sot32 + fot21332*sot33;
                result(6,7) = fot21311*sot31 + fot21321*sot32 + fot21331*sot33;
                result(6,8) = fot21211*sot31 + fot21221*sot32 + fot21231*sot33;
                result(6,9) = fot22111*sot31 + fot22121*sot32 + fot22131*sot33;
                result(6,10) = fot22212*sot31 + fot22222*sot32 + fot22232*sot33;
                result(6,11) = fot22313*sot31 + fot22323*sot32 + fot22333*sot33;
                result(6,12) = fot22213*sot31 + fot22223*sot32 + fot22233*sot33;
                result(6,13) = fot22113*sot31 + fot22123*sot32 + fot22133*sot33;
                result(6,14) = fot22112*sot31 + fot22122*sot32 + fot22132*sot33;
                result(6,15) = fot22312*sot31 + fot22322*sot32 + fot22332*sot33;
                result(6,16) = fot22311*sot31 + fot22321*sot32 + fot22331*sot33;
                result(6,17) = fot22211*sot31 + fot22221*sot32 + fot22231*sot33;
                result(6,18) = fot23111*sot31 + fot23121*sot32 + fot23131*sot33;
                result(6,19) = fot23212*sot31 + fot23222*sot32 + fot23232*sot33;
                result(6,20) = fot23313*sot31 + fot23323*sot32 + fot23333*sot33;
                result(6,21) = fot23213*sot31 + fot23223*sot32 + fot23233*sot33;
                result(6,22) = fot23113*sot31 + fot23123*sot32 + fot23133*sot33;
                result(6,23) = fot23112*sot31 + fot23122*sot32 + fot23132*sot33;
                result(6,24) = fot23312*sot31 + fot23322*sot32 + fot23332*sot33;
                result(6,25) = fot23311*sot31 + fot23321*sot32 + fot23331*sot33;
                result(6,26) = fot23211*sot31 + fot23221*sot32 + fot23231*sot33;
                result(7,0) = fot11111*sot31 + fot11121*sot32 + fot11131*sot33;
                result(7,1) = fot11212*sot31 + fot11222*sot32 + fot11232*sot33;
                result(7,2) = fot11313*sot31 + fot11323*sot32 + fot11333*sot33;
                result(7,3) = fot11213*sot31 + fot11223*sot32 + fot11233*sot33;
                result(7,4) = fot11113*sot31 + fot11123*sot32 + fot11133*sot33;
                result(7,5) = fot11112*sot31 + fot11122*sot32 + fot11132*sot33;
                result(7,6) = fot11312*sot31 + fot11322*sot32 + fot11332*sot33;
                result(7,7) = fot11311*sot31 + fot11321*sot32 + fot11331*sot33;
                result(7,8) = fot11211*sot31 + fot11221*sot32 + fot11231*sot33;
                result(7,9) = fot12111*sot31 + fot12121*sot32 + fot12131*sot33;
                result(7,10) = fot12212*sot31 + fot12222*sot32 + fot12232*sot33;
                result(7,11) = fot12313*sot31 + fot12323*sot32 + fot12333*sot33;
                result(7,12) = fot12213*sot31 + fot12223*sot32 + fot12233*sot33;
                result(7,13) = fot12113*sot31 + fot12123*sot32 + fot12133*sot33;
                result(7,14) = fot12112*sot31 + fot12122*sot32 + fot12132*sot33;
                result(7,15) = fot12312*sot31 + fot12322*sot32 + fot12332*sot33;
                result(7,16) = fot12311*sot31 + fot12321*sot32 + fot12331*sot33;
                result(7,17) = fot12211*sot31 + fot12221*sot32 + fot12231*sot33;
                result(7,18) = fot13111*sot31 + fot13121*sot32 + fot13131*sot33;
                result(7,19) = fot13212*sot31 + fot13222*sot32 + fot13232*sot33;
                result(7,20) = fot13313*sot31 + fot13323*sot32 + fot13333*sot33;
                result(7,21) = fot13213*sot31 + fot13223*sot32 + fot13233*sot33;
                result(7,22) = fot13113*sot31 + fot13123*sot32 + fot13133*sot33;
                result(7,23) = fot13112*sot31 + fot13122*sot32 + fot13132*sot33;
                result(7,24) = fot13312*sot31 + fot13322*sot32 + fot13332*sot33;
                result(7,25) = fot13311*sot31 + fot13321*sot32 + fot13331*sot33;
                result(7,26) = fot13211*sot31 + fot13221*sot32 + fot13231*sot33;
                result(8,0) = fot11111*sot21 + fot11121*sot22 + fot11131*sot23;
                result(8,1) = fot11212*sot21 + fot11222*sot22 + fot11232*sot23;
                result(8,2) = fot11313*sot21 + fot11323*sot22 + fot11333*sot23;
                result(8,3) = fot11213*sot21 + fot11223*sot22 + fot11233*sot23;
                result(8,4) = fot11113*sot21 + fot11123*sot22 + fot11133*sot23;
                result(8,5) = fot11112*sot21 + fot11122*sot22 + fot11132*sot23;
                result(8,6) = fot11312*sot21 + fot11322*sot22 + fot11332*sot23;
                result(8,7) = fot11311*sot21 + fot11321*sot22 + fot11331*sot23;
                result(8,8) = fot11211*sot21 + fot11221*sot22 + fot11231*sot23;
                result(8,9) = fot12111*sot21 + fot12121*sot22 + fot12131*sot23;
                result(8,10) = fot12212*sot21 + fot12222*sot22 + fot12232*sot23;
                result(8,11) = fot12313*sot21 + fot12323*sot22 + fot12333*sot23;
                result(8,12) = fot12213*sot21 + fot12223*sot22 + fot12233*sot23;
                result(8,13) = fot12113*sot21 + fot12123*sot22 + fot12133*sot23;
                result(8,14) = fot12112*sot21 + fot12122*sot22 + fot12132*sot23;
                result(8,15) = fot12312*sot21 + fot12322*sot22 + fot12332*sot23;
                result(8,16) = fot12311*sot21 + fot12321*sot22 + fot12331*sot23;
                result(8,17) = fot12211*sot21 + fot12221*sot22 + fot12231*sot23;
                result(8,18) = fot13111*sot21 + fot13121*sot22 + fot13131*sot23;
                result(8,19) = fot13212*sot21 + fot13222*sot22 + fot13232*sot23;
                result(8,20) = fot13313*sot21 + fot13323*sot22 + fot13333*sot23;
                result(8,21) = fot13213*sot21 + fot13223*sot22 + fot13233*sot23;
                result(8,22) = fot13113*sot21 + fot13123*sot22 + fot13133*sot23;
                result(8,23) = fot13112*sot21 + fot13122*sot22 + fot13132*sot23;
                result(8,24) = fot13312*sot21 + fot13322*sot22 + fot13332*sot23;
                result(8,25) = fot13311*sot21 + fot13321*sot22 + fot13331*sot23;
                result(8,26) = fot13211*sot21 + fot13221*sot22 + fot13231*sot23;
        }
        else if(i==4){
                result(0,0) = fot11111*sot11 + fot11112*sot12 + fot11113*sot13;
                result(0,1) = fot11221*sot11 + fot11222*sot12 + fot11223*sot13;
                result(0,2) = fot11331*sot11 + fot11332*sot12 + fot11333*sot13;
                result(0,3) = fot11231*sot11 + fot11232*sot12 + fot11233*sot13;
                result(0,4) = fot11131*sot11 + fot11132*sot12 + fot11133*sot13;
                result(0,5) = fot11121*sot11 + fot11122*sot12 + fot11123*sot13;
                result(0,6) = fot11321*sot11 + fot11322*sot12 + fot11323*sot13;
                result(0,7) = fot11311*sot11 + fot11312*sot12 + fot11313*sot13;
                result(0,8) = fot11211*sot11 + fot11212*sot12 + fot11213*sot13;
                result(0,9) = fot12111*sot11 + fot12112*sot12 + fot12113*sot13;
                result(0,10) = fot12221*sot11 + fot12222*sot12 + fot12223*sot13;
                result(0,11) = fot12331*sot11 + fot12332*sot12 + fot12333*sot13;
                result(0,12) = fot12231*sot11 + fot12232*sot12 + fot12233*sot13;
                result(0,13) = fot12131*sot11 + fot12132*sot12 + fot12133*sot13;
                result(0,14) = fot12121*sot11 + fot12122*sot12 + fot12123*sot13;
                result(0,15) = fot12321*sot11 + fot12322*sot12 + fot12323*sot13;
                result(0,16) = fot12311*sot11 + fot12312*sot12 + fot12313*sot13;
                result(0,17) = fot12211*sot11 + fot12212*sot12 + fot12213*sot13;
                result(0,18) = fot13111*sot11 + fot13112*sot12 + fot13113*sot13;
                result(0,19) = fot13221*sot11 + fot13222*sot12 + fot13223*sot13;
                result(0,20) = fot13331*sot11 + fot13332*sot12 + fot13333*sot13;
                result(0,21) = fot13231*sot11 + fot13232*sot12 + fot13233*sot13;
                result(0,22) = fot13131*sot11 + fot13132*sot12 + fot13133*sot13;
                result(0,23) = fot13121*sot11 + fot13122*sot12 + fot13123*sot13;
                result(0,24) = fot13321*sot11 + fot13322*sot12 + fot13323*sot13;
                result(0,25) = fot13311*sot11 + fot13312*sot12 + fot13313*sot13;
                result(0,26) = fot13211*sot11 + fot13212*sot12 + fot13213*sot13;
                result(1,0) = fot21111*sot21 + fot21112*sot22 + fot21113*sot23;
                result(1,1) = fot21221*sot21 + fot21222*sot22 + fot21223*sot23;
                result(1,2) = fot21331*sot21 + fot21332*sot22 + fot21333*sot23;
                result(1,3) = fot21231*sot21 + fot21232*sot22 + fot21233*sot23;
                result(1,4) = fot21131*sot21 + fot21132*sot22 + fot21133*sot23;
                result(1,5) = fot21121*sot21 + fot21122*sot22 + fot21123*sot23;
                result(1,6) = fot21321*sot21 + fot21322*sot22 + fot21323*sot23;
                result(1,7) = fot21311*sot21 + fot21312*sot22 + fot21313*sot23;
                result(1,8) = fot21211*sot21 + fot21212*sot22 + fot21213*sot23;
                result(1,9) = fot22111*sot21 + fot22112*sot22 + fot22113*sot23;
                result(1,10) = fot22221*sot21 + fot22222*sot22 + fot22223*sot23;
                result(1,11) = fot22331*sot21 + fot22332*sot22 + fot22333*sot23;
                result(1,12) = fot22231*sot21 + fot22232*sot22 + fot22233*sot23;
                result(1,13) = fot22131*sot21 + fot22132*sot22 + fot22133*sot23;
                result(1,14) = fot22121*sot21 + fot22122*sot22 + fot22123*sot23;
                result(1,15) = fot22321*sot21 + fot22322*sot22 + fot22323*sot23;
                result(1,16) = fot22311*sot21 + fot22312*sot22 + fot22313*sot23;
                result(1,17) = fot22211*sot21 + fot22212*sot22 + fot22213*sot23;
                result(1,18) = fot23111*sot21 + fot23112*sot22 + fot23113*sot23;
                result(1,19) = fot23221*sot21 + fot23222*sot22 + fot23223*sot23;
                result(1,20) = fot23331*sot21 + fot23332*sot22 + fot23333*sot23;
                result(1,21) = fot23231*sot21 + fot23232*sot22 + fot23233*sot23;
                result(1,22) = fot23131*sot21 + fot23132*sot22 + fot23133*sot23;
                result(1,23) = fot23121*sot21 + fot23122*sot22 + fot23123*sot23;
                result(1,24) = fot23321*sot21 + fot23322*sot22 + fot23323*sot23;
                result(1,25) = fot23311*sot21 + fot23312*sot22 + fot23313*sot23;
                result(1,26) = fot23211*sot21 + fot23212*sot22 + fot23213*sot23;
                result(2,0) = fot31111*sot31 + fot31112*sot32 + fot31113*sot33;
                result(2,1) = fot31221*sot31 + fot31222*sot32 + fot31223*sot33;
                result(2,2) = fot31331*sot31 + fot31332*sot32 + fot31333*sot33;
                result(2,3) = fot31231*sot31 + fot31232*sot32 + fot31233*sot33;
                result(2,4) = fot31131*sot31 + fot31132*sot32 + fot31133*sot33;
                result(2,5) = fot31121*sot31 + fot31122*sot32 + fot31123*sot33;
                result(2,6) = fot31321*sot31 + fot31322*sot32 + fot31323*sot33;
                result(2,7) = fot31311*sot31 + fot31312*sot32 + fot31313*sot33;
                result(2,8) = fot31211*sot31 + fot31212*sot32 + fot31213*sot33;
                result(2,9) = fot32111*sot31 + fot32112*sot32 + fot32113*sot33;
                result(2,10) = fot32221*sot31 + fot32222*sot32 + fot32223*sot33;
                result(2,11) = fot32331*sot31 + fot32332*sot32 + fot32333*sot33;
                result(2,12) = fot32231*sot31 + fot32232*sot32 + fot32233*sot33;
                result(2,13) = fot32131*sot31 + fot32132*sot32 + fot32133*sot33;
                result(2,14) = fot32121*sot31 + fot32122*sot32 + fot32123*sot33;
                result(2,15) = fot32321*sot31 + fot32322*sot32 + fot32323*sot33;
                result(2,16) = fot32311*sot31 + fot32312*sot32 + fot32313*sot33;
                result(2,17) = fot32211*sot31 + fot32212*sot32 + fot32213*sot33;
                result(2,18) = fot33111*sot31 + fot33112*sot32 + fot33113*sot33;
                result(2,19) = fot33221*sot31 + fot33222*sot32 + fot33223*sot33;
                result(2,20) = fot33331*sot31 + fot33332*sot32 + fot33333*sot33;
                result(2,21) = fot33231*sot31 + fot33232*sot32 + fot33233*sot33;
                result(2,22) = fot33131*sot31 + fot33132*sot32 + fot33133*sot33;
                result(2,23) = fot33121*sot31 + fot33122*sot32 + fot33123*sot33;
                result(2,24) = fot33321*sot31 + fot33322*sot32 + fot33323*sot33;
                result(2,25) = fot33311*sot31 + fot33312*sot32 + fot33313*sot33;
                result(2,26) = fot33211*sot31 + fot33212*sot32 + fot33213*sot33;
                result(3,0) = fot31111*sot21 + fot31112*sot22 + fot31113*sot23;
                result(3,1) = fot31221*sot21 + fot31222*sot22 + fot31223*sot23;
                result(3,2) = fot31331*sot21 + fot31332*sot22 + fot31333*sot23;
                result(3,3) = fot31231*sot21 + fot31232*sot22 + fot31233*sot23;
                result(3,4) = fot31131*sot21 + fot31132*sot22 + fot31133*sot23;
                result(3,5) = fot31121*sot21 + fot31122*sot22 + fot31123*sot23;
                result(3,6) = fot31321*sot21 + fot31322*sot22 + fot31323*sot23;
                result(3,7) = fot31311*sot21 + fot31312*sot22 + fot31313*sot23;
                result(3,8) = fot31211*sot21 + fot31212*sot22 + fot31213*sot23;
                result(3,9) = fot32111*sot21 + fot32112*sot22 + fot32113*sot23;
                result(3,10) = fot32221*sot21 + fot32222*sot22 + fot32223*sot23;
                result(3,11) = fot32331*sot21 + fot32332*sot22 + fot32333*sot23;
                result(3,12) = fot32231*sot21 + fot32232*sot22 + fot32233*sot23;
                result(3,13) = fot32131*sot21 + fot32132*sot22 + fot32133*sot23;
                result(3,14) = fot32121*sot21 + fot32122*sot22 + fot32123*sot23;
                result(3,15) = fot32321*sot21 + fot32322*sot22 + fot32323*sot23;
                result(3,16) = fot32311*sot21 + fot32312*sot22 + fot32313*sot23;
                result(3,17) = fot32211*sot21 + fot32212*sot22 + fot32213*sot23;
                result(3,18) = fot33111*sot21 + fot33112*sot22 + fot33113*sot23;
                result(3,19) = fot33221*sot21 + fot33222*sot22 + fot33223*sot23;
                result(3,20) = fot33331*sot21 + fot33332*sot22 + fot33333*sot23;
                result(3,21) = fot33231*sot21 + fot33232*sot22 + fot33233*sot23;
                result(3,22) = fot33131*sot21 + fot33132*sot22 + fot33133*sot23;
                result(3,23) = fot33121*sot21 + fot33122*sot22 + fot33123*sot23;
                result(3,24) = fot33321*sot21 + fot33322*sot22 + fot33323*sot23;
                result(3,25) = fot33311*sot21 + fot33312*sot22 + fot33313*sot23;
                result(3,26) = fot33211*sot21 + fot33212*sot22 + fot33213*sot23;
                result(4,0) = fot31111*sot11 + fot31112*sot12 + fot31113*sot13;
                result(4,1) = fot31221*sot11 + fot31222*sot12 + fot31223*sot13;
                result(4,2) = fot31331*sot11 + fot31332*sot12 + fot31333*sot13;
                result(4,3) = fot31231*sot11 + fot31232*sot12 + fot31233*sot13;
                result(4,4) = fot31131*sot11 + fot31132*sot12 + fot31133*sot13;
                result(4,5) = fot31121*sot11 + fot31122*sot12 + fot31123*sot13;
                result(4,6) = fot31321*sot11 + fot31322*sot12 + fot31323*sot13;
                result(4,7) = fot31311*sot11 + fot31312*sot12 + fot31313*sot13;
                result(4,8) = fot31211*sot11 + fot31212*sot12 + fot31213*sot13;
                result(4,9) = fot32111*sot11 + fot32112*sot12 + fot32113*sot13;
                result(4,10) = fot32221*sot11 + fot32222*sot12 + fot32223*sot13;
                result(4,11) = fot32331*sot11 + fot32332*sot12 + fot32333*sot13;
                result(4,12) = fot32231*sot11 + fot32232*sot12 + fot32233*sot13;
                result(4,13) = fot32131*sot11 + fot32132*sot12 + fot32133*sot13;
                result(4,14) = fot32121*sot11 + fot32122*sot12 + fot32123*sot13;
                result(4,15) = fot32321*sot11 + fot32322*sot12 + fot32323*sot13;
                result(4,16) = fot32311*sot11 + fot32312*sot12 + fot32313*sot13;
                result(4,17) = fot32211*sot11 + fot32212*sot12 + fot32213*sot13;
                result(4,18) = fot33111*sot11 + fot33112*sot12 + fot33113*sot13;
                result(4,19) = fot33221*sot11 + fot33222*sot12 + fot33223*sot13;
                result(4,20) = fot33331*sot11 + fot33332*sot12 + fot33333*sot13;
                result(4,21) = fot33231*sot11 + fot33232*sot12 + fot33233*sot13;
                result(4,22) = fot33131*sot11 + fot33132*sot12 + fot33133*sot13;
                result(4,23) = fot33121*sot11 + fot33122*sot12 + fot33123*sot13;
                result(4,24) = fot33321*sot11 + fot33322*sot12 + fot33323*sot13;
                result(4,25) = fot33311*sot11 + fot33312*sot12 + fot33313*sot13;
                result(4,26) = fot33211*sot11 + fot33212*sot12 + fot33213*sot13;
                result(5,0) = fot21111*sot11 + fot21112*sot12 + fot21113*sot13;
                result(5,1) = fot21221*sot11 + fot21222*sot12 + fot21223*sot13;
                result(5,2) = fot21331*sot11 + fot21332*sot12 + fot21333*sot13;
                result(5,3) = fot21231*sot11 + fot21232*sot12 + fot21233*sot13;
                result(5,4) = fot21131*sot11 + fot21132*sot12 + fot21133*sot13;
                result(5,5) = fot21121*sot11 + fot21122*sot12 + fot21123*sot13;
                result(5,6) = fot21321*sot11 + fot21322*sot12 + fot21323*sot13;
                result(5,7) = fot21311*sot11 + fot21312*sot12 + fot21313*sot13;
                result(5,8) = fot21211*sot11 + fot21212*sot12 + fot21213*sot13;
                result(5,9) = fot22111*sot11 + fot22112*sot12 + fot22113*sot13;
                result(5,10) = fot22221*sot11 + fot22222*sot12 + fot22223*sot13;
                result(5,11) = fot22331*sot11 + fot22332*sot12 + fot22333*sot13;
                result(5,12) = fot22231*sot11 + fot22232*sot12 + fot22233*sot13;
                result(5,13) = fot22131*sot11 + fot22132*sot12 + fot22133*sot13;
                result(5,14) = fot22121*sot11 + fot22122*sot12 + fot22123*sot13;
                result(5,15) = fot22321*sot11 + fot22322*sot12 + fot22323*sot13;
                result(5,16) = fot22311*sot11 + fot22312*sot12 + fot22313*sot13;
                result(5,17) = fot22211*sot11 + fot22212*sot12 + fot22213*sot13;
                result(5,18) = fot23111*sot11 + fot23112*sot12 + fot23113*sot13;
                result(5,19) = fot23221*sot11 + fot23222*sot12 + fot23223*sot13;
                result(5,20) = fot23331*sot11 + fot23332*sot12 + fot23333*sot13;
                result(5,21) = fot23231*sot11 + fot23232*sot12 + fot23233*sot13;
                result(5,22) = fot23131*sot11 + fot23132*sot12 + fot23133*sot13;
                result(5,23) = fot23121*sot11 + fot23122*sot12 + fot23123*sot13;
                result(5,24) = fot23321*sot11 + fot23322*sot12 + fot23323*sot13;
                result(5,25) = fot23311*sot11 + fot23312*sot12 + fot23313*sot13;
                result(5,26) = fot23211*sot11 + fot23212*sot12 + fot23213*sot13;
                result(6,0) = fot21111*sot31 + fot21112*sot32 + fot21113*sot33;
                result(6,1) = fot21221*sot31 + fot21222*sot32 + fot21223*sot33;
                result(6,2) = fot21331*sot31 + fot21332*sot32 + fot21333*sot33;
                result(6,3) = fot21231*sot31 + fot21232*sot32 + fot21233*sot33;
                result(6,4) = fot21131*sot31 + fot21132*sot32 + fot21133*sot33;
                result(6,5) = fot21121*sot31 + fot21122*sot32 + fot21123*sot33;
                result(6,6) = fot21321*sot31 + fot21322*sot32 + fot21323*sot33;
                result(6,7) = fot21311*sot31 + fot21312*sot32 + fot21313*sot33;
                result(6,8) = fot21211*sot31 + fot21212*sot32 + fot21213*sot33;
                result(6,9) = fot22111*sot31 + fot22112*sot32 + fot22113*sot33;
                result(6,10) = fot22221*sot31 + fot22222*sot32 + fot22223*sot33;
                result(6,11) = fot22331*sot31 + fot22332*sot32 + fot22333*sot33;
                result(6,12) = fot22231*sot31 + fot22232*sot32 + fot22233*sot33;
                result(6,13) = fot22131*sot31 + fot22132*sot32 + fot22133*sot33;
                result(6,14) = fot22121*sot31 + fot22122*sot32 + fot22123*sot33;
                result(6,15) = fot22321*sot31 + fot22322*sot32 + fot22323*sot33;
                result(6,16) = fot22311*sot31 + fot22312*sot32 + fot22313*sot33;
                result(6,17) = fot22211*sot31 + fot22212*sot32 + fot22213*sot33;
                result(6,18) = fot23111*sot31 + fot23112*sot32 + fot23113*sot33;
                result(6,19) = fot23221*sot31 + fot23222*sot32 + fot23223*sot33;
                result(6,20) = fot23331*sot31 + fot23332*sot32 + fot23333*sot33;
                result(6,21) = fot23231*sot31 + fot23232*sot32 + fot23233*sot33;
                result(6,22) = fot23131*sot31 + fot23132*sot32 + fot23133*sot33;
                result(6,23) = fot23121*sot31 + fot23122*sot32 + fot23123*sot33;
                result(6,24) = fot23321*sot31 + fot23322*sot32 + fot23323*sot33;
                result(6,25) = fot23311*sot31 + fot23312*sot32 + fot23313*sot33;
                result(6,26) = fot23211*sot31 + fot23212*sot32 + fot23213*sot33;
                result(7,0) = fot11111*sot31 + fot11112*sot32 + fot11113*sot33;
                result(7,1) = fot11221*sot31 + fot11222*sot32 + fot11223*sot33;
                result(7,2) = fot11331*sot31 + fot11332*sot32 + fot11333*sot33;
                result(7,3) = fot11231*sot31 + fot11232*sot32 + fot11233*sot33;
                result(7,4) = fot11131*sot31 + fot11132*sot32 + fot11133*sot33;
                result(7,5) = fot11121*sot31 + fot11122*sot32 + fot11123*sot33;
                result(7,6) = fot11321*sot31 + fot11322*sot32 + fot11323*sot33;
                result(7,7) = fot11311*sot31 + fot11312*sot32 + fot11313*sot33;
                result(7,8) = fot11211*sot31 + fot11212*sot32 + fot11213*sot33;
                result(7,9) = fot12111*sot31 + fot12112*sot32 + fot12113*sot33;
                result(7,10) = fot12221*sot31 + fot12222*sot32 + fot12223*sot33;
                result(7,11) = fot12331*sot31 + fot12332*sot32 + fot12333*sot33;
                result(7,12) = fot12231*sot31 + fot12232*sot32 + fot12233*sot33;
                result(7,13) = fot12131*sot31 + fot12132*sot32 + fot12133*sot33;
                result(7,14) = fot12121*sot31 + fot12122*sot32 + fot12123*sot33;
                result(7,15) = fot12321*sot31 + fot12322*sot32 + fot12323*sot33;
                result(7,16) = fot12311*sot31 + fot12312*sot32 + fot12313*sot33;
                result(7,17) = fot12211*sot31 + fot12212*sot32 + fot12213*sot33;
                result(7,18) = fot13111*sot31 + fot13112*sot32 + fot13113*sot33;
                result(7,19) = fot13221*sot31 + fot13222*sot32 + fot13223*sot33;
                result(7,20) = fot13331*sot31 + fot13332*sot32 + fot13333*sot33;
                result(7,21) = fot13231*sot31 + fot13232*sot32 + fot13233*sot33;
                result(7,22) = fot13131*sot31 + fot13132*sot32 + fot13133*sot33;
                result(7,23) = fot13121*sot31 + fot13122*sot32 + fot13123*sot33;
                result(7,24) = fot13321*sot31 + fot13322*sot32 + fot13323*sot33;
                result(7,25) = fot13311*sot31 + fot13312*sot32 + fot13313*sot33;
                result(7,26) = fot13211*sot31 + fot13212*sot32 + fot13213*sot33;
                result(8,0) = fot11111*sot21 + fot11112*sot22 + fot11113*sot23;
                result(8,1) = fot11221*sot21 + fot11222*sot22 + fot11223*sot23;
                result(8,2) = fot11331*sot21 + fot11332*sot22 + fot11333*sot23;
                result(8,3) = fot11231*sot21 + fot11232*sot22 + fot11233*sot23;
                result(8,4) = fot11131*sot21 + fot11132*sot22 + fot11133*sot23;
                result(8,5) = fot11121*sot21 + fot11122*sot22 + fot11123*sot23;
                result(8,6) = fot11321*sot21 + fot11322*sot22 + fot11323*sot23;
                result(8,7) = fot11311*sot21 + fot11312*sot22 + fot11313*sot23;
                result(8,8) = fot11211*sot21 + fot11212*sot22 + fot11213*sot23;
                result(8,9) = fot12111*sot21 + fot12112*sot22 + fot12113*sot23;
                result(8,10) = fot12221*sot21 + fot12222*sot22 + fot12223*sot23;
                result(8,11) = fot12331*sot21 + fot12332*sot22 + fot12333*sot23;
                result(8,12) = fot12231*sot21 + fot12232*sot22 + fot12233*sot23;
                result(8,13) = fot12131*sot21 + fot12132*sot22 + fot12133*sot23;
                result(8,14) = fot12121*sot21 + fot12122*sot22 + fot12123*sot23;
                result(8,15) = fot12321*sot21 + fot12322*sot22 + fot12323*sot23;
                result(8,16) = fot12311*sot21 + fot12312*sot22 + fot12313*sot23;
                result(8,17) = fot12211*sot21 + fot12212*sot22 + fot12213*sot23;
                result(8,18) = fot13111*sot21 + fot13112*sot22 + fot13113*sot23;
                result(8,19) = fot13221*sot21 + fot13222*sot22 + fot13223*sot23;
                result(8,20) = fot13331*sot21 + fot13332*sot22 + fot13333*sot23;
                result(8,21) = fot13231*sot21 + fot13232*sot22 + fot13233*sot23;
                result(8,22) = fot13131*sot21 + fot13132*sot22 + fot13133*sot23;
                result(8,23) = fot13121*sot21 + fot13122*sot22 + fot13123*sot23;
                result(8,24) = fot13321*sot21 + fot13322*sot22 + fot13323*sot23;
                result(8,25) = fot13311*sot21 + fot13312*sot22 + fot13313*sot23;
                result(8,26) = fot13211*sot21 + fot13212*sot22 + fot13213*sot23;
        }
        else {
            std::cout << "Error: Index out of range\n";
            assert(1==0); //TODO: Replace with better error handling.
        }
        return;  
    }
    
    void dot_2ot_5ot(const int &i, const Matrix_3x3 &sot, const Matrix_27x9 &fot, Matrix_27x9 &result){
        /*!==================
        |    dot_2ot_5ot    |
        =====================
        
        Compute the dot product of a second order tensor and a fifth order tensor at index i+1 i.e.
        
        index = 0
        
        result_ijklm = sot_in fot_njklm
        
        index = 1
        
        result_ijklm = sot_im fot_jnklm
        
        */
    
        //Extract the second order tensor
        double sot11 = sot(0,0);
        double sot12 = sot(0,1);
        double sot13 = sot(0,2);
        double sot21 = sot(1,0);
        double sot22 = sot(1,1);
        double sot23 = sot(1,2);
        double sot31 = sot(2,0);
        double sot32 = sot(2,1);
        double sot33 = sot(2,2);

        //Extract the fifth order tensor
        double fot11111 = fot(0,0);
        double fot11112 = fot(0,5);
        double fot11113 = fot(0,4);
        double fot11121 = fot(0,8);
        double fot11122 = fot(0,1);
        double fot11123 = fot(0,3);
        double fot11131 = fot(0,7);
        double fot11132 = fot(0,6);
        double fot11133 = fot(0,2);
        double fot11211 = fot(5,0);
        double fot11212 = fot(5,5);
        double fot11213 = fot(5,4);
        double fot11221 = fot(5,8);
        double fot11222 = fot(5,1);
        double fot11223 = fot(5,3);
        double fot11231 = fot(5,7);
        double fot11232 = fot(5,6);
        double fot11233 = fot(5,2);
        double fot11311 = fot(4,0);
        double fot11312 = fot(4,5);
        double fot11313 = fot(4,4);
        double fot11321 = fot(4,8);
        double fot11322 = fot(4,1);
        double fot11323 = fot(4,3);
        double fot11331 = fot(4,7);
        double fot11332 = fot(4,6);
        double fot11333 = fot(4,2);
        double fot12111 = fot(8,0);
        double fot12112 = fot(8,5);
        double fot12113 = fot(8,4);
        double fot12121 = fot(8,8);
        double fot12122 = fot(8,1);
        double fot12123 = fot(8,3);
        double fot12131 = fot(8,7);
        double fot12132 = fot(8,6);
        double fot12133 = fot(8,2);
        double fot12211 = fot(1,0);
        double fot12212 = fot(1,5);
        double fot12213 = fot(1,4);
        double fot12221 = fot(1,8);
        double fot12222 = fot(1,1);
        double fot12223 = fot(1,3);
        double fot12231 = fot(1,7);
        double fot12232 = fot(1,6);
        double fot12233 = fot(1,2);
        double fot12311 = fot(3,0);
        double fot12312 = fot(3,5);
        double fot12313 = fot(3,4);
        double fot12321 = fot(3,8);
        double fot12322 = fot(3,1);
        double fot12323 = fot(3,3);
        double fot12331 = fot(3,7);
        double fot12332 = fot(3,6);
        double fot12333 = fot(3,2);
        double fot13111 = fot(7,0);
        double fot13112 = fot(7,5);
        double fot13113 = fot(7,4);
        double fot13121 = fot(7,8);
        double fot13122 = fot(7,1);
        double fot13123 = fot(7,3);
        double fot13131 = fot(7,7);
        double fot13132 = fot(7,6);
        double fot13133 = fot(7,2);
        double fot13211 = fot(6,0);
        double fot13212 = fot(6,5);
        double fot13213 = fot(6,4);
        double fot13221 = fot(6,8);
        double fot13222 = fot(6,1);
        double fot13223 = fot(6,3);
        double fot13231 = fot(6,7);
        double fot13232 = fot(6,6);
        double fot13233 = fot(6,2);
        double fot13311 = fot(2,0);
        double fot13312 = fot(2,5);
        double fot13313 = fot(2,4);
        double fot13321 = fot(2,8);
        double fot13322 = fot(2,1);
        double fot13323 = fot(2,3);
        double fot13331 = fot(2,7);
        double fot13332 = fot(2,6);
        double fot13333 = fot(2,2);
        double fot21111 = fot(9,0);
        double fot21112 = fot(9,5);
        double fot21113 = fot(9,4);
        double fot21121 = fot(9,8);
        double fot21122 = fot(9,1);
        double fot21123 = fot(9,3);
        double fot21131 = fot(9,7);
        double fot21132 = fot(9,6);
        double fot21133 = fot(9,2);
        double fot21211 = fot(14,0);
        double fot21212 = fot(14,5);
        double fot21213 = fot(14,4);
        double fot21221 = fot(14,8);
        double fot21222 = fot(14,1);
        double fot21223 = fot(14,3);
        double fot21231 = fot(14,7);
        double fot21232 = fot(14,6);
        double fot21233 = fot(14,2);
        double fot21311 = fot(13,0);
        double fot21312 = fot(13,5);
        double fot21313 = fot(13,4);
        double fot21321 = fot(13,8);
        double fot21322 = fot(13,1);
        double fot21323 = fot(13,3);
        double fot21331 = fot(13,7);
        double fot21332 = fot(13,6);
        double fot21333 = fot(13,2);
        double fot22111 = fot(17,0);
        double fot22112 = fot(17,5);
        double fot22113 = fot(17,4);
        double fot22121 = fot(17,8);
        double fot22122 = fot(17,1);
        double fot22123 = fot(17,3);
        double fot22131 = fot(17,7);
        double fot22132 = fot(17,6);
        double fot22133 = fot(17,2);
        double fot22211 = fot(10,0);
        double fot22212 = fot(10,5);
        double fot22213 = fot(10,4);
        double fot22221 = fot(10,8);
        double fot22222 = fot(10,1);
        double fot22223 = fot(10,3);
        double fot22231 = fot(10,7);
        double fot22232 = fot(10,6);
        double fot22233 = fot(10,2);
        double fot22311 = fot(12,0);
        double fot22312 = fot(12,5);
        double fot22313 = fot(12,4);
        double fot22321 = fot(12,8);
        double fot22322 = fot(12,1);
        double fot22323 = fot(12,3);
        double fot22331 = fot(12,7);
        double fot22332 = fot(12,6);
        double fot22333 = fot(12,2);
        double fot23111 = fot(16,0);
        double fot23112 = fot(16,5);
        double fot23113 = fot(16,4);
        double fot23121 = fot(16,8);
        double fot23122 = fot(16,1);
        double fot23123 = fot(16,3);
        double fot23131 = fot(16,7);
        double fot23132 = fot(16,6);
        double fot23133 = fot(16,2);
        double fot23211 = fot(15,0);
        double fot23212 = fot(15,5);
        double fot23213 = fot(15,4);
        double fot23221 = fot(15,8);
        double fot23222 = fot(15,1);
        double fot23223 = fot(15,3);
        double fot23231 = fot(15,7);
        double fot23232 = fot(15,6);
        double fot23233 = fot(15,2);
        double fot23311 = fot(11,0);
        double fot23312 = fot(11,5);
        double fot23313 = fot(11,4);
        double fot23321 = fot(11,8);
        double fot23322 = fot(11,1);
        double fot23323 = fot(11,3);
        double fot23331 = fot(11,7);
        double fot23332 = fot(11,6);
        double fot23333 = fot(11,2);
        double fot31111 = fot(18,0);
        double fot31112 = fot(18,5);
        double fot31113 = fot(18,4);
        double fot31121 = fot(18,8);
        double fot31122 = fot(18,1);
        double fot31123 = fot(18,3);
        double fot31131 = fot(18,7);
        double fot31132 = fot(18,6);
        double fot31133 = fot(18,2);
        double fot31211 = fot(23,0);
        double fot31212 = fot(23,5);
        double fot31213 = fot(23,4);
        double fot31221 = fot(23,8);
        double fot31222 = fot(23,1);
        double fot31223 = fot(23,3);
        double fot31231 = fot(23,7);
        double fot31232 = fot(23,6);
        double fot31233 = fot(23,2);
        double fot31311 = fot(22,0);
        double fot31312 = fot(22,5);
        double fot31313 = fot(22,4);
        double fot31321 = fot(22,8);
        double fot31322 = fot(22,1);
        double fot31323 = fot(22,3);
        double fot31331 = fot(22,7);
        double fot31332 = fot(22,6);
        double fot31333 = fot(22,2);
        double fot32111 = fot(26,0);
        double fot32112 = fot(26,5);
        double fot32113 = fot(26,4);
        double fot32121 = fot(26,8);
        double fot32122 = fot(26,1);
        double fot32123 = fot(26,3);
        double fot32131 = fot(26,7);
        double fot32132 = fot(26,6);
        double fot32133 = fot(26,2);
        double fot32211 = fot(19,0);
        double fot32212 = fot(19,5);
        double fot32213 = fot(19,4);
        double fot32221 = fot(19,8);
        double fot32222 = fot(19,1);
        double fot32223 = fot(19,3);
        double fot32231 = fot(19,7);
        double fot32232 = fot(19,6);
        double fot32233 = fot(19,2);
        double fot32311 = fot(21,0);
        double fot32312 = fot(21,5);
        double fot32313 = fot(21,4);
        double fot32321 = fot(21,8);
        double fot32322 = fot(21,1);
        double fot32323 = fot(21,3);
        double fot32331 = fot(21,7);
        double fot32332 = fot(21,6);
        double fot32333 = fot(21,2);
        double fot33111 = fot(25,0);
        double fot33112 = fot(25,5);
        double fot33113 = fot(25,4);
        double fot33121 = fot(25,8);
        double fot33122 = fot(25,1);
        double fot33123 = fot(25,3);
        double fot33131 = fot(25,7);
        double fot33132 = fot(25,6);
        double fot33133 = fot(25,2);
        double fot33211 = fot(24,0);
        double fot33212 = fot(24,5);
        double fot33213 = fot(24,4);
        double fot33221 = fot(24,8);
        double fot33222 = fot(24,1);
        double fot33223 = fot(24,3);
        double fot33231 = fot(24,7);
        double fot33232 = fot(24,6);
        double fot33233 = fot(24,2);
        double fot33311 = fot(20,0);
        double fot33312 = fot(20,5);
        double fot33313 = fot(20,4);
        double fot33321 = fot(20,8);
        double fot33322 = fot(20,1);
        double fot33323 = fot(20,3);
        double fot33331 = fot(20,7);
        double fot33332 = fot(20,6);
        double fot33333 = fot(20,2);

        //Compute the dot product
        if (i==0){
                result(0,0) = fot11111*sot11 + fot21111*sot12 + fot31111*sot13;
                result(0,1) = fot11122*sot11 + fot21122*sot12 + fot31122*sot13;
                result(0,2) = fot11133*sot11 + fot21133*sot12 + fot31133*sot13;
                result(0,3) = fot11123*sot11 + fot21123*sot12 + fot31123*sot13;
                result(0,4) = fot11113*sot11 + fot21113*sot12 + fot31113*sot13;
                result(0,5) = fot11112*sot11 + fot21112*sot12 + fot31112*sot13;
                result(0,6) = fot11132*sot11 + fot21132*sot12 + fot31132*sot13;
                result(0,7) = fot11131*sot11 + fot21131*sot12 + fot31131*sot13;
                result(0,8) = fot11121*sot11 + fot21121*sot12 + fot31121*sot13;
                result(1,0) = fot12211*sot11 + fot22211*sot12 + fot32211*sot13;
                result(1,1) = fot12222*sot11 + fot22222*sot12 + fot32222*sot13;
                result(1,2) = fot12233*sot11 + fot22233*sot12 + fot32233*sot13;
                result(1,3) = fot12223*sot11 + fot22223*sot12 + fot32223*sot13;
                result(1,4) = fot12213*sot11 + fot22213*sot12 + fot32213*sot13;
                result(1,5) = fot12212*sot11 + fot22212*sot12 + fot32212*sot13;
                result(1,6) = fot12232*sot11 + fot22232*sot12 + fot32232*sot13;
                result(1,7) = fot12231*sot11 + fot22231*sot12 + fot32231*sot13;
                result(1,8) = fot12221*sot11 + fot22221*sot12 + fot32221*sot13;
                result(2,0) = fot13311*sot11 + fot23311*sot12 + fot33311*sot13;
                result(2,1) = fot13322*sot11 + fot23322*sot12 + fot33322*sot13;
                result(2,2) = fot13333*sot11 + fot23333*sot12 + fot33333*sot13;
                result(2,3) = fot13323*sot11 + fot23323*sot12 + fot33323*sot13;
                result(2,4) = fot13313*sot11 + fot23313*sot12 + fot33313*sot13;
                result(2,5) = fot13312*sot11 + fot23312*sot12 + fot33312*sot13;
                result(2,6) = fot13332*sot11 + fot23332*sot12 + fot33332*sot13;
                result(2,7) = fot13331*sot11 + fot23331*sot12 + fot33331*sot13;
                result(2,8) = fot13321*sot11 + fot23321*sot12 + fot33321*sot13;
                result(3,0) = fot12311*sot11 + fot22311*sot12 + fot32311*sot13;
                result(3,1) = fot12322*sot11 + fot22322*sot12 + fot32322*sot13;
                result(3,2) = fot12333*sot11 + fot22333*sot12 + fot32333*sot13;
                result(3,3) = fot12323*sot11 + fot22323*sot12 + fot32323*sot13;
                result(3,4) = fot12313*sot11 + fot22313*sot12 + fot32313*sot13;
                result(3,5) = fot12312*sot11 + fot22312*sot12 + fot32312*sot13;
                result(3,6) = fot12332*sot11 + fot22332*sot12 + fot32332*sot13;
                result(3,7) = fot12331*sot11 + fot22331*sot12 + fot32331*sot13;
                result(3,8) = fot12321*sot11 + fot22321*sot12 + fot32321*sot13;
                result(4,0) = fot11311*sot11 + fot21311*sot12 + fot31311*sot13;
                result(4,1) = fot11322*sot11 + fot21322*sot12 + fot31322*sot13;
                result(4,2) = fot11333*sot11 + fot21333*sot12 + fot31333*sot13;
                result(4,3) = fot11323*sot11 + fot21323*sot12 + fot31323*sot13;
                result(4,4) = fot11313*sot11 + fot21313*sot12 + fot31313*sot13;
                result(4,5) = fot11312*sot11 + fot21312*sot12 + fot31312*sot13;
                result(4,6) = fot11332*sot11 + fot21332*sot12 + fot31332*sot13;
                result(4,7) = fot11331*sot11 + fot21331*sot12 + fot31331*sot13;
                result(4,8) = fot11321*sot11 + fot21321*sot12 + fot31321*sot13;
                result(5,0) = fot11211*sot11 + fot21211*sot12 + fot31211*sot13;
                result(5,1) = fot11222*sot11 + fot21222*sot12 + fot31222*sot13;
                result(5,2) = fot11233*sot11 + fot21233*sot12 + fot31233*sot13;
                result(5,3) = fot11223*sot11 + fot21223*sot12 + fot31223*sot13;
                result(5,4) = fot11213*sot11 + fot21213*sot12 + fot31213*sot13;
                result(5,5) = fot11212*sot11 + fot21212*sot12 + fot31212*sot13;
                result(5,6) = fot11232*sot11 + fot21232*sot12 + fot31232*sot13;
                result(5,7) = fot11231*sot11 + fot21231*sot12 + fot31231*sot13;
                result(5,8) = fot11221*sot11 + fot21221*sot12 + fot31221*sot13;
                result(6,0) = fot13211*sot11 + fot23211*sot12 + fot33211*sot13;
                result(6,1) = fot13222*sot11 + fot23222*sot12 + fot33222*sot13;
                result(6,2) = fot13233*sot11 + fot23233*sot12 + fot33233*sot13;
                result(6,3) = fot13223*sot11 + fot23223*sot12 + fot33223*sot13;
                result(6,4) = fot13213*sot11 + fot23213*sot12 + fot33213*sot13;
                result(6,5) = fot13212*sot11 + fot23212*sot12 + fot33212*sot13;
                result(6,6) = fot13232*sot11 + fot23232*sot12 + fot33232*sot13;
                result(6,7) = fot13231*sot11 + fot23231*sot12 + fot33231*sot13;
                result(6,8) = fot13221*sot11 + fot23221*sot12 + fot33221*sot13;
                result(7,0) = fot13111*sot11 + fot23111*sot12 + fot33111*sot13;
                result(7,1) = fot13122*sot11 + fot23122*sot12 + fot33122*sot13;
                result(7,2) = fot13133*sot11 + fot23133*sot12 + fot33133*sot13;
                result(7,3) = fot13123*sot11 + fot23123*sot12 + fot33123*sot13;
                result(7,4) = fot13113*sot11 + fot23113*sot12 + fot33113*sot13;
                result(7,5) = fot13112*sot11 + fot23112*sot12 + fot33112*sot13;
                result(7,6) = fot13132*sot11 + fot23132*sot12 + fot33132*sot13;
                result(7,7) = fot13131*sot11 + fot23131*sot12 + fot33131*sot13;
                result(7,8) = fot13121*sot11 + fot23121*sot12 + fot33121*sot13;
                result(8,0) = fot12111*sot11 + fot22111*sot12 + fot32111*sot13;
                result(8,1) = fot12122*sot11 + fot22122*sot12 + fot32122*sot13;
                result(8,2) = fot12133*sot11 + fot22133*sot12 + fot32133*sot13;
                result(8,3) = fot12123*sot11 + fot22123*sot12 + fot32123*sot13;
                result(8,4) = fot12113*sot11 + fot22113*sot12 + fot32113*sot13;
                result(8,5) = fot12112*sot11 + fot22112*sot12 + fot32112*sot13;
                result(8,6) = fot12132*sot11 + fot22132*sot12 + fot32132*sot13;
                result(8,7) = fot12131*sot11 + fot22131*sot12 + fot32131*sot13;
                result(8,8) = fot12121*sot11 + fot22121*sot12 + fot32121*sot13;
                result(9,0) = fot11111*sot21 + fot21111*sot22 + fot31111*sot23;
                result(9,1) = fot11122*sot21 + fot21122*sot22 + fot31122*sot23;
                result(9,2) = fot11133*sot21 + fot21133*sot22 + fot31133*sot23;
                result(9,3) = fot11123*sot21 + fot21123*sot22 + fot31123*sot23;
                result(9,4) = fot11113*sot21 + fot21113*sot22 + fot31113*sot23;
                result(9,5) = fot11112*sot21 + fot21112*sot22 + fot31112*sot23;
                result(9,6) = fot11132*sot21 + fot21132*sot22 + fot31132*sot23;
                result(9,7) = fot11131*sot21 + fot21131*sot22 + fot31131*sot23;
                result(9,8) = fot11121*sot21 + fot21121*sot22 + fot31121*sot23;
                result(10,0) = fot12211*sot21 + fot22211*sot22 + fot32211*sot23;
                result(10,1) = fot12222*sot21 + fot22222*sot22 + fot32222*sot23;
                result(10,2) = fot12233*sot21 + fot22233*sot22 + fot32233*sot23;
                result(10,3) = fot12223*sot21 + fot22223*sot22 + fot32223*sot23;
                result(10,4) = fot12213*sot21 + fot22213*sot22 + fot32213*sot23;
                result(10,5) = fot12212*sot21 + fot22212*sot22 + fot32212*sot23;
                result(10,6) = fot12232*sot21 + fot22232*sot22 + fot32232*sot23;
                result(10,7) = fot12231*sot21 + fot22231*sot22 + fot32231*sot23;
                result(10,8) = fot12221*sot21 + fot22221*sot22 + fot32221*sot23;
                result(11,0) = fot13311*sot21 + fot23311*sot22 + fot33311*sot23;
                result(11,1) = fot13322*sot21 + fot23322*sot22 + fot33322*sot23;
                result(11,2) = fot13333*sot21 + fot23333*sot22 + fot33333*sot23;
                result(11,3) = fot13323*sot21 + fot23323*sot22 + fot33323*sot23;
                result(11,4) = fot13313*sot21 + fot23313*sot22 + fot33313*sot23;
                result(11,5) = fot13312*sot21 + fot23312*sot22 + fot33312*sot23;
                result(11,6) = fot13332*sot21 + fot23332*sot22 + fot33332*sot23;
                result(11,7) = fot13331*sot21 + fot23331*sot22 + fot33331*sot23;
                result(11,8) = fot13321*sot21 + fot23321*sot22 + fot33321*sot23;
                result(12,0) = fot12311*sot21 + fot22311*sot22 + fot32311*sot23;
                result(12,1) = fot12322*sot21 + fot22322*sot22 + fot32322*sot23;
                result(12,2) = fot12333*sot21 + fot22333*sot22 + fot32333*sot23;
                result(12,3) = fot12323*sot21 + fot22323*sot22 + fot32323*sot23;
                result(12,4) = fot12313*sot21 + fot22313*sot22 + fot32313*sot23;
                result(12,5) = fot12312*sot21 + fot22312*sot22 + fot32312*sot23;
                result(12,6) = fot12332*sot21 + fot22332*sot22 + fot32332*sot23;
                result(12,7) = fot12331*sot21 + fot22331*sot22 + fot32331*sot23;
                result(12,8) = fot12321*sot21 + fot22321*sot22 + fot32321*sot23;
                result(13,0) = fot11311*sot21 + fot21311*sot22 + fot31311*sot23;
                result(13,1) = fot11322*sot21 + fot21322*sot22 + fot31322*sot23;
                result(13,2) = fot11333*sot21 + fot21333*sot22 + fot31333*sot23;
                result(13,3) = fot11323*sot21 + fot21323*sot22 + fot31323*sot23;
                result(13,4) = fot11313*sot21 + fot21313*sot22 + fot31313*sot23;
                result(13,5) = fot11312*sot21 + fot21312*sot22 + fot31312*sot23;
                result(13,6) = fot11332*sot21 + fot21332*sot22 + fot31332*sot23;
                result(13,7) = fot11331*sot21 + fot21331*sot22 + fot31331*sot23;
                result(13,8) = fot11321*sot21 + fot21321*sot22 + fot31321*sot23;
                result(14,0) = fot11211*sot21 + fot21211*sot22 + fot31211*sot23;
                result(14,1) = fot11222*sot21 + fot21222*sot22 + fot31222*sot23;
                result(14,2) = fot11233*sot21 + fot21233*sot22 + fot31233*sot23;
                result(14,3) = fot11223*sot21 + fot21223*sot22 + fot31223*sot23;
                result(14,4) = fot11213*sot21 + fot21213*sot22 + fot31213*sot23;
                result(14,5) = fot11212*sot21 + fot21212*sot22 + fot31212*sot23;
                result(14,6) = fot11232*sot21 + fot21232*sot22 + fot31232*sot23;
                result(14,7) = fot11231*sot21 + fot21231*sot22 + fot31231*sot23;
                result(14,8) = fot11221*sot21 + fot21221*sot22 + fot31221*sot23;
                result(15,0) = fot13211*sot21 + fot23211*sot22 + fot33211*sot23;
                result(15,1) = fot13222*sot21 + fot23222*sot22 + fot33222*sot23;
                result(15,2) = fot13233*sot21 + fot23233*sot22 + fot33233*sot23;
                result(15,3) = fot13223*sot21 + fot23223*sot22 + fot33223*sot23;
                result(15,4) = fot13213*sot21 + fot23213*sot22 + fot33213*sot23;
                result(15,5) = fot13212*sot21 + fot23212*sot22 + fot33212*sot23;
                result(15,6) = fot13232*sot21 + fot23232*sot22 + fot33232*sot23;
                result(15,7) = fot13231*sot21 + fot23231*sot22 + fot33231*sot23;
                result(15,8) = fot13221*sot21 + fot23221*sot22 + fot33221*sot23;
                result(16,0) = fot13111*sot21 + fot23111*sot22 + fot33111*sot23;
                result(16,1) = fot13122*sot21 + fot23122*sot22 + fot33122*sot23;
                result(16,2) = fot13133*sot21 + fot23133*sot22 + fot33133*sot23;
                result(16,3) = fot13123*sot21 + fot23123*sot22 + fot33123*sot23;
                result(16,4) = fot13113*sot21 + fot23113*sot22 + fot33113*sot23;
                result(16,5) = fot13112*sot21 + fot23112*sot22 + fot33112*sot23;
                result(16,6) = fot13132*sot21 + fot23132*sot22 + fot33132*sot23;
                result(16,7) = fot13131*sot21 + fot23131*sot22 + fot33131*sot23;
                result(16,8) = fot13121*sot21 + fot23121*sot22 + fot33121*sot23;
                result(17,0) = fot12111*sot21 + fot22111*sot22 + fot32111*sot23;
                result(17,1) = fot12122*sot21 + fot22122*sot22 + fot32122*sot23;
                result(17,2) = fot12133*sot21 + fot22133*sot22 + fot32133*sot23;
                result(17,3) = fot12123*sot21 + fot22123*sot22 + fot32123*sot23;
                result(17,4) = fot12113*sot21 + fot22113*sot22 + fot32113*sot23;
                result(17,5) = fot12112*sot21 + fot22112*sot22 + fot32112*sot23;
                result(17,6) = fot12132*sot21 + fot22132*sot22 + fot32132*sot23;
                result(17,7) = fot12131*sot21 + fot22131*sot22 + fot32131*sot23;
                result(17,8) = fot12121*sot21 + fot22121*sot22 + fot32121*sot23;
                result(18,0) = fot11111*sot31 + fot21111*sot32 + fot31111*sot33;
                result(18,1) = fot11122*sot31 + fot21122*sot32 + fot31122*sot33;
                result(18,2) = fot11133*sot31 + fot21133*sot32 + fot31133*sot33;
                result(18,3) = fot11123*sot31 + fot21123*sot32 + fot31123*sot33;
                result(18,4) = fot11113*sot31 + fot21113*sot32 + fot31113*sot33;
                result(18,5) = fot11112*sot31 + fot21112*sot32 + fot31112*sot33;
                result(18,6) = fot11132*sot31 + fot21132*sot32 + fot31132*sot33;
                result(18,7) = fot11131*sot31 + fot21131*sot32 + fot31131*sot33;
                result(18,8) = fot11121*sot31 + fot21121*sot32 + fot31121*sot33;
                result(19,0) = fot12211*sot31 + fot22211*sot32 + fot32211*sot33;
                result(19,1) = fot12222*sot31 + fot22222*sot32 + fot32222*sot33;
                result(19,2) = fot12233*sot31 + fot22233*sot32 + fot32233*sot33;
                result(19,3) = fot12223*sot31 + fot22223*sot32 + fot32223*sot33;
                result(19,4) = fot12213*sot31 + fot22213*sot32 + fot32213*sot33;
                result(19,5) = fot12212*sot31 + fot22212*sot32 + fot32212*sot33;
                result(19,6) = fot12232*sot31 + fot22232*sot32 + fot32232*sot33;
                result(19,7) = fot12231*sot31 + fot22231*sot32 + fot32231*sot33;
                result(19,8) = fot12221*sot31 + fot22221*sot32 + fot32221*sot33;
                result(20,0) = fot13311*sot31 + fot23311*sot32 + fot33311*sot33;
                result(20,1) = fot13322*sot31 + fot23322*sot32 + fot33322*sot33;
                result(20,2) = fot13333*sot31 + fot23333*sot32 + fot33333*sot33;
                result(20,3) = fot13323*sot31 + fot23323*sot32 + fot33323*sot33;
                result(20,4) = fot13313*sot31 + fot23313*sot32 + fot33313*sot33;
                result(20,5) = fot13312*sot31 + fot23312*sot32 + fot33312*sot33;
                result(20,6) = fot13332*sot31 + fot23332*sot32 + fot33332*sot33;
                result(20,7) = fot13331*sot31 + fot23331*sot32 + fot33331*sot33;
                result(20,8) = fot13321*sot31 + fot23321*sot32 + fot33321*sot33;
                result(21,0) = fot12311*sot31 + fot22311*sot32 + fot32311*sot33;
                result(21,1) = fot12322*sot31 + fot22322*sot32 + fot32322*sot33;
                result(21,2) = fot12333*sot31 + fot22333*sot32 + fot32333*sot33;
                result(21,3) = fot12323*sot31 + fot22323*sot32 + fot32323*sot33;
                result(21,4) = fot12313*sot31 + fot22313*sot32 + fot32313*sot33;
                result(21,5) = fot12312*sot31 + fot22312*sot32 + fot32312*sot33;
                result(21,6) = fot12332*sot31 + fot22332*sot32 + fot32332*sot33;
                result(21,7) = fot12331*sot31 + fot22331*sot32 + fot32331*sot33;
                result(21,8) = fot12321*sot31 + fot22321*sot32 + fot32321*sot33;
                result(22,0) = fot11311*sot31 + fot21311*sot32 + fot31311*sot33;
                result(22,1) = fot11322*sot31 + fot21322*sot32 + fot31322*sot33;
                result(22,2) = fot11333*sot31 + fot21333*sot32 + fot31333*sot33;
                result(22,3) = fot11323*sot31 + fot21323*sot32 + fot31323*sot33;
                result(22,4) = fot11313*sot31 + fot21313*sot32 + fot31313*sot33;
                result(22,5) = fot11312*sot31 + fot21312*sot32 + fot31312*sot33;
                result(22,6) = fot11332*sot31 + fot21332*sot32 + fot31332*sot33;
                result(22,7) = fot11331*sot31 + fot21331*sot32 + fot31331*sot33;
                result(22,8) = fot11321*sot31 + fot21321*sot32 + fot31321*sot33;
                result(23,0) = fot11211*sot31 + fot21211*sot32 + fot31211*sot33;
                result(23,1) = fot11222*sot31 + fot21222*sot32 + fot31222*sot33;
                result(23,2) = fot11233*sot31 + fot21233*sot32 + fot31233*sot33;
                result(23,3) = fot11223*sot31 + fot21223*sot32 + fot31223*sot33;
                result(23,4) = fot11213*sot31 + fot21213*sot32 + fot31213*sot33;
                result(23,5) = fot11212*sot31 + fot21212*sot32 + fot31212*sot33;
                result(23,6) = fot11232*sot31 + fot21232*sot32 + fot31232*sot33;
                result(23,7) = fot11231*sot31 + fot21231*sot32 + fot31231*sot33;
                result(23,8) = fot11221*sot31 + fot21221*sot32 + fot31221*sot33;
                result(24,0) = fot13211*sot31 + fot23211*sot32 + fot33211*sot33;
                result(24,1) = fot13222*sot31 + fot23222*sot32 + fot33222*sot33;
                result(24,2) = fot13233*sot31 + fot23233*sot32 + fot33233*sot33;
                result(24,3) = fot13223*sot31 + fot23223*sot32 + fot33223*sot33;
                result(24,4) = fot13213*sot31 + fot23213*sot32 + fot33213*sot33;
                result(24,5) = fot13212*sot31 + fot23212*sot32 + fot33212*sot33;
                result(24,6) = fot13232*sot31 + fot23232*sot32 + fot33232*sot33;
                result(24,7) = fot13231*sot31 + fot23231*sot32 + fot33231*sot33;
                result(24,8) = fot13221*sot31 + fot23221*sot32 + fot33221*sot33;
                result(25,0) = fot13111*sot31 + fot23111*sot32 + fot33111*sot33;
                result(25,1) = fot13122*sot31 + fot23122*sot32 + fot33122*sot33;
                result(25,2) = fot13133*sot31 + fot23133*sot32 + fot33133*sot33;
                result(25,3) = fot13123*sot31 + fot23123*sot32 + fot33123*sot33;
                result(25,4) = fot13113*sot31 + fot23113*sot32 + fot33113*sot33;
                result(25,5) = fot13112*sot31 + fot23112*sot32 + fot33112*sot33;
                result(25,6) = fot13132*sot31 + fot23132*sot32 + fot33132*sot33;
                result(25,7) = fot13131*sot31 + fot23131*sot32 + fot33131*sot33;
                result(25,8) = fot13121*sot31 + fot23121*sot32 + fot33121*sot33;
                result(26,0) = fot12111*sot31 + fot22111*sot32 + fot32111*sot33;
                result(26,1) = fot12122*sot31 + fot22122*sot32 + fot32122*sot33;
                result(26,2) = fot12133*sot31 + fot22133*sot32 + fot32133*sot33;
                result(26,3) = fot12123*sot31 + fot22123*sot32 + fot32123*sot33;
                result(26,4) = fot12113*sot31 + fot22113*sot32 + fot32113*sot33;
                result(26,5) = fot12112*sot31 + fot22112*sot32 + fot32112*sot33;
                result(26,6) = fot12132*sot31 + fot22132*sot32 + fot32132*sot33;
                result(26,7) = fot12131*sot31 + fot22131*sot32 + fot32131*sot33;
                result(26,8) = fot12121*sot31 + fot22121*sot32 + fot32121*sot33;
        }
        else if(i==1){
                result(0,0) = fot11111*sot11 + fot12111*sot12 + fot13111*sot13;
                result(0,1) = fot11122*sot11 + fot12122*sot12 + fot13122*sot13;
                result(0,2) = fot11133*sot11 + fot12133*sot12 + fot13133*sot13;
                result(0,3) = fot11123*sot11 + fot12123*sot12 + fot13123*sot13;
                result(0,4) = fot11113*sot11 + fot12113*sot12 + fot13113*sot13;
                result(0,5) = fot11112*sot11 + fot12112*sot12 + fot13112*sot13;
                result(0,6) = fot11132*sot11 + fot12132*sot12 + fot13132*sot13;
                result(0,7) = fot11131*sot11 + fot12131*sot12 + fot13131*sot13;
                result(0,8) = fot11121*sot11 + fot12121*sot12 + fot13121*sot13;
                result(1,0) = fot21211*sot11 + fot22211*sot12 + fot23211*sot13;
                result(1,1) = fot21222*sot11 + fot22222*sot12 + fot23222*sot13;
                result(1,2) = fot21233*sot11 + fot22233*sot12 + fot23233*sot13;
                result(1,3) = fot21223*sot11 + fot22223*sot12 + fot23223*sot13;
                result(1,4) = fot21213*sot11 + fot22213*sot12 + fot23213*sot13;
                result(1,5) = fot21212*sot11 + fot22212*sot12 + fot23212*sot13;
                result(1,6) = fot21232*sot11 + fot22232*sot12 + fot23232*sot13;
                result(1,7) = fot21231*sot11 + fot22231*sot12 + fot23231*sot13;
                result(1,8) = fot21221*sot11 + fot22221*sot12 + fot23221*sot13;
                result(2,0) = fot31311*sot11 + fot32311*sot12 + fot33311*sot13;
                result(2,1) = fot31322*sot11 + fot32322*sot12 + fot33322*sot13;
                result(2,2) = fot31333*sot11 + fot32333*sot12 + fot33333*sot13;
                result(2,3) = fot31323*sot11 + fot32323*sot12 + fot33323*sot13;
                result(2,4) = fot31313*sot11 + fot32313*sot12 + fot33313*sot13;
                result(2,5) = fot31312*sot11 + fot32312*sot12 + fot33312*sot13;
                result(2,6) = fot31332*sot11 + fot32332*sot12 + fot33332*sot13;
                result(2,7) = fot31331*sot11 + fot32331*sot12 + fot33331*sot13;
                result(2,8) = fot31321*sot11 + fot32321*sot12 + fot33321*sot13;
                result(3,0) = fot21311*sot11 + fot22311*sot12 + fot23311*sot13;
                result(3,1) = fot21322*sot11 + fot22322*sot12 + fot23322*sot13;
                result(3,2) = fot21333*sot11 + fot22333*sot12 + fot23333*sot13;
                result(3,3) = fot21323*sot11 + fot22323*sot12 + fot23323*sot13;
                result(3,4) = fot21313*sot11 + fot22313*sot12 + fot23313*sot13;
                result(3,5) = fot21312*sot11 + fot22312*sot12 + fot23312*sot13;
                result(3,6) = fot21332*sot11 + fot22332*sot12 + fot23332*sot13;
                result(3,7) = fot21331*sot11 + fot22331*sot12 + fot23331*sot13;
                result(3,8) = fot21321*sot11 + fot22321*sot12 + fot23321*sot13;
                result(4,0) = fot11311*sot11 + fot12311*sot12 + fot13311*sot13;
                result(4,1) = fot11322*sot11 + fot12322*sot12 + fot13322*sot13;
                result(4,2) = fot11333*sot11 + fot12333*sot12 + fot13333*sot13;
                result(4,3) = fot11323*sot11 + fot12323*sot12 + fot13323*sot13;
                result(4,4) = fot11313*sot11 + fot12313*sot12 + fot13313*sot13;
                result(4,5) = fot11312*sot11 + fot12312*sot12 + fot13312*sot13;
                result(4,6) = fot11332*sot11 + fot12332*sot12 + fot13332*sot13;
                result(4,7) = fot11331*sot11 + fot12331*sot12 + fot13331*sot13;
                result(4,8) = fot11321*sot11 + fot12321*sot12 + fot13321*sot13;
                result(5,0) = fot11211*sot11 + fot12211*sot12 + fot13211*sot13;
                result(5,1) = fot11222*sot11 + fot12222*sot12 + fot13222*sot13;
                result(5,2) = fot11233*sot11 + fot12233*sot12 + fot13233*sot13;
                result(5,3) = fot11223*sot11 + fot12223*sot12 + fot13223*sot13;
                result(5,4) = fot11213*sot11 + fot12213*sot12 + fot13213*sot13;
                result(5,5) = fot11212*sot11 + fot12212*sot12 + fot13212*sot13;
                result(5,6) = fot11232*sot11 + fot12232*sot12 + fot13232*sot13;
                result(5,7) = fot11231*sot11 + fot12231*sot12 + fot13231*sot13;
                result(5,8) = fot11221*sot11 + fot12221*sot12 + fot13221*sot13;
                result(6,0) = fot31211*sot11 + fot32211*sot12 + fot33211*sot13;
                result(6,1) = fot31222*sot11 + fot32222*sot12 + fot33222*sot13;
                result(6,2) = fot31233*sot11 + fot32233*sot12 + fot33233*sot13;
                result(6,3) = fot31223*sot11 + fot32223*sot12 + fot33223*sot13;
                result(6,4) = fot31213*sot11 + fot32213*sot12 + fot33213*sot13;
                result(6,5) = fot31212*sot11 + fot32212*sot12 + fot33212*sot13;
                result(6,6) = fot31232*sot11 + fot32232*sot12 + fot33232*sot13;
                result(6,7) = fot31231*sot11 + fot32231*sot12 + fot33231*sot13;
                result(6,8) = fot31221*sot11 + fot32221*sot12 + fot33221*sot13;
                result(7,0) = fot31111*sot11 + fot32111*sot12 + fot33111*sot13;
                result(7,1) = fot31122*sot11 + fot32122*sot12 + fot33122*sot13;
                result(7,2) = fot31133*sot11 + fot32133*sot12 + fot33133*sot13;
                result(7,3) = fot31123*sot11 + fot32123*sot12 + fot33123*sot13;
                result(7,4) = fot31113*sot11 + fot32113*sot12 + fot33113*sot13;
                result(7,5) = fot31112*sot11 + fot32112*sot12 + fot33112*sot13;
                result(7,6) = fot31132*sot11 + fot32132*sot12 + fot33132*sot13;
                result(7,7) = fot31131*sot11 + fot32131*sot12 + fot33131*sot13;
                result(7,8) = fot31121*sot11 + fot32121*sot12 + fot33121*sot13;
                result(8,0) = fot21111*sot11 + fot22111*sot12 + fot23111*sot13;
                result(8,1) = fot21122*sot11 + fot22122*sot12 + fot23122*sot13;
                result(8,2) = fot21133*sot11 + fot22133*sot12 + fot23133*sot13;
                result(8,3) = fot21123*sot11 + fot22123*sot12 + fot23123*sot13;
                result(8,4) = fot21113*sot11 + fot22113*sot12 + fot23113*sot13;
                result(8,5) = fot21112*sot11 + fot22112*sot12 + fot23112*sot13;
                result(8,6) = fot21132*sot11 + fot22132*sot12 + fot23132*sot13;
                result(8,7) = fot21131*sot11 + fot22131*sot12 + fot23131*sot13;
                result(8,8) = fot21121*sot11 + fot22121*sot12 + fot23121*sot13;
                result(9,0) = fot11111*sot21 + fot12111*sot22 + fot13111*sot23;
                result(9,1) = fot11122*sot21 + fot12122*sot22 + fot13122*sot23;
                result(9,2) = fot11133*sot21 + fot12133*sot22 + fot13133*sot23;
                result(9,3) = fot11123*sot21 + fot12123*sot22 + fot13123*sot23;
                result(9,4) = fot11113*sot21 + fot12113*sot22 + fot13113*sot23;
                result(9,5) = fot11112*sot21 + fot12112*sot22 + fot13112*sot23;
                result(9,6) = fot11132*sot21 + fot12132*sot22 + fot13132*sot23;
                result(9,7) = fot11131*sot21 + fot12131*sot22 + fot13131*sot23;
                result(9,8) = fot11121*sot21 + fot12121*sot22 + fot13121*sot23;
                result(10,0) = fot21211*sot21 + fot22211*sot22 + fot23211*sot23;
                result(10,1) = fot21222*sot21 + fot22222*sot22 + fot23222*sot23;
                result(10,2) = fot21233*sot21 + fot22233*sot22 + fot23233*sot23;
                result(10,3) = fot21223*sot21 + fot22223*sot22 + fot23223*sot23;
                result(10,4) = fot21213*sot21 + fot22213*sot22 + fot23213*sot23;
                result(10,5) = fot21212*sot21 + fot22212*sot22 + fot23212*sot23;
                result(10,6) = fot21232*sot21 + fot22232*sot22 + fot23232*sot23;
                result(10,7) = fot21231*sot21 + fot22231*sot22 + fot23231*sot23;
                result(10,8) = fot21221*sot21 + fot22221*sot22 + fot23221*sot23;
                result(11,0) = fot31311*sot21 + fot32311*sot22 + fot33311*sot23;
                result(11,1) = fot31322*sot21 + fot32322*sot22 + fot33322*sot23;
                result(11,2) = fot31333*sot21 + fot32333*sot22 + fot33333*sot23;
                result(11,3) = fot31323*sot21 + fot32323*sot22 + fot33323*sot23;
                result(11,4) = fot31313*sot21 + fot32313*sot22 + fot33313*sot23;
                result(11,5) = fot31312*sot21 + fot32312*sot22 + fot33312*sot23;
                result(11,6) = fot31332*sot21 + fot32332*sot22 + fot33332*sot23;
                result(11,7) = fot31331*sot21 + fot32331*sot22 + fot33331*sot23;
                result(11,8) = fot31321*sot21 + fot32321*sot22 + fot33321*sot23;
                result(12,0) = fot21311*sot21 + fot22311*sot22 + fot23311*sot23;
                result(12,1) = fot21322*sot21 + fot22322*sot22 + fot23322*sot23;
                result(12,2) = fot21333*sot21 + fot22333*sot22 + fot23333*sot23;
                result(12,3) = fot21323*sot21 + fot22323*sot22 + fot23323*sot23;
                result(12,4) = fot21313*sot21 + fot22313*sot22 + fot23313*sot23;
                result(12,5) = fot21312*sot21 + fot22312*sot22 + fot23312*sot23;
                result(12,6) = fot21332*sot21 + fot22332*sot22 + fot23332*sot23;
                result(12,7) = fot21331*sot21 + fot22331*sot22 + fot23331*sot23;
                result(12,8) = fot21321*sot21 + fot22321*sot22 + fot23321*sot23;
                result(13,0) = fot11311*sot21 + fot12311*sot22 + fot13311*sot23;
                result(13,1) = fot11322*sot21 + fot12322*sot22 + fot13322*sot23;
                result(13,2) = fot11333*sot21 + fot12333*sot22 + fot13333*sot23;
                result(13,3) = fot11323*sot21 + fot12323*sot22 + fot13323*sot23;
                result(13,4) = fot11313*sot21 + fot12313*sot22 + fot13313*sot23;
                result(13,5) = fot11312*sot21 + fot12312*sot22 + fot13312*sot23;
                result(13,6) = fot11332*sot21 + fot12332*sot22 + fot13332*sot23;
                result(13,7) = fot11331*sot21 + fot12331*sot22 + fot13331*sot23;
                result(13,8) = fot11321*sot21 + fot12321*sot22 + fot13321*sot23;
                result(14,0) = fot11211*sot21 + fot12211*sot22 + fot13211*sot23;
                result(14,1) = fot11222*sot21 + fot12222*sot22 + fot13222*sot23;
                result(14,2) = fot11233*sot21 + fot12233*sot22 + fot13233*sot23;
                result(14,3) = fot11223*sot21 + fot12223*sot22 + fot13223*sot23;
                result(14,4) = fot11213*sot21 + fot12213*sot22 + fot13213*sot23;
                result(14,5) = fot11212*sot21 + fot12212*sot22 + fot13212*sot23;
                result(14,6) = fot11232*sot21 + fot12232*sot22 + fot13232*sot23;
                result(14,7) = fot11231*sot21 + fot12231*sot22 + fot13231*sot23;
                result(14,8) = fot11221*sot21 + fot12221*sot22 + fot13221*sot23;
                result(15,0) = fot31211*sot21 + fot32211*sot22 + fot33211*sot23;
                result(15,1) = fot31222*sot21 + fot32222*sot22 + fot33222*sot23;
                result(15,2) = fot31233*sot21 + fot32233*sot22 + fot33233*sot23;
                result(15,3) = fot31223*sot21 + fot32223*sot22 + fot33223*sot23;
                result(15,4) = fot31213*sot21 + fot32213*sot22 + fot33213*sot23;
                result(15,5) = fot31212*sot21 + fot32212*sot22 + fot33212*sot23;
                result(15,6) = fot31232*sot21 + fot32232*sot22 + fot33232*sot23;
                result(15,7) = fot31231*sot21 + fot32231*sot22 + fot33231*sot23;
                result(15,8) = fot31221*sot21 + fot32221*sot22 + fot33221*sot23;
                result(16,0) = fot31111*sot21 + fot32111*sot22 + fot33111*sot23;
                result(16,1) = fot31122*sot21 + fot32122*sot22 + fot33122*sot23;
                result(16,2) = fot31133*sot21 + fot32133*sot22 + fot33133*sot23;
                result(16,3) = fot31123*sot21 + fot32123*sot22 + fot33123*sot23;
                result(16,4) = fot31113*sot21 + fot32113*sot22 + fot33113*sot23;
                result(16,5) = fot31112*sot21 + fot32112*sot22 + fot33112*sot23;
                result(16,6) = fot31132*sot21 + fot32132*sot22 + fot33132*sot23;
                result(16,7) = fot31131*sot21 + fot32131*sot22 + fot33131*sot23;
                result(16,8) = fot31121*sot21 + fot32121*sot22 + fot33121*sot23;
                result(17,0) = fot21111*sot21 + fot22111*sot22 + fot23111*sot23;
                result(17,1) = fot21122*sot21 + fot22122*sot22 + fot23122*sot23;
                result(17,2) = fot21133*sot21 + fot22133*sot22 + fot23133*sot23;
                result(17,3) = fot21123*sot21 + fot22123*sot22 + fot23123*sot23;
                result(17,4) = fot21113*sot21 + fot22113*sot22 + fot23113*sot23;
                result(17,5) = fot21112*sot21 + fot22112*sot22 + fot23112*sot23;
                result(17,6) = fot21132*sot21 + fot22132*sot22 + fot23132*sot23;
                result(17,7) = fot21131*sot21 + fot22131*sot22 + fot23131*sot23;
                result(17,8) = fot21121*sot21 + fot22121*sot22 + fot23121*sot23;
                result(18,0) = fot11111*sot31 + fot12111*sot32 + fot13111*sot33;
                result(18,1) = fot11122*sot31 + fot12122*sot32 + fot13122*sot33;
                result(18,2) = fot11133*sot31 + fot12133*sot32 + fot13133*sot33;
                result(18,3) = fot11123*sot31 + fot12123*sot32 + fot13123*sot33;
                result(18,4) = fot11113*sot31 + fot12113*sot32 + fot13113*sot33;
                result(18,5) = fot11112*sot31 + fot12112*sot32 + fot13112*sot33;
                result(18,6) = fot11132*sot31 + fot12132*sot32 + fot13132*sot33;
                result(18,7) = fot11131*sot31 + fot12131*sot32 + fot13131*sot33;
                result(18,8) = fot11121*sot31 + fot12121*sot32 + fot13121*sot33;
                result(19,0) = fot21211*sot31 + fot22211*sot32 + fot23211*sot33;
                result(19,1) = fot21222*sot31 + fot22222*sot32 + fot23222*sot33;
                result(19,2) = fot21233*sot31 + fot22233*sot32 + fot23233*sot33;
                result(19,3) = fot21223*sot31 + fot22223*sot32 + fot23223*sot33;
                result(19,4) = fot21213*sot31 + fot22213*sot32 + fot23213*sot33;
                result(19,5) = fot21212*sot31 + fot22212*sot32 + fot23212*sot33;
                result(19,6) = fot21232*sot31 + fot22232*sot32 + fot23232*sot33;
                result(19,7) = fot21231*sot31 + fot22231*sot32 + fot23231*sot33;
                result(19,8) = fot21221*sot31 + fot22221*sot32 + fot23221*sot33;
                result(20,0) = fot31311*sot31 + fot32311*sot32 + fot33311*sot33;
                result(20,1) = fot31322*sot31 + fot32322*sot32 + fot33322*sot33;
                result(20,2) = fot31333*sot31 + fot32333*sot32 + fot33333*sot33;
                result(20,3) = fot31323*sot31 + fot32323*sot32 + fot33323*sot33;
                result(20,4) = fot31313*sot31 + fot32313*sot32 + fot33313*sot33;
                result(20,5) = fot31312*sot31 + fot32312*sot32 + fot33312*sot33;
                result(20,6) = fot31332*sot31 + fot32332*sot32 + fot33332*sot33;
                result(20,7) = fot31331*sot31 + fot32331*sot32 + fot33331*sot33;
                result(20,8) = fot31321*sot31 + fot32321*sot32 + fot33321*sot33;
                result(21,0) = fot21311*sot31 + fot22311*sot32 + fot23311*sot33;
                result(21,1) = fot21322*sot31 + fot22322*sot32 + fot23322*sot33;
                result(21,2) = fot21333*sot31 + fot22333*sot32 + fot23333*sot33;
                result(21,3) = fot21323*sot31 + fot22323*sot32 + fot23323*sot33;
                result(21,4) = fot21313*sot31 + fot22313*sot32 + fot23313*sot33;
                result(21,5) = fot21312*sot31 + fot22312*sot32 + fot23312*sot33;
                result(21,6) = fot21332*sot31 + fot22332*sot32 + fot23332*sot33;
                result(21,7) = fot21331*sot31 + fot22331*sot32 + fot23331*sot33;
                result(21,8) = fot21321*sot31 + fot22321*sot32 + fot23321*sot33;
                result(22,0) = fot11311*sot31 + fot12311*sot32 + fot13311*sot33;
                result(22,1) = fot11322*sot31 + fot12322*sot32 + fot13322*sot33;
                result(22,2) = fot11333*sot31 + fot12333*sot32 + fot13333*sot33;
                result(22,3) = fot11323*sot31 + fot12323*sot32 + fot13323*sot33;
                result(22,4) = fot11313*sot31 + fot12313*sot32 + fot13313*sot33;
                result(22,5) = fot11312*sot31 + fot12312*sot32 + fot13312*sot33;
                result(22,6) = fot11332*sot31 + fot12332*sot32 + fot13332*sot33;
                result(22,7) = fot11331*sot31 + fot12331*sot32 + fot13331*sot33;
                result(22,8) = fot11321*sot31 + fot12321*sot32 + fot13321*sot33;
                result(23,0) = fot11211*sot31 + fot12211*sot32 + fot13211*sot33;
                result(23,1) = fot11222*sot31 + fot12222*sot32 + fot13222*sot33;
                result(23,2) = fot11233*sot31 + fot12233*sot32 + fot13233*sot33;
                result(23,3) = fot11223*sot31 + fot12223*sot32 + fot13223*sot33;
                result(23,4) = fot11213*sot31 + fot12213*sot32 + fot13213*sot33;
                result(23,5) = fot11212*sot31 + fot12212*sot32 + fot13212*sot33;
                result(23,6) = fot11232*sot31 + fot12232*sot32 + fot13232*sot33;
                result(23,7) = fot11231*sot31 + fot12231*sot32 + fot13231*sot33;
                result(23,8) = fot11221*sot31 + fot12221*sot32 + fot13221*sot33;
                result(24,0) = fot31211*sot31 + fot32211*sot32 + fot33211*sot33;
                result(24,1) = fot31222*sot31 + fot32222*sot32 + fot33222*sot33;
                result(24,2) = fot31233*sot31 + fot32233*sot32 + fot33233*sot33;
                result(24,3) = fot31223*sot31 + fot32223*sot32 + fot33223*sot33;
                result(24,4) = fot31213*sot31 + fot32213*sot32 + fot33213*sot33;
                result(24,5) = fot31212*sot31 + fot32212*sot32 + fot33212*sot33;
                result(24,6) = fot31232*sot31 + fot32232*sot32 + fot33232*sot33;
                result(24,7) = fot31231*sot31 + fot32231*sot32 + fot33231*sot33;
                result(24,8) = fot31221*sot31 + fot32221*sot32 + fot33221*sot33;
                result(25,0) = fot31111*sot31 + fot32111*sot32 + fot33111*sot33;
                result(25,1) = fot31122*sot31 + fot32122*sot32 + fot33122*sot33;
                result(25,2) = fot31133*sot31 + fot32133*sot32 + fot33133*sot33;
                result(25,3) = fot31123*sot31 + fot32123*sot32 + fot33123*sot33;
                result(25,4) = fot31113*sot31 + fot32113*sot32 + fot33113*sot33;
                result(25,5) = fot31112*sot31 + fot32112*sot32 + fot33112*sot33;
                result(25,6) = fot31132*sot31 + fot32132*sot32 + fot33132*sot33;
                result(25,7) = fot31131*sot31 + fot32131*sot32 + fot33131*sot33;
                result(25,8) = fot31121*sot31 + fot32121*sot32 + fot33121*sot33;
                result(26,0) = fot21111*sot31 + fot22111*sot32 + fot23111*sot33;
                result(26,1) = fot21122*sot31 + fot22122*sot32 + fot23122*sot33;
                result(26,2) = fot21133*sot31 + fot22133*sot32 + fot23133*sot33;
                result(26,3) = fot21123*sot31 + fot22123*sot32 + fot23123*sot33;
                result(26,4) = fot21113*sot31 + fot22113*sot32 + fot23113*sot33;
                result(26,5) = fot21112*sot31 + fot22112*sot32 + fot23112*sot33;
                result(26,6) = fot21132*sot31 + fot22132*sot32 + fot23132*sot33;
                result(26,7) = fot21131*sot31 + fot22131*sot32 + fot23131*sot33;
                result(26,8) = fot21121*sot31 + fot22121*sot32 + fot23121*sot33;
        }
        else if(i==2){
                result(0,0) = fot11111*sot11 + fot11211*sot12 + fot11311*sot13;
                result(0,1) = fot11122*sot11 + fot11222*sot12 + fot11322*sot13;
                result(0,2) = fot11133*sot11 + fot11233*sot12 + fot11333*sot13;
                result(0,3) = fot11123*sot11 + fot11223*sot12 + fot11323*sot13;
                result(0,4) = fot11113*sot11 + fot11213*sot12 + fot11313*sot13;
                result(0,5) = fot11112*sot11 + fot11212*sot12 + fot11312*sot13;
                result(0,6) = fot11132*sot11 + fot11232*sot12 + fot11332*sot13;
                result(0,7) = fot11131*sot11 + fot11231*sot12 + fot11331*sot13;
                result(0,8) = fot11121*sot11 + fot11221*sot12 + fot11321*sot13;
                result(1,0) = fot22111*sot11 + fot22211*sot12 + fot22311*sot13;
                result(1,1) = fot22122*sot11 + fot22222*sot12 + fot22322*sot13;
                result(1,2) = fot22133*sot11 + fot22233*sot12 + fot22333*sot13;
                result(1,3) = fot22123*sot11 + fot22223*sot12 + fot22323*sot13;
                result(1,4) = fot22113*sot11 + fot22213*sot12 + fot22313*sot13;
                result(1,5) = fot22112*sot11 + fot22212*sot12 + fot22312*sot13;
                result(1,6) = fot22132*sot11 + fot22232*sot12 + fot22332*sot13;
                result(1,7) = fot22131*sot11 + fot22231*sot12 + fot22331*sot13;
                result(1,8) = fot22121*sot11 + fot22221*sot12 + fot22321*sot13;
                result(2,0) = fot33111*sot11 + fot33211*sot12 + fot33311*sot13;
                result(2,1) = fot33122*sot11 + fot33222*sot12 + fot33322*sot13;
                result(2,2) = fot33133*sot11 + fot33233*sot12 + fot33333*sot13;
                result(2,3) = fot33123*sot11 + fot33223*sot12 + fot33323*sot13;
                result(2,4) = fot33113*sot11 + fot33213*sot12 + fot33313*sot13;
                result(2,5) = fot33112*sot11 + fot33212*sot12 + fot33312*sot13;
                result(2,6) = fot33132*sot11 + fot33232*sot12 + fot33332*sot13;
                result(2,7) = fot33131*sot11 + fot33231*sot12 + fot33331*sot13;
                result(2,8) = fot33121*sot11 + fot33221*sot12 + fot33321*sot13;
                result(3,0) = fot23111*sot11 + fot23211*sot12 + fot23311*sot13;
                result(3,1) = fot23122*sot11 + fot23222*sot12 + fot23322*sot13;
                result(3,2) = fot23133*sot11 + fot23233*sot12 + fot23333*sot13;
                result(3,3) = fot23123*sot11 + fot23223*sot12 + fot23323*sot13;
                result(3,4) = fot23113*sot11 + fot23213*sot12 + fot23313*sot13;
                result(3,5) = fot23112*sot11 + fot23212*sot12 + fot23312*sot13;
                result(3,6) = fot23132*sot11 + fot23232*sot12 + fot23332*sot13;
                result(3,7) = fot23131*sot11 + fot23231*sot12 + fot23331*sot13;
                result(3,8) = fot23121*sot11 + fot23221*sot12 + fot23321*sot13;
                result(4,0) = fot13111*sot11 + fot13211*sot12 + fot13311*sot13;
                result(4,1) = fot13122*sot11 + fot13222*sot12 + fot13322*sot13;
                result(4,2) = fot13133*sot11 + fot13233*sot12 + fot13333*sot13;
                result(4,3) = fot13123*sot11 + fot13223*sot12 + fot13323*sot13;
                result(4,4) = fot13113*sot11 + fot13213*sot12 + fot13313*sot13;
                result(4,5) = fot13112*sot11 + fot13212*sot12 + fot13312*sot13;
                result(4,6) = fot13132*sot11 + fot13232*sot12 + fot13332*sot13;
                result(4,7) = fot13131*sot11 + fot13231*sot12 + fot13331*sot13;
                result(4,8) = fot13121*sot11 + fot13221*sot12 + fot13321*sot13;
                result(5,0) = fot12111*sot11 + fot12211*sot12 + fot12311*sot13;
                result(5,1) = fot12122*sot11 + fot12222*sot12 + fot12322*sot13;
                result(5,2) = fot12133*sot11 + fot12233*sot12 + fot12333*sot13;
                result(5,3) = fot12123*sot11 + fot12223*sot12 + fot12323*sot13;
                result(5,4) = fot12113*sot11 + fot12213*sot12 + fot12313*sot13;
                result(5,5) = fot12112*sot11 + fot12212*sot12 + fot12312*sot13;
                result(5,6) = fot12132*sot11 + fot12232*sot12 + fot12332*sot13;
                result(5,7) = fot12131*sot11 + fot12231*sot12 + fot12331*sot13;
                result(5,8) = fot12121*sot11 + fot12221*sot12 + fot12321*sot13;
                result(6,0) = fot32111*sot11 + fot32211*sot12 + fot32311*sot13;
                result(6,1) = fot32122*sot11 + fot32222*sot12 + fot32322*sot13;
                result(6,2) = fot32133*sot11 + fot32233*sot12 + fot32333*sot13;
                result(6,3) = fot32123*sot11 + fot32223*sot12 + fot32323*sot13;
                result(6,4) = fot32113*sot11 + fot32213*sot12 + fot32313*sot13;
                result(6,5) = fot32112*sot11 + fot32212*sot12 + fot32312*sot13;
                result(6,6) = fot32132*sot11 + fot32232*sot12 + fot32332*sot13;
                result(6,7) = fot32131*sot11 + fot32231*sot12 + fot32331*sot13;
                result(6,8) = fot32121*sot11 + fot32221*sot12 + fot32321*sot13;
                result(7,0) = fot31111*sot11 + fot31211*sot12 + fot31311*sot13;
                result(7,1) = fot31122*sot11 + fot31222*sot12 + fot31322*sot13;
                result(7,2) = fot31133*sot11 + fot31233*sot12 + fot31333*sot13;
                result(7,3) = fot31123*sot11 + fot31223*sot12 + fot31323*sot13;
                result(7,4) = fot31113*sot11 + fot31213*sot12 + fot31313*sot13;
                result(7,5) = fot31112*sot11 + fot31212*sot12 + fot31312*sot13;
                result(7,6) = fot31132*sot11 + fot31232*sot12 + fot31332*sot13;
                result(7,7) = fot31131*sot11 + fot31231*sot12 + fot31331*sot13;
                result(7,8) = fot31121*sot11 + fot31221*sot12 + fot31321*sot13;
                result(8,0) = fot21111*sot11 + fot21211*sot12 + fot21311*sot13;
                result(8,1) = fot21122*sot11 + fot21222*sot12 + fot21322*sot13;
                result(8,2) = fot21133*sot11 + fot21233*sot12 + fot21333*sot13;
                result(8,3) = fot21123*sot11 + fot21223*sot12 + fot21323*sot13;
                result(8,4) = fot21113*sot11 + fot21213*sot12 + fot21313*sot13;
                result(8,5) = fot21112*sot11 + fot21212*sot12 + fot21312*sot13;
                result(8,6) = fot21132*sot11 + fot21232*sot12 + fot21332*sot13;
                result(8,7) = fot21131*sot11 + fot21231*sot12 + fot21331*sot13;
                result(8,8) = fot21121*sot11 + fot21221*sot12 + fot21321*sot13;
                result(9,0) = fot11111*sot21 + fot11211*sot22 + fot11311*sot23;
                result(9,1) = fot11122*sot21 + fot11222*sot22 + fot11322*sot23;
                result(9,2) = fot11133*sot21 + fot11233*sot22 + fot11333*sot23;
                result(9,3) = fot11123*sot21 + fot11223*sot22 + fot11323*sot23;
                result(9,4) = fot11113*sot21 + fot11213*sot22 + fot11313*sot23;
                result(9,5) = fot11112*sot21 + fot11212*sot22 + fot11312*sot23;
                result(9,6) = fot11132*sot21 + fot11232*sot22 + fot11332*sot23;
                result(9,7) = fot11131*sot21 + fot11231*sot22 + fot11331*sot23;
                result(9,8) = fot11121*sot21 + fot11221*sot22 + fot11321*sot23;
                result(10,0) = fot22111*sot21 + fot22211*sot22 + fot22311*sot23;
                result(10,1) = fot22122*sot21 + fot22222*sot22 + fot22322*sot23;
                result(10,2) = fot22133*sot21 + fot22233*sot22 + fot22333*sot23;
                result(10,3) = fot22123*sot21 + fot22223*sot22 + fot22323*sot23;
                result(10,4) = fot22113*sot21 + fot22213*sot22 + fot22313*sot23;
                result(10,5) = fot22112*sot21 + fot22212*sot22 + fot22312*sot23;
                result(10,6) = fot22132*sot21 + fot22232*sot22 + fot22332*sot23;
                result(10,7) = fot22131*sot21 + fot22231*sot22 + fot22331*sot23;
                result(10,8) = fot22121*sot21 + fot22221*sot22 + fot22321*sot23;
                result(11,0) = fot33111*sot21 + fot33211*sot22 + fot33311*sot23;
                result(11,1) = fot33122*sot21 + fot33222*sot22 + fot33322*sot23;
                result(11,2) = fot33133*sot21 + fot33233*sot22 + fot33333*sot23;
                result(11,3) = fot33123*sot21 + fot33223*sot22 + fot33323*sot23;
                result(11,4) = fot33113*sot21 + fot33213*sot22 + fot33313*sot23;
                result(11,5) = fot33112*sot21 + fot33212*sot22 + fot33312*sot23;
                result(11,6) = fot33132*sot21 + fot33232*sot22 + fot33332*sot23;
                result(11,7) = fot33131*sot21 + fot33231*sot22 + fot33331*sot23;
                result(11,8) = fot33121*sot21 + fot33221*sot22 + fot33321*sot23;
                result(12,0) = fot23111*sot21 + fot23211*sot22 + fot23311*sot23;
                result(12,1) = fot23122*sot21 + fot23222*sot22 + fot23322*sot23;
                result(12,2) = fot23133*sot21 + fot23233*sot22 + fot23333*sot23;
                result(12,3) = fot23123*sot21 + fot23223*sot22 + fot23323*sot23;
                result(12,4) = fot23113*sot21 + fot23213*sot22 + fot23313*sot23;
                result(12,5) = fot23112*sot21 + fot23212*sot22 + fot23312*sot23;
                result(12,6) = fot23132*sot21 + fot23232*sot22 + fot23332*sot23;
                result(12,7) = fot23131*sot21 + fot23231*sot22 + fot23331*sot23;
                result(12,8) = fot23121*sot21 + fot23221*sot22 + fot23321*sot23;
                result(13,0) = fot13111*sot21 + fot13211*sot22 + fot13311*sot23;
                result(13,1) = fot13122*sot21 + fot13222*sot22 + fot13322*sot23;
                result(13,2) = fot13133*sot21 + fot13233*sot22 + fot13333*sot23;
                result(13,3) = fot13123*sot21 + fot13223*sot22 + fot13323*sot23;
                result(13,4) = fot13113*sot21 + fot13213*sot22 + fot13313*sot23;
                result(13,5) = fot13112*sot21 + fot13212*sot22 + fot13312*sot23;
                result(13,6) = fot13132*sot21 + fot13232*sot22 + fot13332*sot23;
                result(13,7) = fot13131*sot21 + fot13231*sot22 + fot13331*sot23;
                result(13,8) = fot13121*sot21 + fot13221*sot22 + fot13321*sot23;
                result(14,0) = fot12111*sot21 + fot12211*sot22 + fot12311*sot23;
                result(14,1) = fot12122*sot21 + fot12222*sot22 + fot12322*sot23;
                result(14,2) = fot12133*sot21 + fot12233*sot22 + fot12333*sot23;
                result(14,3) = fot12123*sot21 + fot12223*sot22 + fot12323*sot23;
                result(14,4) = fot12113*sot21 + fot12213*sot22 + fot12313*sot23;
                result(14,5) = fot12112*sot21 + fot12212*sot22 + fot12312*sot23;
                result(14,6) = fot12132*sot21 + fot12232*sot22 + fot12332*sot23;
                result(14,7) = fot12131*sot21 + fot12231*sot22 + fot12331*sot23;
                result(14,8) = fot12121*sot21 + fot12221*sot22 + fot12321*sot23;
                result(15,0) = fot32111*sot21 + fot32211*sot22 + fot32311*sot23;
                result(15,1) = fot32122*sot21 + fot32222*sot22 + fot32322*sot23;
                result(15,2) = fot32133*sot21 + fot32233*sot22 + fot32333*sot23;
                result(15,3) = fot32123*sot21 + fot32223*sot22 + fot32323*sot23;
                result(15,4) = fot32113*sot21 + fot32213*sot22 + fot32313*sot23;
                result(15,5) = fot32112*sot21 + fot32212*sot22 + fot32312*sot23;
                result(15,6) = fot32132*sot21 + fot32232*sot22 + fot32332*sot23;
                result(15,7) = fot32131*sot21 + fot32231*sot22 + fot32331*sot23;
                result(15,8) = fot32121*sot21 + fot32221*sot22 + fot32321*sot23;
                result(16,0) = fot31111*sot21 + fot31211*sot22 + fot31311*sot23;
                result(16,1) = fot31122*sot21 + fot31222*sot22 + fot31322*sot23;
                result(16,2) = fot31133*sot21 + fot31233*sot22 + fot31333*sot23;
                result(16,3) = fot31123*sot21 + fot31223*sot22 + fot31323*sot23;
                result(16,4) = fot31113*sot21 + fot31213*sot22 + fot31313*sot23;
                result(16,5) = fot31112*sot21 + fot31212*sot22 + fot31312*sot23;
                result(16,6) = fot31132*sot21 + fot31232*sot22 + fot31332*sot23;
                result(16,7) = fot31131*sot21 + fot31231*sot22 + fot31331*sot23;
                result(16,8) = fot31121*sot21 + fot31221*sot22 + fot31321*sot23;
                result(17,0) = fot21111*sot21 + fot21211*sot22 + fot21311*sot23;
                result(17,1) = fot21122*sot21 + fot21222*sot22 + fot21322*sot23;
                result(17,2) = fot21133*sot21 + fot21233*sot22 + fot21333*sot23;
                result(17,3) = fot21123*sot21 + fot21223*sot22 + fot21323*sot23;
                result(17,4) = fot21113*sot21 + fot21213*sot22 + fot21313*sot23;
                result(17,5) = fot21112*sot21 + fot21212*sot22 + fot21312*sot23;
                result(17,6) = fot21132*sot21 + fot21232*sot22 + fot21332*sot23;
                result(17,7) = fot21131*sot21 + fot21231*sot22 + fot21331*sot23;
                result(17,8) = fot21121*sot21 + fot21221*sot22 + fot21321*sot23;
                result(18,0) = fot11111*sot31 + fot11211*sot32 + fot11311*sot33;
                result(18,1) = fot11122*sot31 + fot11222*sot32 + fot11322*sot33;
                result(18,2) = fot11133*sot31 + fot11233*sot32 + fot11333*sot33;
                result(18,3) = fot11123*sot31 + fot11223*sot32 + fot11323*sot33;
                result(18,4) = fot11113*sot31 + fot11213*sot32 + fot11313*sot33;
                result(18,5) = fot11112*sot31 + fot11212*sot32 + fot11312*sot33;
                result(18,6) = fot11132*sot31 + fot11232*sot32 + fot11332*sot33;
                result(18,7) = fot11131*sot31 + fot11231*sot32 + fot11331*sot33;
                result(18,8) = fot11121*sot31 + fot11221*sot32 + fot11321*sot33;
                result(19,0) = fot22111*sot31 + fot22211*sot32 + fot22311*sot33;
                result(19,1) = fot22122*sot31 + fot22222*sot32 + fot22322*sot33;
                result(19,2) = fot22133*sot31 + fot22233*sot32 + fot22333*sot33;
                result(19,3) = fot22123*sot31 + fot22223*sot32 + fot22323*sot33;
                result(19,4) = fot22113*sot31 + fot22213*sot32 + fot22313*sot33;
                result(19,5) = fot22112*sot31 + fot22212*sot32 + fot22312*sot33;
                result(19,6) = fot22132*sot31 + fot22232*sot32 + fot22332*sot33;
                result(19,7) = fot22131*sot31 + fot22231*sot32 + fot22331*sot33;
                result(19,8) = fot22121*sot31 + fot22221*sot32 + fot22321*sot33;
                result(20,0) = fot33111*sot31 + fot33211*sot32 + fot33311*sot33;
                result(20,1) = fot33122*sot31 + fot33222*sot32 + fot33322*sot33;
                result(20,2) = fot33133*sot31 + fot33233*sot32 + fot33333*sot33;
                result(20,3) = fot33123*sot31 + fot33223*sot32 + fot33323*sot33;
                result(20,4) = fot33113*sot31 + fot33213*sot32 + fot33313*sot33;
                result(20,5) = fot33112*sot31 + fot33212*sot32 + fot33312*sot33;
                result(20,6) = fot33132*sot31 + fot33232*sot32 + fot33332*sot33;
                result(20,7) = fot33131*sot31 + fot33231*sot32 + fot33331*sot33;
                result(20,8) = fot33121*sot31 + fot33221*sot32 + fot33321*sot33;
                result(21,0) = fot23111*sot31 + fot23211*sot32 + fot23311*sot33;
                result(21,1) = fot23122*sot31 + fot23222*sot32 + fot23322*sot33;
                result(21,2) = fot23133*sot31 + fot23233*sot32 + fot23333*sot33;
                result(21,3) = fot23123*sot31 + fot23223*sot32 + fot23323*sot33;
                result(21,4) = fot23113*sot31 + fot23213*sot32 + fot23313*sot33;
                result(21,5) = fot23112*sot31 + fot23212*sot32 + fot23312*sot33;
                result(21,6) = fot23132*sot31 + fot23232*sot32 + fot23332*sot33;
                result(21,7) = fot23131*sot31 + fot23231*sot32 + fot23331*sot33;
                result(21,8) = fot23121*sot31 + fot23221*sot32 + fot23321*sot33;
                result(22,0) = fot13111*sot31 + fot13211*sot32 + fot13311*sot33;
                result(22,1) = fot13122*sot31 + fot13222*sot32 + fot13322*sot33;
                result(22,2) = fot13133*sot31 + fot13233*sot32 + fot13333*sot33;
                result(22,3) = fot13123*sot31 + fot13223*sot32 + fot13323*sot33;
                result(22,4) = fot13113*sot31 + fot13213*sot32 + fot13313*sot33;
                result(22,5) = fot13112*sot31 + fot13212*sot32 + fot13312*sot33;
                result(22,6) = fot13132*sot31 + fot13232*sot32 + fot13332*sot33;
                result(22,7) = fot13131*sot31 + fot13231*sot32 + fot13331*sot33;
                result(22,8) = fot13121*sot31 + fot13221*sot32 + fot13321*sot33;
                result(23,0) = fot12111*sot31 + fot12211*sot32 + fot12311*sot33;
                result(23,1) = fot12122*sot31 + fot12222*sot32 + fot12322*sot33;
                result(23,2) = fot12133*sot31 + fot12233*sot32 + fot12333*sot33;
                result(23,3) = fot12123*sot31 + fot12223*sot32 + fot12323*sot33;
                result(23,4) = fot12113*sot31 + fot12213*sot32 + fot12313*sot33;
                result(23,5) = fot12112*sot31 + fot12212*sot32 + fot12312*sot33;
                result(23,6) = fot12132*sot31 + fot12232*sot32 + fot12332*sot33;
                result(23,7) = fot12131*sot31 + fot12231*sot32 + fot12331*sot33;
                result(23,8) = fot12121*sot31 + fot12221*sot32 + fot12321*sot33;
                result(24,0) = fot32111*sot31 + fot32211*sot32 + fot32311*sot33;
                result(24,1) = fot32122*sot31 + fot32222*sot32 + fot32322*sot33;
                result(24,2) = fot32133*sot31 + fot32233*sot32 + fot32333*sot33;
                result(24,3) = fot32123*sot31 + fot32223*sot32 + fot32323*sot33;
                result(24,4) = fot32113*sot31 + fot32213*sot32 + fot32313*sot33;
                result(24,5) = fot32112*sot31 + fot32212*sot32 + fot32312*sot33;
                result(24,6) = fot32132*sot31 + fot32232*sot32 + fot32332*sot33;
                result(24,7) = fot32131*sot31 + fot32231*sot32 + fot32331*sot33;
                result(24,8) = fot32121*sot31 + fot32221*sot32 + fot32321*sot33;
                result(25,0) = fot31111*sot31 + fot31211*sot32 + fot31311*sot33;
                result(25,1) = fot31122*sot31 + fot31222*sot32 + fot31322*sot33;
                result(25,2) = fot31133*sot31 + fot31233*sot32 + fot31333*sot33;
                result(25,3) = fot31123*sot31 + fot31223*sot32 + fot31323*sot33;
                result(25,4) = fot31113*sot31 + fot31213*sot32 + fot31313*sot33;
                result(25,5) = fot31112*sot31 + fot31212*sot32 + fot31312*sot33;
                result(25,6) = fot31132*sot31 + fot31232*sot32 + fot31332*sot33;
                result(25,7) = fot31131*sot31 + fot31231*sot32 + fot31331*sot33;
                result(25,8) = fot31121*sot31 + fot31221*sot32 + fot31321*sot33;
                result(26,0) = fot21111*sot31 + fot21211*sot32 + fot21311*sot33;
                result(26,1) = fot21122*sot31 + fot21222*sot32 + fot21322*sot33;
                result(26,2) = fot21133*sot31 + fot21233*sot32 + fot21333*sot33;
                result(26,3) = fot21123*sot31 + fot21223*sot32 + fot21323*sot33;
                result(26,4) = fot21113*sot31 + fot21213*sot32 + fot21313*sot33;
                result(26,5) = fot21112*sot31 + fot21212*sot32 + fot21312*sot33;
                result(26,6) = fot21132*sot31 + fot21232*sot32 + fot21332*sot33;
                result(26,7) = fot21131*sot31 + fot21231*sot32 + fot21331*sot33;
                result(26,8) = fot21121*sot31 + fot21221*sot32 + fot21321*sot33;
        }
        else if(i==3){
                result(0,0) = fot11111*sot11 + fot11121*sot12 + fot11131*sot13;
                result(0,1) = fot11212*sot11 + fot11222*sot12 + fot11232*sot13;
                result(0,2) = fot11313*sot11 + fot11323*sot12 + fot11333*sot13;
                result(0,3) = fot11213*sot11 + fot11223*sot12 + fot11233*sot13;
                result(0,4) = fot11113*sot11 + fot11123*sot12 + fot11133*sot13;
                result(0,5) = fot11112*sot11 + fot11122*sot12 + fot11132*sot13;
                result(0,6) = fot11312*sot11 + fot11322*sot12 + fot11332*sot13;
                result(0,7) = fot11311*sot11 + fot11321*sot12 + fot11331*sot13;
                result(0,8) = fot11211*sot11 + fot11221*sot12 + fot11231*sot13;
                result(1,0) = fot22111*sot11 + fot22121*sot12 + fot22131*sot13;
                result(1,1) = fot22212*sot11 + fot22222*sot12 + fot22232*sot13;
                result(1,2) = fot22313*sot11 + fot22323*sot12 + fot22333*sot13;
                result(1,3) = fot22213*sot11 + fot22223*sot12 + fot22233*sot13;
                result(1,4) = fot22113*sot11 + fot22123*sot12 + fot22133*sot13;
                result(1,5) = fot22112*sot11 + fot22122*sot12 + fot22132*sot13;
                result(1,6) = fot22312*sot11 + fot22322*sot12 + fot22332*sot13;
                result(1,7) = fot22311*sot11 + fot22321*sot12 + fot22331*sot13;
                result(1,8) = fot22211*sot11 + fot22221*sot12 + fot22231*sot13;
                result(2,0) = fot33111*sot11 + fot33121*sot12 + fot33131*sot13;
                result(2,1) = fot33212*sot11 + fot33222*sot12 + fot33232*sot13;
                result(2,2) = fot33313*sot11 + fot33323*sot12 + fot33333*sot13;
                result(2,3) = fot33213*sot11 + fot33223*sot12 + fot33233*sot13;
                result(2,4) = fot33113*sot11 + fot33123*sot12 + fot33133*sot13;
                result(2,5) = fot33112*sot11 + fot33122*sot12 + fot33132*sot13;
                result(2,6) = fot33312*sot11 + fot33322*sot12 + fot33332*sot13;
                result(2,7) = fot33311*sot11 + fot33321*sot12 + fot33331*sot13;
                result(2,8) = fot33211*sot11 + fot33221*sot12 + fot33231*sot13;
                result(3,0) = fot23111*sot11 + fot23121*sot12 + fot23131*sot13;
                result(3,1) = fot23212*sot11 + fot23222*sot12 + fot23232*sot13;
                result(3,2) = fot23313*sot11 + fot23323*sot12 + fot23333*sot13;
                result(3,3) = fot23213*sot11 + fot23223*sot12 + fot23233*sot13;
                result(3,4) = fot23113*sot11 + fot23123*sot12 + fot23133*sot13;
                result(3,5) = fot23112*sot11 + fot23122*sot12 + fot23132*sot13;
                result(3,6) = fot23312*sot11 + fot23322*sot12 + fot23332*sot13;
                result(3,7) = fot23311*sot11 + fot23321*sot12 + fot23331*sot13;
                result(3,8) = fot23211*sot11 + fot23221*sot12 + fot23231*sot13;
                result(4,0) = fot13111*sot11 + fot13121*sot12 + fot13131*sot13;
                result(4,1) = fot13212*sot11 + fot13222*sot12 + fot13232*sot13;
                result(4,2) = fot13313*sot11 + fot13323*sot12 + fot13333*sot13;
                result(4,3) = fot13213*sot11 + fot13223*sot12 + fot13233*sot13;
                result(4,4) = fot13113*sot11 + fot13123*sot12 + fot13133*sot13;
                result(4,5) = fot13112*sot11 + fot13122*sot12 + fot13132*sot13;
                result(4,6) = fot13312*sot11 + fot13322*sot12 + fot13332*sot13;
                result(4,7) = fot13311*sot11 + fot13321*sot12 + fot13331*sot13;
                result(4,8) = fot13211*sot11 + fot13221*sot12 + fot13231*sot13;
                result(5,0) = fot12111*sot11 + fot12121*sot12 + fot12131*sot13;
                result(5,1) = fot12212*sot11 + fot12222*sot12 + fot12232*sot13;
                result(5,2) = fot12313*sot11 + fot12323*sot12 + fot12333*sot13;
                result(5,3) = fot12213*sot11 + fot12223*sot12 + fot12233*sot13;
                result(5,4) = fot12113*sot11 + fot12123*sot12 + fot12133*sot13;
                result(5,5) = fot12112*sot11 + fot12122*sot12 + fot12132*sot13;
                result(5,6) = fot12312*sot11 + fot12322*sot12 + fot12332*sot13;
                result(5,7) = fot12311*sot11 + fot12321*sot12 + fot12331*sot13;
                result(5,8) = fot12211*sot11 + fot12221*sot12 + fot12231*sot13;
                result(6,0) = fot32111*sot11 + fot32121*sot12 + fot32131*sot13;
                result(6,1) = fot32212*sot11 + fot32222*sot12 + fot32232*sot13;
                result(6,2) = fot32313*sot11 + fot32323*sot12 + fot32333*sot13;
                result(6,3) = fot32213*sot11 + fot32223*sot12 + fot32233*sot13;
                result(6,4) = fot32113*sot11 + fot32123*sot12 + fot32133*sot13;
                result(6,5) = fot32112*sot11 + fot32122*sot12 + fot32132*sot13;
                result(6,6) = fot32312*sot11 + fot32322*sot12 + fot32332*sot13;
                result(6,7) = fot32311*sot11 + fot32321*sot12 + fot32331*sot13;
                result(6,8) = fot32211*sot11 + fot32221*sot12 + fot32231*sot13;
                result(7,0) = fot31111*sot11 + fot31121*sot12 + fot31131*sot13;
                result(7,1) = fot31212*sot11 + fot31222*sot12 + fot31232*sot13;
                result(7,2) = fot31313*sot11 + fot31323*sot12 + fot31333*sot13;
                result(7,3) = fot31213*sot11 + fot31223*sot12 + fot31233*sot13;
                result(7,4) = fot31113*sot11 + fot31123*sot12 + fot31133*sot13;
                result(7,5) = fot31112*sot11 + fot31122*sot12 + fot31132*sot13;
                result(7,6) = fot31312*sot11 + fot31322*sot12 + fot31332*sot13;
                result(7,7) = fot31311*sot11 + fot31321*sot12 + fot31331*sot13;
                result(7,8) = fot31211*sot11 + fot31221*sot12 + fot31231*sot13;
                result(8,0) = fot21111*sot11 + fot21121*sot12 + fot21131*sot13;
                result(8,1) = fot21212*sot11 + fot21222*sot12 + fot21232*sot13;
                result(8,2) = fot21313*sot11 + fot21323*sot12 + fot21333*sot13;
                result(8,3) = fot21213*sot11 + fot21223*sot12 + fot21233*sot13;
                result(8,4) = fot21113*sot11 + fot21123*sot12 + fot21133*sot13;
                result(8,5) = fot21112*sot11 + fot21122*sot12 + fot21132*sot13;
                result(8,6) = fot21312*sot11 + fot21322*sot12 + fot21332*sot13;
                result(8,7) = fot21311*sot11 + fot21321*sot12 + fot21331*sot13;
                result(8,8) = fot21211*sot11 + fot21221*sot12 + fot21231*sot13;
                result(9,0) = fot11111*sot21 + fot11121*sot22 + fot11131*sot23;
                result(9,1) = fot11212*sot21 + fot11222*sot22 + fot11232*sot23;
                result(9,2) = fot11313*sot21 + fot11323*sot22 + fot11333*sot23;
                result(9,3) = fot11213*sot21 + fot11223*sot22 + fot11233*sot23;
                result(9,4) = fot11113*sot21 + fot11123*sot22 + fot11133*sot23;
                result(9,5) = fot11112*sot21 + fot11122*sot22 + fot11132*sot23;
                result(9,6) = fot11312*sot21 + fot11322*sot22 + fot11332*sot23;
                result(9,7) = fot11311*sot21 + fot11321*sot22 + fot11331*sot23;
                result(9,8) = fot11211*sot21 + fot11221*sot22 + fot11231*sot23;
                result(10,0) = fot22111*sot21 + fot22121*sot22 + fot22131*sot23;
                result(10,1) = fot22212*sot21 + fot22222*sot22 + fot22232*sot23;
                result(10,2) = fot22313*sot21 + fot22323*sot22 + fot22333*sot23;
                result(10,3) = fot22213*sot21 + fot22223*sot22 + fot22233*sot23;
                result(10,4) = fot22113*sot21 + fot22123*sot22 + fot22133*sot23;
                result(10,5) = fot22112*sot21 + fot22122*sot22 + fot22132*sot23;
                result(10,6) = fot22312*sot21 + fot22322*sot22 + fot22332*sot23;
                result(10,7) = fot22311*sot21 + fot22321*sot22 + fot22331*sot23;
                result(10,8) = fot22211*sot21 + fot22221*sot22 + fot22231*sot23;
                result(11,0) = fot33111*sot21 + fot33121*sot22 + fot33131*sot23;
                result(11,1) = fot33212*sot21 + fot33222*sot22 + fot33232*sot23;
                result(11,2) = fot33313*sot21 + fot33323*sot22 + fot33333*sot23;
                result(11,3) = fot33213*sot21 + fot33223*sot22 + fot33233*sot23;
                result(11,4) = fot33113*sot21 + fot33123*sot22 + fot33133*sot23;
                result(11,5) = fot33112*sot21 + fot33122*sot22 + fot33132*sot23;
                result(11,6) = fot33312*sot21 + fot33322*sot22 + fot33332*sot23;
                result(11,7) = fot33311*sot21 + fot33321*sot22 + fot33331*sot23;
                result(11,8) = fot33211*sot21 + fot33221*sot22 + fot33231*sot23;
                result(12,0) = fot23111*sot21 + fot23121*sot22 + fot23131*sot23;
                result(12,1) = fot23212*sot21 + fot23222*sot22 + fot23232*sot23;
                result(12,2) = fot23313*sot21 + fot23323*sot22 + fot23333*sot23;
                result(12,3) = fot23213*sot21 + fot23223*sot22 + fot23233*sot23;
                result(12,4) = fot23113*sot21 + fot23123*sot22 + fot23133*sot23;
                result(12,5) = fot23112*sot21 + fot23122*sot22 + fot23132*sot23;
                result(12,6) = fot23312*sot21 + fot23322*sot22 + fot23332*sot23;
                result(12,7) = fot23311*sot21 + fot23321*sot22 + fot23331*sot23;
                result(12,8) = fot23211*sot21 + fot23221*sot22 + fot23231*sot23;
                result(13,0) = fot13111*sot21 + fot13121*sot22 + fot13131*sot23;
                result(13,1) = fot13212*sot21 + fot13222*sot22 + fot13232*sot23;
                result(13,2) = fot13313*sot21 + fot13323*sot22 + fot13333*sot23;
                result(13,3) = fot13213*sot21 + fot13223*sot22 + fot13233*sot23;
                result(13,4) = fot13113*sot21 + fot13123*sot22 + fot13133*sot23;
                result(13,5) = fot13112*sot21 + fot13122*sot22 + fot13132*sot23;
                result(13,6) = fot13312*sot21 + fot13322*sot22 + fot13332*sot23;
                result(13,7) = fot13311*sot21 + fot13321*sot22 + fot13331*sot23;
                result(13,8) = fot13211*sot21 + fot13221*sot22 + fot13231*sot23;
                result(14,0) = fot12111*sot21 + fot12121*sot22 + fot12131*sot23;
                result(14,1) = fot12212*sot21 + fot12222*sot22 + fot12232*sot23;
                result(14,2) = fot12313*sot21 + fot12323*sot22 + fot12333*sot23;
                result(14,3) = fot12213*sot21 + fot12223*sot22 + fot12233*sot23;
                result(14,4) = fot12113*sot21 + fot12123*sot22 + fot12133*sot23;
                result(14,5) = fot12112*sot21 + fot12122*sot22 + fot12132*sot23;
                result(14,6) = fot12312*sot21 + fot12322*sot22 + fot12332*sot23;
                result(14,7) = fot12311*sot21 + fot12321*sot22 + fot12331*sot23;
                result(14,8) = fot12211*sot21 + fot12221*sot22 + fot12231*sot23;
                result(15,0) = fot32111*sot21 + fot32121*sot22 + fot32131*sot23;
                result(15,1) = fot32212*sot21 + fot32222*sot22 + fot32232*sot23;
                result(15,2) = fot32313*sot21 + fot32323*sot22 + fot32333*sot23;
                result(15,3) = fot32213*sot21 + fot32223*sot22 + fot32233*sot23;
                result(15,4) = fot32113*sot21 + fot32123*sot22 + fot32133*sot23;
                result(15,5) = fot32112*sot21 + fot32122*sot22 + fot32132*sot23;
                result(15,6) = fot32312*sot21 + fot32322*sot22 + fot32332*sot23;
                result(15,7) = fot32311*sot21 + fot32321*sot22 + fot32331*sot23;
                result(15,8) = fot32211*sot21 + fot32221*sot22 + fot32231*sot23;
                result(16,0) = fot31111*sot21 + fot31121*sot22 + fot31131*sot23;
                result(16,1) = fot31212*sot21 + fot31222*sot22 + fot31232*sot23;
                result(16,2) = fot31313*sot21 + fot31323*sot22 + fot31333*sot23;
                result(16,3) = fot31213*sot21 + fot31223*sot22 + fot31233*sot23;
                result(16,4) = fot31113*sot21 + fot31123*sot22 + fot31133*sot23;
                result(16,5) = fot31112*sot21 + fot31122*sot22 + fot31132*sot23;
                result(16,6) = fot31312*sot21 + fot31322*sot22 + fot31332*sot23;
                result(16,7) = fot31311*sot21 + fot31321*sot22 + fot31331*sot23;
                result(16,8) = fot31211*sot21 + fot31221*sot22 + fot31231*sot23;
                result(17,0) = fot21111*sot21 + fot21121*sot22 + fot21131*sot23;
                result(17,1) = fot21212*sot21 + fot21222*sot22 + fot21232*sot23;
                result(17,2) = fot21313*sot21 + fot21323*sot22 + fot21333*sot23;
                result(17,3) = fot21213*sot21 + fot21223*sot22 + fot21233*sot23;
                result(17,4) = fot21113*sot21 + fot21123*sot22 + fot21133*sot23;
                result(17,5) = fot21112*sot21 + fot21122*sot22 + fot21132*sot23;
                result(17,6) = fot21312*sot21 + fot21322*sot22 + fot21332*sot23;
                result(17,7) = fot21311*sot21 + fot21321*sot22 + fot21331*sot23;
                result(17,8) = fot21211*sot21 + fot21221*sot22 + fot21231*sot23;
                result(18,0) = fot11111*sot31 + fot11121*sot32 + fot11131*sot33;
                result(18,1) = fot11212*sot31 + fot11222*sot32 + fot11232*sot33;
                result(18,2) = fot11313*sot31 + fot11323*sot32 + fot11333*sot33;
                result(18,3) = fot11213*sot31 + fot11223*sot32 + fot11233*sot33;
                result(18,4) = fot11113*sot31 + fot11123*sot32 + fot11133*sot33;
                result(18,5) = fot11112*sot31 + fot11122*sot32 + fot11132*sot33;
                result(18,6) = fot11312*sot31 + fot11322*sot32 + fot11332*sot33;
                result(18,7) = fot11311*sot31 + fot11321*sot32 + fot11331*sot33;
                result(18,8) = fot11211*sot31 + fot11221*sot32 + fot11231*sot33;
                result(19,0) = fot22111*sot31 + fot22121*sot32 + fot22131*sot33;
                result(19,1) = fot22212*sot31 + fot22222*sot32 + fot22232*sot33;
                result(19,2) = fot22313*sot31 + fot22323*sot32 + fot22333*sot33;
                result(19,3) = fot22213*sot31 + fot22223*sot32 + fot22233*sot33;
                result(19,4) = fot22113*sot31 + fot22123*sot32 + fot22133*sot33;
                result(19,5) = fot22112*sot31 + fot22122*sot32 + fot22132*sot33;
                result(19,6) = fot22312*sot31 + fot22322*sot32 + fot22332*sot33;
                result(19,7) = fot22311*sot31 + fot22321*sot32 + fot22331*sot33;
                result(19,8) = fot22211*sot31 + fot22221*sot32 + fot22231*sot33;
                result(20,0) = fot33111*sot31 + fot33121*sot32 + fot33131*sot33;
                result(20,1) = fot33212*sot31 + fot33222*sot32 + fot33232*sot33;
                result(20,2) = fot33313*sot31 + fot33323*sot32 + fot33333*sot33;
                result(20,3) = fot33213*sot31 + fot33223*sot32 + fot33233*sot33;
                result(20,4) = fot33113*sot31 + fot33123*sot32 + fot33133*sot33;
                result(20,5) = fot33112*sot31 + fot33122*sot32 + fot33132*sot33;
                result(20,6) = fot33312*sot31 + fot33322*sot32 + fot33332*sot33;
                result(20,7) = fot33311*sot31 + fot33321*sot32 + fot33331*sot33;
                result(20,8) = fot33211*sot31 + fot33221*sot32 + fot33231*sot33;
                result(21,0) = fot23111*sot31 + fot23121*sot32 + fot23131*sot33;
                result(21,1) = fot23212*sot31 + fot23222*sot32 + fot23232*sot33;
                result(21,2) = fot23313*sot31 + fot23323*sot32 + fot23333*sot33;
                result(21,3) = fot23213*sot31 + fot23223*sot32 + fot23233*sot33;
                result(21,4) = fot23113*sot31 + fot23123*sot32 + fot23133*sot33;
                result(21,5) = fot23112*sot31 + fot23122*sot32 + fot23132*sot33;
                result(21,6) = fot23312*sot31 + fot23322*sot32 + fot23332*sot33;
                result(21,7) = fot23311*sot31 + fot23321*sot32 + fot23331*sot33;
                result(21,8) = fot23211*sot31 + fot23221*sot32 + fot23231*sot33;
                result(22,0) = fot13111*sot31 + fot13121*sot32 + fot13131*sot33;
                result(22,1) = fot13212*sot31 + fot13222*sot32 + fot13232*sot33;
                result(22,2) = fot13313*sot31 + fot13323*sot32 + fot13333*sot33;
                result(22,3) = fot13213*sot31 + fot13223*sot32 + fot13233*sot33;
                result(22,4) = fot13113*sot31 + fot13123*sot32 + fot13133*sot33;
                result(22,5) = fot13112*sot31 + fot13122*sot32 + fot13132*sot33;
                result(22,6) = fot13312*sot31 + fot13322*sot32 + fot13332*sot33;
                result(22,7) = fot13311*sot31 + fot13321*sot32 + fot13331*sot33;
                result(22,8) = fot13211*sot31 + fot13221*sot32 + fot13231*sot33;
                result(23,0) = fot12111*sot31 + fot12121*sot32 + fot12131*sot33;
                result(23,1) = fot12212*sot31 + fot12222*sot32 + fot12232*sot33;
                result(23,2) = fot12313*sot31 + fot12323*sot32 + fot12333*sot33;
                result(23,3) = fot12213*sot31 + fot12223*sot32 + fot12233*sot33;
                result(23,4) = fot12113*sot31 + fot12123*sot32 + fot12133*sot33;
                result(23,5) = fot12112*sot31 + fot12122*sot32 + fot12132*sot33;
                result(23,6) = fot12312*sot31 + fot12322*sot32 + fot12332*sot33;
                result(23,7) = fot12311*sot31 + fot12321*sot32 + fot12331*sot33;
                result(23,8) = fot12211*sot31 + fot12221*sot32 + fot12231*sot33;
                result(24,0) = fot32111*sot31 + fot32121*sot32 + fot32131*sot33;
                result(24,1) = fot32212*sot31 + fot32222*sot32 + fot32232*sot33;
                result(24,2) = fot32313*sot31 + fot32323*sot32 + fot32333*sot33;
                result(24,3) = fot32213*sot31 + fot32223*sot32 + fot32233*sot33;
                result(24,4) = fot32113*sot31 + fot32123*sot32 + fot32133*sot33;
                result(24,5) = fot32112*sot31 + fot32122*sot32 + fot32132*sot33;
                result(24,6) = fot32312*sot31 + fot32322*sot32 + fot32332*sot33;
                result(24,7) = fot32311*sot31 + fot32321*sot32 + fot32331*sot33;
                result(24,8) = fot32211*sot31 + fot32221*sot32 + fot32231*sot33;
                result(25,0) = fot31111*sot31 + fot31121*sot32 + fot31131*sot33;
                result(25,1) = fot31212*sot31 + fot31222*sot32 + fot31232*sot33;
                result(25,2) = fot31313*sot31 + fot31323*sot32 + fot31333*sot33;
                result(25,3) = fot31213*sot31 + fot31223*sot32 + fot31233*sot33;
                result(25,4) = fot31113*sot31 + fot31123*sot32 + fot31133*sot33;
                result(25,5) = fot31112*sot31 + fot31122*sot32 + fot31132*sot33;
                result(25,6) = fot31312*sot31 + fot31322*sot32 + fot31332*sot33;
                result(25,7) = fot31311*sot31 + fot31321*sot32 + fot31331*sot33;
                result(25,8) = fot31211*sot31 + fot31221*sot32 + fot31231*sot33;
                result(26,0) = fot21111*sot31 + fot21121*sot32 + fot21131*sot33;
                result(26,1) = fot21212*sot31 + fot21222*sot32 + fot21232*sot33;
                result(26,2) = fot21313*sot31 + fot21323*sot32 + fot21333*sot33;
                result(26,3) = fot21213*sot31 + fot21223*sot32 + fot21233*sot33;
                result(26,4) = fot21113*sot31 + fot21123*sot32 + fot21133*sot33;
                result(26,5) = fot21112*sot31 + fot21122*sot32 + fot21132*sot33;
                result(26,6) = fot21312*sot31 + fot21322*sot32 + fot21332*sot33;
                result(26,7) = fot21311*sot31 + fot21321*sot32 + fot21331*sot33;
                result(26,8) = fot21211*sot31 + fot21221*sot32 + fot21231*sot33;
        }
        else if(i==4){
                result(0,0) = fot11111*sot11 + fot11112*sot12 + fot11113*sot13;
                result(0,1) = fot11221*sot11 + fot11222*sot12 + fot11223*sot13;
                result(0,2) = fot11331*sot11 + fot11332*sot12 + fot11333*sot13;
                result(0,3) = fot11231*sot11 + fot11232*sot12 + fot11233*sot13;
                result(0,4) = fot11131*sot11 + fot11132*sot12 + fot11133*sot13;
                result(0,5) = fot11121*sot11 + fot11122*sot12 + fot11123*sot13;
                result(0,6) = fot11321*sot11 + fot11322*sot12 + fot11323*sot13;
                result(0,7) = fot11311*sot11 + fot11312*sot12 + fot11313*sot13;
                result(0,8) = fot11211*sot11 + fot11212*sot12 + fot11213*sot13;
                result(1,0) = fot22111*sot11 + fot22112*sot12 + fot22113*sot13;
                result(1,1) = fot22221*sot11 + fot22222*sot12 + fot22223*sot13;
                result(1,2) = fot22331*sot11 + fot22332*sot12 + fot22333*sot13;
                result(1,3) = fot22231*sot11 + fot22232*sot12 + fot22233*sot13;
                result(1,4) = fot22131*sot11 + fot22132*sot12 + fot22133*sot13;
                result(1,5) = fot22121*sot11 + fot22122*sot12 + fot22123*sot13;
                result(1,6) = fot22321*sot11 + fot22322*sot12 + fot22323*sot13;
                result(1,7) = fot22311*sot11 + fot22312*sot12 + fot22313*sot13;
                result(1,8) = fot22211*sot11 + fot22212*sot12 + fot22213*sot13;
                result(2,0) = fot33111*sot11 + fot33112*sot12 + fot33113*sot13;
                result(2,1) = fot33221*sot11 + fot33222*sot12 + fot33223*sot13;
                result(2,2) = fot33331*sot11 + fot33332*sot12 + fot33333*sot13;
                result(2,3) = fot33231*sot11 + fot33232*sot12 + fot33233*sot13;
                result(2,4) = fot33131*sot11 + fot33132*sot12 + fot33133*sot13;
                result(2,5) = fot33121*sot11 + fot33122*sot12 + fot33123*sot13;
                result(2,6) = fot33321*sot11 + fot33322*sot12 + fot33323*sot13;
                result(2,7) = fot33311*sot11 + fot33312*sot12 + fot33313*sot13;
                result(2,8) = fot33211*sot11 + fot33212*sot12 + fot33213*sot13;
                result(3,0) = fot23111*sot11 + fot23112*sot12 + fot23113*sot13;
                result(3,1) = fot23221*sot11 + fot23222*sot12 + fot23223*sot13;
                result(3,2) = fot23331*sot11 + fot23332*sot12 + fot23333*sot13;
                result(3,3) = fot23231*sot11 + fot23232*sot12 + fot23233*sot13;
                result(3,4) = fot23131*sot11 + fot23132*sot12 + fot23133*sot13;
                result(3,5) = fot23121*sot11 + fot23122*sot12 + fot23123*sot13;
                result(3,6) = fot23321*sot11 + fot23322*sot12 + fot23323*sot13;
                result(3,7) = fot23311*sot11 + fot23312*sot12 + fot23313*sot13;
                result(3,8) = fot23211*sot11 + fot23212*sot12 + fot23213*sot13;
                result(4,0) = fot13111*sot11 + fot13112*sot12 + fot13113*sot13;
                result(4,1) = fot13221*sot11 + fot13222*sot12 + fot13223*sot13;
                result(4,2) = fot13331*sot11 + fot13332*sot12 + fot13333*sot13;
                result(4,3) = fot13231*sot11 + fot13232*sot12 + fot13233*sot13;
                result(4,4) = fot13131*sot11 + fot13132*sot12 + fot13133*sot13;
                result(4,5) = fot13121*sot11 + fot13122*sot12 + fot13123*sot13;
                result(4,6) = fot13321*sot11 + fot13322*sot12 + fot13323*sot13;
                result(4,7) = fot13311*sot11 + fot13312*sot12 + fot13313*sot13;
                result(4,8) = fot13211*sot11 + fot13212*sot12 + fot13213*sot13;
                result(5,0) = fot12111*sot11 + fot12112*sot12 + fot12113*sot13;
                result(5,1) = fot12221*sot11 + fot12222*sot12 + fot12223*sot13;
                result(5,2) = fot12331*sot11 + fot12332*sot12 + fot12333*sot13;
                result(5,3) = fot12231*sot11 + fot12232*sot12 + fot12233*sot13;
                result(5,4) = fot12131*sot11 + fot12132*sot12 + fot12133*sot13;
                result(5,5) = fot12121*sot11 + fot12122*sot12 + fot12123*sot13;
                result(5,6) = fot12321*sot11 + fot12322*sot12 + fot12323*sot13;
                result(5,7) = fot12311*sot11 + fot12312*sot12 + fot12313*sot13;
                result(5,8) = fot12211*sot11 + fot12212*sot12 + fot12213*sot13;
                result(6,0) = fot32111*sot11 + fot32112*sot12 + fot32113*sot13;
                result(6,1) = fot32221*sot11 + fot32222*sot12 + fot32223*sot13;
                result(6,2) = fot32331*sot11 + fot32332*sot12 + fot32333*sot13;
                result(6,3) = fot32231*sot11 + fot32232*sot12 + fot32233*sot13;
                result(6,4) = fot32131*sot11 + fot32132*sot12 + fot32133*sot13;
                result(6,5) = fot32121*sot11 + fot32122*sot12 + fot32123*sot13;
                result(6,6) = fot32321*sot11 + fot32322*sot12 + fot32323*sot13;
                result(6,7) = fot32311*sot11 + fot32312*sot12 + fot32313*sot13;
                result(6,8) = fot32211*sot11 + fot32212*sot12 + fot32213*sot13;
                result(7,0) = fot31111*sot11 + fot31112*sot12 + fot31113*sot13;
                result(7,1) = fot31221*sot11 + fot31222*sot12 + fot31223*sot13;
                result(7,2) = fot31331*sot11 + fot31332*sot12 + fot31333*sot13;
                result(7,3) = fot31231*sot11 + fot31232*sot12 + fot31233*sot13;
                result(7,4) = fot31131*sot11 + fot31132*sot12 + fot31133*sot13;
                result(7,5) = fot31121*sot11 + fot31122*sot12 + fot31123*sot13;
                result(7,6) = fot31321*sot11 + fot31322*sot12 + fot31323*sot13;
                result(7,7) = fot31311*sot11 + fot31312*sot12 + fot31313*sot13;
                result(7,8) = fot31211*sot11 + fot31212*sot12 + fot31213*sot13;
                result(8,0) = fot21111*sot11 + fot21112*sot12 + fot21113*sot13;
                result(8,1) = fot21221*sot11 + fot21222*sot12 + fot21223*sot13;
                result(8,2) = fot21331*sot11 + fot21332*sot12 + fot21333*sot13;
                result(8,3) = fot21231*sot11 + fot21232*sot12 + fot21233*sot13;
                result(8,4) = fot21131*sot11 + fot21132*sot12 + fot21133*sot13;
                result(8,5) = fot21121*sot11 + fot21122*sot12 + fot21123*sot13;
                result(8,6) = fot21321*sot11 + fot21322*sot12 + fot21323*sot13;
                result(8,7) = fot21311*sot11 + fot21312*sot12 + fot21313*sot13;
                result(8,8) = fot21211*sot11 + fot21212*sot12 + fot21213*sot13;
                result(9,0) = fot11111*sot21 + fot11112*sot22 + fot11113*sot23;
                result(9,1) = fot11221*sot21 + fot11222*sot22 + fot11223*sot23;
                result(9,2) = fot11331*sot21 + fot11332*sot22 + fot11333*sot23;
                result(9,3) = fot11231*sot21 + fot11232*sot22 + fot11233*sot23;
                result(9,4) = fot11131*sot21 + fot11132*sot22 + fot11133*sot23;
                result(9,5) = fot11121*sot21 + fot11122*sot22 + fot11123*sot23;
                result(9,6) = fot11321*sot21 + fot11322*sot22 + fot11323*sot23;
                result(9,7) = fot11311*sot21 + fot11312*sot22 + fot11313*sot23;
                result(9,8) = fot11211*sot21 + fot11212*sot22 + fot11213*sot23;
                result(10,0) = fot22111*sot21 + fot22112*sot22 + fot22113*sot23;
                result(10,1) = fot22221*sot21 + fot22222*sot22 + fot22223*sot23;
                result(10,2) = fot22331*sot21 + fot22332*sot22 + fot22333*sot23;
                result(10,3) = fot22231*sot21 + fot22232*sot22 + fot22233*sot23;
                result(10,4) = fot22131*sot21 + fot22132*sot22 + fot22133*sot23;
                result(10,5) = fot22121*sot21 + fot22122*sot22 + fot22123*sot23;
                result(10,6) = fot22321*sot21 + fot22322*sot22 + fot22323*sot23;
                result(10,7) = fot22311*sot21 + fot22312*sot22 + fot22313*sot23;
                result(10,8) = fot22211*sot21 + fot22212*sot22 + fot22213*sot23;
                result(11,0) = fot33111*sot21 + fot33112*sot22 + fot33113*sot23;
                result(11,1) = fot33221*sot21 + fot33222*sot22 + fot33223*sot23;
                result(11,2) = fot33331*sot21 + fot33332*sot22 + fot33333*sot23;
                result(11,3) = fot33231*sot21 + fot33232*sot22 + fot33233*sot23;
                result(11,4) = fot33131*sot21 + fot33132*sot22 + fot33133*sot23;
                result(11,5) = fot33121*sot21 + fot33122*sot22 + fot33123*sot23;
                result(11,6) = fot33321*sot21 + fot33322*sot22 + fot33323*sot23;
                result(11,7) = fot33311*sot21 + fot33312*sot22 + fot33313*sot23;
                result(11,8) = fot33211*sot21 + fot33212*sot22 + fot33213*sot23;
                result(12,0) = fot23111*sot21 + fot23112*sot22 + fot23113*sot23;
                result(12,1) = fot23221*sot21 + fot23222*sot22 + fot23223*sot23;
                result(12,2) = fot23331*sot21 + fot23332*sot22 + fot23333*sot23;
                result(12,3) = fot23231*sot21 + fot23232*sot22 + fot23233*sot23;
                result(12,4) = fot23131*sot21 + fot23132*sot22 + fot23133*sot23;
                result(12,5) = fot23121*sot21 + fot23122*sot22 + fot23123*sot23;
                result(12,6) = fot23321*sot21 + fot23322*sot22 + fot23323*sot23;
                result(12,7) = fot23311*sot21 + fot23312*sot22 + fot23313*sot23;
                result(12,8) = fot23211*sot21 + fot23212*sot22 + fot23213*sot23;
                result(13,0) = fot13111*sot21 + fot13112*sot22 + fot13113*sot23;
                result(13,1) = fot13221*sot21 + fot13222*sot22 + fot13223*sot23;
                result(13,2) = fot13331*sot21 + fot13332*sot22 + fot13333*sot23;
                result(13,3) = fot13231*sot21 + fot13232*sot22 + fot13233*sot23;
                result(13,4) = fot13131*sot21 + fot13132*sot22 + fot13133*sot23;
                result(13,5) = fot13121*sot21 + fot13122*sot22 + fot13123*sot23;
                result(13,6) = fot13321*sot21 + fot13322*sot22 + fot13323*sot23;
                result(13,7) = fot13311*sot21 + fot13312*sot22 + fot13313*sot23;
                result(13,8) = fot13211*sot21 + fot13212*sot22 + fot13213*sot23;
                result(14,0) = fot12111*sot21 + fot12112*sot22 + fot12113*sot23;
                result(14,1) = fot12221*sot21 + fot12222*sot22 + fot12223*sot23;
                result(14,2) = fot12331*sot21 + fot12332*sot22 + fot12333*sot23;
                result(14,3) = fot12231*sot21 + fot12232*sot22 + fot12233*sot23;
                result(14,4) = fot12131*sot21 + fot12132*sot22 + fot12133*sot23;
                result(14,5) = fot12121*sot21 + fot12122*sot22 + fot12123*sot23;
                result(14,6) = fot12321*sot21 + fot12322*sot22 + fot12323*sot23;
                result(14,7) = fot12311*sot21 + fot12312*sot22 + fot12313*sot23;
                result(14,8) = fot12211*sot21 + fot12212*sot22 + fot12213*sot23;
                result(15,0) = fot32111*sot21 + fot32112*sot22 + fot32113*sot23;
                result(15,1) = fot32221*sot21 + fot32222*sot22 + fot32223*sot23;
                result(15,2) = fot32331*sot21 + fot32332*sot22 + fot32333*sot23;
                result(15,3) = fot32231*sot21 + fot32232*sot22 + fot32233*sot23;
                result(15,4) = fot32131*sot21 + fot32132*sot22 + fot32133*sot23;
                result(15,5) = fot32121*sot21 + fot32122*sot22 + fot32123*sot23;
                result(15,6) = fot32321*sot21 + fot32322*sot22 + fot32323*sot23;
                result(15,7) = fot32311*sot21 + fot32312*sot22 + fot32313*sot23;
                result(15,8) = fot32211*sot21 + fot32212*sot22 + fot32213*sot23;
                result(16,0) = fot31111*sot21 + fot31112*sot22 + fot31113*sot23;
                result(16,1) = fot31221*sot21 + fot31222*sot22 + fot31223*sot23;
                result(16,2) = fot31331*sot21 + fot31332*sot22 + fot31333*sot23;
                result(16,3) = fot31231*sot21 + fot31232*sot22 + fot31233*sot23;
                result(16,4) = fot31131*sot21 + fot31132*sot22 + fot31133*sot23;
                result(16,5) = fot31121*sot21 + fot31122*sot22 + fot31123*sot23;
                result(16,6) = fot31321*sot21 + fot31322*sot22 + fot31323*sot23;
                result(16,7) = fot31311*sot21 + fot31312*sot22 + fot31313*sot23;
                result(16,8) = fot31211*sot21 + fot31212*sot22 + fot31213*sot23;
                result(17,0) = fot21111*sot21 + fot21112*sot22 + fot21113*sot23;
                result(17,1) = fot21221*sot21 + fot21222*sot22 + fot21223*sot23;
                result(17,2) = fot21331*sot21 + fot21332*sot22 + fot21333*sot23;
                result(17,3) = fot21231*sot21 + fot21232*sot22 + fot21233*sot23;
                result(17,4) = fot21131*sot21 + fot21132*sot22 + fot21133*sot23;
                result(17,5) = fot21121*sot21 + fot21122*sot22 + fot21123*sot23;
                result(17,6) = fot21321*sot21 + fot21322*sot22 + fot21323*sot23;
                result(17,7) = fot21311*sot21 + fot21312*sot22 + fot21313*sot23;
                result(17,8) = fot21211*sot21 + fot21212*sot22 + fot21213*sot23;
                result(18,0) = fot11111*sot31 + fot11112*sot32 + fot11113*sot33;
                result(18,1) = fot11221*sot31 + fot11222*sot32 + fot11223*sot33;
                result(18,2) = fot11331*sot31 + fot11332*sot32 + fot11333*sot33;
                result(18,3) = fot11231*sot31 + fot11232*sot32 + fot11233*sot33;
                result(18,4) = fot11131*sot31 + fot11132*sot32 + fot11133*sot33;
                result(18,5) = fot11121*sot31 + fot11122*sot32 + fot11123*sot33;
                result(18,6) = fot11321*sot31 + fot11322*sot32 + fot11323*sot33;
                result(18,7) = fot11311*sot31 + fot11312*sot32 + fot11313*sot33;
                result(18,8) = fot11211*sot31 + fot11212*sot32 + fot11213*sot33;
                result(19,0) = fot22111*sot31 + fot22112*sot32 + fot22113*sot33;
                result(19,1) = fot22221*sot31 + fot22222*sot32 + fot22223*sot33;
                result(19,2) = fot22331*sot31 + fot22332*sot32 + fot22333*sot33;
                result(19,3) = fot22231*sot31 + fot22232*sot32 + fot22233*sot33;
                result(19,4) = fot22131*sot31 + fot22132*sot32 + fot22133*sot33;
                result(19,5) = fot22121*sot31 + fot22122*sot32 + fot22123*sot33;
                result(19,6) = fot22321*sot31 + fot22322*sot32 + fot22323*sot33;
                result(19,7) = fot22311*sot31 + fot22312*sot32 + fot22313*sot33;
                result(19,8) = fot22211*sot31 + fot22212*sot32 + fot22213*sot33;
                result(20,0) = fot33111*sot31 + fot33112*sot32 + fot33113*sot33;
                result(20,1) = fot33221*sot31 + fot33222*sot32 + fot33223*sot33;
                result(20,2) = fot33331*sot31 + fot33332*sot32 + fot33333*sot33;
                result(20,3) = fot33231*sot31 + fot33232*sot32 + fot33233*sot33;
                result(20,4) = fot33131*sot31 + fot33132*sot32 + fot33133*sot33;
                result(20,5) = fot33121*sot31 + fot33122*sot32 + fot33123*sot33;
                result(20,6) = fot33321*sot31 + fot33322*sot32 + fot33323*sot33;
                result(20,7) = fot33311*sot31 + fot33312*sot32 + fot33313*sot33;
                result(20,8) = fot33211*sot31 + fot33212*sot32 + fot33213*sot33;
                result(21,0) = fot23111*sot31 + fot23112*sot32 + fot23113*sot33;
                result(21,1) = fot23221*sot31 + fot23222*sot32 + fot23223*sot33;
                result(21,2) = fot23331*sot31 + fot23332*sot32 + fot23333*sot33;
                result(21,3) = fot23231*sot31 + fot23232*sot32 + fot23233*sot33;
                result(21,4) = fot23131*sot31 + fot23132*sot32 + fot23133*sot33;
                result(21,5) = fot23121*sot31 + fot23122*sot32 + fot23123*sot33;
                result(21,6) = fot23321*sot31 + fot23322*sot32 + fot23323*sot33;
                result(21,7) = fot23311*sot31 + fot23312*sot32 + fot23313*sot33;
                result(21,8) = fot23211*sot31 + fot23212*sot32 + fot23213*sot33;
                result(22,0) = fot13111*sot31 + fot13112*sot32 + fot13113*sot33;
                result(22,1) = fot13221*sot31 + fot13222*sot32 + fot13223*sot33;
                result(22,2) = fot13331*sot31 + fot13332*sot32 + fot13333*sot33;
                result(22,3) = fot13231*sot31 + fot13232*sot32 + fot13233*sot33;
                result(22,4) = fot13131*sot31 + fot13132*sot32 + fot13133*sot33;
                result(22,5) = fot13121*sot31 + fot13122*sot32 + fot13123*sot33;
                result(22,6) = fot13321*sot31 + fot13322*sot32 + fot13323*sot33;
                result(22,7) = fot13311*sot31 + fot13312*sot32 + fot13313*sot33;
                result(22,8) = fot13211*sot31 + fot13212*sot32 + fot13213*sot33;
                result(23,0) = fot12111*sot31 + fot12112*sot32 + fot12113*sot33;
                result(23,1) = fot12221*sot31 + fot12222*sot32 + fot12223*sot33;
                result(23,2) = fot12331*sot31 + fot12332*sot32 + fot12333*sot33;
                result(23,3) = fot12231*sot31 + fot12232*sot32 + fot12233*sot33;
                result(23,4) = fot12131*sot31 + fot12132*sot32 + fot12133*sot33;
                result(23,5) = fot12121*sot31 + fot12122*sot32 + fot12123*sot33;
                result(23,6) = fot12321*sot31 + fot12322*sot32 + fot12323*sot33;
                result(23,7) = fot12311*sot31 + fot12312*sot32 + fot12313*sot33;
                result(23,8) = fot12211*sot31 + fot12212*sot32 + fot12213*sot33;
                result(24,0) = fot32111*sot31 + fot32112*sot32 + fot32113*sot33;
                result(24,1) = fot32221*sot31 + fot32222*sot32 + fot32223*sot33;
                result(24,2) = fot32331*sot31 + fot32332*sot32 + fot32333*sot33;
                result(24,3) = fot32231*sot31 + fot32232*sot32 + fot32233*sot33;
                result(24,4) = fot32131*sot31 + fot32132*sot32 + fot32133*sot33;
                result(24,5) = fot32121*sot31 + fot32122*sot32 + fot32123*sot33;
                result(24,6) = fot32321*sot31 + fot32322*sot32 + fot32323*sot33;
                result(24,7) = fot32311*sot31 + fot32312*sot32 + fot32313*sot33;
                result(24,8) = fot32211*sot31 + fot32212*sot32 + fot32213*sot33;
                result(25,0) = fot31111*sot31 + fot31112*sot32 + fot31113*sot33;
                result(25,1) = fot31221*sot31 + fot31222*sot32 + fot31223*sot33;
                result(25,2) = fot31331*sot31 + fot31332*sot32 + fot31333*sot33;
                result(25,3) = fot31231*sot31 + fot31232*sot32 + fot31233*sot33;
                result(25,4) = fot31131*sot31 + fot31132*sot32 + fot31133*sot33;
                result(25,5) = fot31121*sot31 + fot31122*sot32 + fot31123*sot33;
                result(25,6) = fot31321*sot31 + fot31322*sot32 + fot31323*sot33;
                result(25,7) = fot31311*sot31 + fot31312*sot32 + fot31313*sot33;
                result(25,8) = fot31211*sot31 + fot31212*sot32 + fot31213*sot33;
                result(26,0) = fot21111*sot31 + fot21112*sot32 + fot21113*sot33;
                result(26,1) = fot21221*sot31 + fot21222*sot32 + fot21223*sot33;
                result(26,2) = fot21331*sot31 + fot21332*sot32 + fot21333*sot33;
                result(26,3) = fot21231*sot31 + fot21232*sot32 + fot21233*sot33;
                result(26,4) = fot21131*sot31 + fot21132*sot32 + fot21133*sot33;
                result(26,5) = fot21121*sot31 + fot21122*sot32 + fot21123*sot33;
                result(26,6) = fot21321*sot31 + fot21322*sot32 + fot21323*sot33;
                result(26,7) = fot21311*sot31 + fot21312*sot32 + fot21313*sot33;
                result(26,8) = fot21211*sot31 + fot21212*sot32 + fot21213*sot33;
        }
        else {
            std::cout << "Error: Index out of range\n";
            assert(1==0); //TODO: Replace with better error handling
        }
        return;
    }
    
    void two_sot_to_fot(const int &swap, const Matrix_3x3 &A, const Matrix_3x3 &B, Matrix_9x9 &C){
        /*!=========================
        |    two_sot_to_fot    |
        ========================
        
        Transform two second order tensors into a fourth order tensor.
        
        i.e.
        
        swap = 0
        C_ijkl = A_ij B_kl
        
        swap = 1
        C_ijkl = A_kj B_il
        
        swap = 2
        C_ijkl = A_il B_kj
        
        */

        int sot_to_voigt_map[3][3] = {{0,5,4},
                                      {8,1,3},
                                      {7,6,2}};

        int Ihat;
        int Jhat;
        
        double tmp1;

        if (swap == 0){
            for (int i=0; i<3; i++){
                for (int j=0; j<3; j++){
                    tmp1 = A(i,j);
                    Ihat = sot_to_voigt_map[i][j];
                    for (int k=0; k<3; k++){
                        for (int l=0; l<3; l++){
                            Jhat = sot_to_voigt_map[k][l];
                            C(Ihat,Jhat) = tmp1*B(k,l);
                        }
                    }
                }
            }
        }
        else if (swap == 1){
            for (int i=0; i<3; i++){
                for (int j=0; j<3; j++){
                    Ihat = sot_to_voigt_map[i][j];
                    for (int k=0; k<3; k++){
                        tmp1 = A(k,j);
                        for (int l=0; l<3; l++){
                            Jhat = sot_to_voigt_map[k][l];
                            C(Ihat,Jhat) = tmp1*B(i,l);
                        }
                    }
                }
            }
        }
        else if (swap == 2){
            for (int i=0; i<3; i++){
                for (int j=0; j<3; j++){
                    Ihat = sot_to_voigt_map[i][j];
                    for (int k=0; k<3; k++){
                        tmp1 = B(k,j);
                        for (int l=0; l<3; l++){
                            Jhat = sot_to_voigt_map[k][l];
                            C(Ihat,Jhat) = A(i,l)*tmp1;
                        }
                    }
                }
            }
        }
        
        return;
    }
    
    void compute_dRCGdF(const Matrix_3x3 &F, SpMat &dRCGdF){
        /*!=====================
        |    compute_dRCGdF    |
        ========================
        
        Compute the derivative of the right 
        cauchy green deformation tensor w.r.t. F.
        
        */
        
        std::vector<T> tripletList;
        tripletList.reserve(45);
        
        //Extract F
        double F11 = F(0,0);
        double F12 = F(0,1);
        double F13 = F(0,2);
        double F21 = F(1,0);
        double F22 = F(1,1);
        double F23 = F(1,2);
        double F31 = F(2,0);
        double F32 = F(2,1);
        double F33 = F(2,2);

        //Assemble dRCGdF
        tripletList.push_back(T(0,0,2*F11));
        tripletList.push_back(T(0,7,2*F31));
        tripletList.push_back(T(0,8,2*F21));
        tripletList.push_back(T(1,1,2*F22));
        tripletList.push_back(T(1,5,2*F12));
        tripletList.push_back(T(1,6,2*F32));
        tripletList.push_back(T(2,2,2*F33));
        tripletList.push_back(T(2,3,2*F23));
        tripletList.push_back(T(2,4,2*F13));
        tripletList.push_back(T(3,1,F23));
        tripletList.push_back(T(3,2,F32));
        tripletList.push_back(T(3,3,F22));
        tripletList.push_back(T(3,4,F12));
        tripletList.push_back(T(3,5,F13));
        tripletList.push_back(T(3,6,F33));
        tripletList.push_back(T(4,0,F13));
        tripletList.push_back(T(4,2,F31));
        tripletList.push_back(T(4,3,F21));
        tripletList.push_back(T(4,4,F11));
        tripletList.push_back(T(4,7,F33));
        tripletList.push_back(T(4,8,F23));
        tripletList.push_back(T(5,0,F12));
        tripletList.push_back(T(5,1,F21));
        tripletList.push_back(T(5,5,F11));
        tripletList.push_back(T(5,6,F31));
        tripletList.push_back(T(5,7,F32));
        tripletList.push_back(T(5,8,F22));
        tripletList.push_back(T(6,1,F23));
        tripletList.push_back(T(6,2,F32));
        tripletList.push_back(T(6,3,F22));
        tripletList.push_back(T(6,4,F12));
        tripletList.push_back(T(6,5,F13));
        tripletList.push_back(T(6,6,F33));
        tripletList.push_back(T(7,0,F13));
        tripletList.push_back(T(7,2,F31));
        tripletList.push_back(T(7,3,F21));
        tripletList.push_back(T(7,4,F11));
        tripletList.push_back(T(7,7,F33));
        tripletList.push_back(T(7,8,F23));
        tripletList.push_back(T(8,0,F12));
        tripletList.push_back(T(8,1,F21));
        tripletList.push_back(T(8,5,F11));
        tripletList.push_back(T(8,6,F31));
        tripletList.push_back(T(8,7,F32));
        tripletList.push_back(T(8,8,F22));      
        
        dRCGdF.setFromTriplets(tripletList.begin(), tripletList.end());        
        
        return;
    }
    
    void compute_dRCGdF(const Matrix_3x3 &F, Matrix_9x9 &dRCGdF){
        /*!=====================
        |    compute_dRCGdF    |
        ========================
        
        Compute the derivative of the right 
        cauchy green deformation tensor w.r.t. F.
        
        */

        dRCGdF = Matrix_9x9::Zero();

        dRCGdF( 0, 0) = 2*F(0,0);
        dRCGdF( 0, 7) = 2*F(2,0);
        dRCGdF( 0, 8) = 2*F(1,0);
        dRCGdF( 1, 1) = 2*F(1,1);
        dRCGdF( 1, 5) = 2*F(0,1);
        dRCGdF( 1, 6) = 2*F(2,1);
        dRCGdF( 2, 2) = 2*F(2,2);
        dRCGdF( 2, 3) = 2*F(1,2);
        dRCGdF( 2, 4) = 2*F(0,2);
        dRCGdF( 3, 1) = F(1,2);
        dRCGdF( 3, 2) = F(2,1);
        dRCGdF( 3, 3) = F(1,1);
        dRCGdF( 3, 4) = F(0,1);
        dRCGdF( 3, 5) = F(0,2);
        dRCGdF( 3, 6) = F(2,2);
        dRCGdF( 4, 0) = F(0,2);
        dRCGdF( 4, 2) = F(2,0);
        dRCGdF( 4, 3) = F(1,0);
        dRCGdF( 4, 4) = F(0,0);
        dRCGdF( 4, 7) = F(2,2);
        dRCGdF( 4, 8) = F(1,2);
        dRCGdF( 5, 0) = F(0,1);
        dRCGdF( 5, 1) = F(1,0);
        dRCGdF( 5, 5) = F(0,0);
        dRCGdF( 5, 6) = F(2,0);
        dRCGdF( 5, 7) = F(2,1);
        dRCGdF( 5, 8) = F(1,1);
        dRCGdF( 6, 1) = F(1,2);
        dRCGdF( 6, 2) = F(2,1);
        dRCGdF( 6, 3) = F(1,1);
        dRCGdF( 6, 4) = F(0,1);
        dRCGdF( 6, 5) = F(0,2);
        dRCGdF( 6, 6) = F(2,2);
        dRCGdF( 7, 0) = F(0,2);
        dRCGdF( 7, 2) = F(2,0);
        dRCGdF( 7, 3) = F(1,0);
        dRCGdF( 7, 4) = F(0,0);
        dRCGdF( 7, 7) = F(2,2);
        dRCGdF( 7, 8) = F(1,2);
        dRCGdF( 8, 0) = F(0,1);
        dRCGdF( 8, 1) = F(1,0);
        dRCGdF( 8, 5) = F(0,0);
        dRCGdF( 8, 6) = F(2,0);
        dRCGdF( 8, 7) = F(2,1);
        dRCGdF( 8, 8) = F(1,1);

        return;
    }
    void compute_dPsidF(const Matrix_3x3 &chi, SpMat &dPsidF){
        /*!========================
        |    compute_dPsidF    |
        ========================
        
        Compute the derivative of psi w.r.t. F
        
        */
        
        std::vector<T> tripletList;
        tripletList.reserve(27);

        //Extract chi
        double chi11 = chi(0,0);
        double chi12 = chi(0,1);
        double chi13 = chi(0,2);
        double chi21 = chi(1,0);
        double chi22 = chi(1,1);
        double chi23 = chi(1,2);
        double chi31 = chi(2,0);
        double chi32 = chi(2,1);
        double chi33 = chi(2,2);

        //Assemble dPsidF
        tripletList.push_back(T(0,0,chi11));
        tripletList.push_back(T(0,7,chi31));
        tripletList.push_back(T(0,8,chi21));
        tripletList.push_back(T(1,1,chi22));
        tripletList.push_back(T(1,5,chi12));
        tripletList.push_back(T(1,6,chi32));
        tripletList.push_back(T(2,2,chi33));
        tripletList.push_back(T(2,3,chi23));
        tripletList.push_back(T(2,4,chi13));
        tripletList.push_back(T(3,1,chi23));
        tripletList.push_back(T(3,5,chi13));
        tripletList.push_back(T(3,6,chi33));
        tripletList.push_back(T(4,0,chi13));
        tripletList.push_back(T(4,7,chi33));
        tripletList.push_back(T(4,8,chi23));
        tripletList.push_back(T(5,0,chi12));
        tripletList.push_back(T(5,7,chi32));
        tripletList.push_back(T(5,8,chi22));
        tripletList.push_back(T(6,2,chi32));
        tripletList.push_back(T(6,3,chi22));
        tripletList.push_back(T(6,4,chi12));
        tripletList.push_back(T(7,2,chi31));
        tripletList.push_back(T(7,3,chi21));
        tripletList.push_back(T(7,4,chi11));
        tripletList.push_back(T(8,1,chi21));
        tripletList.push_back(T(8,5,chi11));
        tripletList.push_back(T(8,6,chi31));
        
        dPsidF.setFromTriplets(tripletList.begin(), tripletList.end());        
        
        return;
    }
    
    void compute_dPsidF(const Matrix_3x3 &chi, Matrix_9x9 &dPsidF){
        /*!========================
        |    compute_dPsidF    |
        ========================
        
        Compute the derivative of psi w.r.t. F
        
        */

        dPsidF = Matrix_9x9::Zero();

        dPsidF( 0, 0) = chi(0,0);
        dPsidF( 0, 7) = chi(2,0);
        dPsidF( 0, 8) = chi(1,0);
        dPsidF( 1, 1) = chi(1,1);
        dPsidF( 1, 5) = chi(0,1);
        dPsidF( 1, 6) = chi(2,1);
        dPsidF( 2, 2) = chi(2,2);
        dPsidF( 2, 3) = chi(1,2);
        dPsidF( 2, 4) = chi(0,2);
        dPsidF( 3, 1) = chi(1,2);
        dPsidF( 3, 5) = chi(0,2);
        dPsidF( 3, 6) = chi(2,2);
        dPsidF( 4, 0) = chi(0,2);
        dPsidF( 4, 7) = chi(2,2);
        dPsidF( 4, 8) = chi(1,2);
        dPsidF( 5, 0) = chi(0,1);
        dPsidF( 5, 7) = chi(2,1);
        dPsidF( 5, 8) = chi(1,1);
        dPsidF( 6, 2) = chi(2,1);
        dPsidF( 6, 3) = chi(1,1);
        dPsidF( 6, 4) = chi(0,1);
        dPsidF( 7, 2) = chi(2,0);
        dPsidF( 7, 3) = chi(1,0);
        dPsidF( 7, 4) = chi(0,0);
        dPsidF( 8, 1) = chi(1,0);
        dPsidF( 8, 5) = chi(0,0);
        dPsidF( 8, 6) = chi(2,0);

        return;
    }

    void compute_dGammadF(const Vector_27 &grad_chi, SpMat &dGammadF){
        /*!==========================
        |    compute_dGammadF    |
        ==========================
        
        Compute the derivative of gamma w.r.t. F.
        
        */
        
        //Initialize the tripletList
        std::vector<T> tripletList;
        tripletList.reserve(81);

        //Extract grad_chi
        double grad_chi111 = grad_chi(0);
        double grad_chi122 = grad_chi(1);
        double grad_chi133 = grad_chi(2);
        double grad_chi123 = grad_chi(3);
        double grad_chi113 = grad_chi(4);
        double grad_chi112 = grad_chi(5);
        double grad_chi132 = grad_chi(6);
        double grad_chi131 = grad_chi(7);
        double grad_chi121 = grad_chi(8);
        double grad_chi211 = grad_chi(9);
        double grad_chi222 = grad_chi(10);
        double grad_chi233 = grad_chi(11);
        double grad_chi223 = grad_chi(12);
        double grad_chi213 = grad_chi(13);
        double grad_chi212 = grad_chi(14);
        double grad_chi232 = grad_chi(15);
        double grad_chi231 = grad_chi(16);
        double grad_chi221 = grad_chi(17);
        double grad_chi311 = grad_chi(18);
        double grad_chi322 = grad_chi(19);
        double grad_chi333 = grad_chi(20);
        double grad_chi323 = grad_chi(21);
        double grad_chi313 = grad_chi(22);
        double grad_chi312 = grad_chi(23);
        double grad_chi332 = grad_chi(24);
        double grad_chi331 = grad_chi(25);
        double grad_chi321 = grad_chi(26);

         //Assemble dGammadF
        tripletList.push_back(T(0,0,grad_chi111));
        tripletList.push_back(T(0,7,grad_chi311));
        tripletList.push_back(T(0,8,grad_chi211));
        tripletList.push_back(T(1,0,grad_chi122));
        tripletList.push_back(T(1,7,grad_chi322));
        tripletList.push_back(T(1,8,grad_chi222));
        tripletList.push_back(T(2,0,grad_chi133));
        tripletList.push_back(T(2,7,grad_chi333));
        tripletList.push_back(T(2,8,grad_chi233));
        tripletList.push_back(T(3,0,grad_chi123));
        tripletList.push_back(T(3,7,grad_chi323));
        tripletList.push_back(T(3,8,grad_chi223));
        tripletList.push_back(T(4,0,grad_chi113));
        tripletList.push_back(T(4,7,grad_chi313));
        tripletList.push_back(T(4,8,grad_chi213));
        tripletList.push_back(T(5,0,grad_chi112));
        tripletList.push_back(T(5,7,grad_chi312));
        tripletList.push_back(T(5,8,grad_chi212));
        tripletList.push_back(T(6,0,grad_chi132));
        tripletList.push_back(T(6,7,grad_chi332));
        tripletList.push_back(T(6,8,grad_chi232));
        tripletList.push_back(T(7,0,grad_chi131));
        tripletList.push_back(T(7,7,grad_chi331));
        tripletList.push_back(T(7,8,grad_chi231));
        tripletList.push_back(T(8,0,grad_chi121));
        tripletList.push_back(T(8,7,grad_chi321));
        tripletList.push_back(T(8,8,grad_chi221));
        tripletList.push_back(T(9,1,grad_chi211));
        tripletList.push_back(T(9,5,grad_chi111));
        tripletList.push_back(T(9,6,grad_chi311));
        tripletList.push_back(T(10,1,grad_chi222));
        tripletList.push_back(T(10,5,grad_chi122));
        tripletList.push_back(T(10,6,grad_chi322));
        tripletList.push_back(T(11,1,grad_chi233));
        tripletList.push_back(T(11,5,grad_chi133));
        tripletList.push_back(T(11,6,grad_chi333));
        tripletList.push_back(T(12,1,grad_chi223));
        tripletList.push_back(T(12,5,grad_chi123));
        tripletList.push_back(T(12,6,grad_chi323));
        tripletList.push_back(T(13,1,grad_chi213));
        tripletList.push_back(T(13,5,grad_chi113));
        tripletList.push_back(T(13,6,grad_chi313));
        tripletList.push_back(T(14,1,grad_chi212));
        tripletList.push_back(T(14,5,grad_chi112));
        tripletList.push_back(T(14,6,grad_chi312));
        tripletList.push_back(T(15,1,grad_chi232));
        tripletList.push_back(T(15,5,grad_chi132));
        tripletList.push_back(T(15,6,grad_chi332));
        tripletList.push_back(T(16,1,grad_chi231));
        tripletList.push_back(T(16,5,grad_chi131));
        tripletList.push_back(T(16,6,grad_chi331));
        tripletList.push_back(T(17,1,grad_chi221));
        tripletList.push_back(T(17,5,grad_chi121));
        tripletList.push_back(T(17,6,grad_chi321));
        tripletList.push_back(T(18,2,grad_chi311));
        tripletList.push_back(T(18,3,grad_chi211));
        tripletList.push_back(T(18,4,grad_chi111));
        tripletList.push_back(T(19,2,grad_chi322));
        tripletList.push_back(T(19,3,grad_chi222));
        tripletList.push_back(T(19,4,grad_chi122));
        tripletList.push_back(T(20,2,grad_chi333));
        tripletList.push_back(T(20,3,grad_chi233));
        tripletList.push_back(T(20,4,grad_chi133));
        tripletList.push_back(T(21,2,grad_chi323));
        tripletList.push_back(T(21,3,grad_chi223));
        tripletList.push_back(T(21,4,grad_chi123));
        tripletList.push_back(T(22,2,grad_chi313));
        tripletList.push_back(T(22,3,grad_chi213));
        tripletList.push_back(T(22,4,grad_chi113));
        tripletList.push_back(T(23,2,grad_chi312));
        tripletList.push_back(T(23,3,grad_chi212));
        tripletList.push_back(T(23,4,grad_chi112));
        tripletList.push_back(T(24,2,grad_chi332));
        tripletList.push_back(T(24,3,grad_chi232));
        tripletList.push_back(T(24,4,grad_chi132));
        tripletList.push_back(T(25,2,grad_chi331));
        tripletList.push_back(T(25,3,grad_chi231));
        tripletList.push_back(T(25,4,grad_chi131));
        tripletList.push_back(T(26,2,grad_chi321));
        tripletList.push_back(T(26,3,grad_chi221));
        tripletList.push_back(T(26,4,grad_chi121));
        
        dGammadF.setFromTriplets(tripletList.begin(), tripletList.end());
        return;
    }


    void compute_dGammadF(const Vector_27 &grad_chi, Matrix_27x9 &dGammadF){
        /*!==========================
        |    compute_dGammadF    |
        ==========================
        
        Compute the derivative of gamma w.r.t. F.
        
        */

        dGammadF = Matrix_27x9::Zero();

        dGammadF(0,0) = grad_chi(0,0);
        dGammadF(0,7) = grad_chi(18,0);
        dGammadF(0,8) = grad_chi(9,0);
        dGammadF(1,0) = grad_chi(1,0);
        dGammadF(1,7) = grad_chi(19,0);
        dGammadF(1,8) = grad_chi(10,0);
        dGammadF(2,0) = grad_chi(2,0);
        dGammadF(2,7) = grad_chi(20,0);
        dGammadF(2,8) = grad_chi(11,0);
        dGammadF(3,0) = grad_chi(3,0);
        dGammadF(3,7) = grad_chi(21,0);
        dGammadF(3,8) = grad_chi(12,0);
        dGammadF(4,0) = grad_chi(4,0);
        dGammadF(4,7) = grad_chi(22,0);
        dGammadF(4,8) = grad_chi(13,0);
        dGammadF(5,0) = grad_chi(5,0);
        dGammadF(5,7) = grad_chi(23,0);
        dGammadF(5,8) = grad_chi(14,0);
        dGammadF(6,0) = grad_chi(6,0);
        dGammadF(6,7) = grad_chi(24,0);
        dGammadF(6,8) = grad_chi(15,0);
        dGammadF(7,0) = grad_chi(7,0);
        dGammadF(7,7) = grad_chi(25,0);
        dGammadF(7,8) = grad_chi(16,0);
        dGammadF(8,0) = grad_chi(8,0);
        dGammadF(8,7) = grad_chi(26,0);
        dGammadF(8,8) = grad_chi(17,0);
        dGammadF(9,1) = grad_chi(9,0);
        dGammadF(9,5) = grad_chi(0,0);
        dGammadF(9,6) = grad_chi(18,0);
        dGammadF(10,1) = grad_chi(10,0);
        dGammadF(10,5) = grad_chi(1,0);
        dGammadF(10,6) = grad_chi(19,0);
        dGammadF(11,1) = grad_chi(11,0);
        dGammadF(11,5) = grad_chi(2,0);
        dGammadF(11,6) = grad_chi(20,0);
        dGammadF(12,1) = grad_chi(12,0);
        dGammadF(12,5) = grad_chi(3,0);
        dGammadF(12,6) = grad_chi(21,0);
        dGammadF(13,1) = grad_chi(13,0);
        dGammadF(13,5) = grad_chi(4,0);
        dGammadF(13,6) = grad_chi(22,0);
        dGammadF(14,1) = grad_chi(14,0);
        dGammadF(14,5) = grad_chi(5,0);
        dGammadF(14,6) = grad_chi(23,0);
        dGammadF(15,1) = grad_chi(15,0);
        dGammadF(15,5) = grad_chi(6,0);
        dGammadF(15,6) = grad_chi(24,0);
        dGammadF(16,1) = grad_chi(16,0);
        dGammadF(16,5) = grad_chi(7,0);
        dGammadF(16,6) = grad_chi(25,0);
        dGammadF(17,1) = grad_chi(17,0);
        dGammadF(17,5) = grad_chi(8,0);
        dGammadF(17,6) = grad_chi(26,0);
        dGammadF(18,2) = grad_chi(18,0);
        dGammadF(18,3) = grad_chi(9,0);
        dGammadF(18,4) = grad_chi(0,0);
        dGammadF(19,2) = grad_chi(19,0);
        dGammadF(19,3) = grad_chi(10,0);
        dGammadF(19,4) = grad_chi(1,0);
        dGammadF(20,2) = grad_chi(20,0);
        dGammadF(20,3) = grad_chi(11,0);
        dGammadF(20,4) = grad_chi(2,0);
        dGammadF(21,2) = grad_chi(21,0);
        dGammadF(21,3) = grad_chi(12,0);
        dGammadF(21,4) = grad_chi(3,0);
        dGammadF(22,2) = grad_chi(22,0);
        dGammadF(22,3) = grad_chi(13,0);
        dGammadF(22,4) = grad_chi(4,0);
        dGammadF(23,2) = grad_chi(23,0);
        dGammadF(23,3) = grad_chi(14,0);
        dGammadF(23,4) = grad_chi(5,0);
        dGammadF(24,2) = grad_chi(24,0);
        dGammadF(24,3) = grad_chi(15,0);
        dGammadF(24,4) = grad_chi(6,0);
        dGammadF(25,2) = grad_chi(25,0);
        dGammadF(25,3) = grad_chi(16,0);
        dGammadF(25,4) = grad_chi(7,0);
        dGammadF(26,2) = grad_chi(26,0);
        dGammadF(26,3) = grad_chi(17,0);
        dGammadF(26,4) = grad_chi(8,0);        

        return;
    }
    
    void compute_dPsidchi(const Matrix_3x3 &F, SpMat &dPsidchi){
        /*!==========================
        |    compute_dPsidchi    |
        ==========================
        
        Compute the derivative of Psi with respect to chi.
        
        */
        
        //Initialize the tripletList
        std::vector<T> tripletList;
        tripletList.reserve(27);

        //Extract F
        double F11 = F(0,0);
        double F12 = F(0,1);
        double F13 = F(0,2);
        double F21 = F(1,0);
        double F22 = F(1,1);
        double F23 = F(1,2);
        double F31 = F(2,0);
        double F32 = F(2,1);
        double F33 = F(2,2);

        //Assemble dPsidchi
        tripletList.push_back(T(0,0,F11));
        tripletList.push_back(T(0,7,F31));
        tripletList.push_back(T(0,8,F21));
        tripletList.push_back(T(1,1,F22));
        tripletList.push_back(T(1,5,F12));
        tripletList.push_back(T(1,6,F32));
        tripletList.push_back(T(2,2,F33));
        tripletList.push_back(T(2,3,F23));
        tripletList.push_back(T(2,4,F13));
        tripletList.push_back(T(3,2,F32));
        tripletList.push_back(T(3,3,F22));
        tripletList.push_back(T(3,4,F12));
        tripletList.push_back(T(4,2,F31));
        tripletList.push_back(T(4,3,F21));
        tripletList.push_back(T(4,4,F11));
        tripletList.push_back(T(5,1,F21));
        tripletList.push_back(T(5,5,F11));
        tripletList.push_back(T(5,6,F31));
        tripletList.push_back(T(6,1,F23));
        tripletList.push_back(T(6,5,F13));
        tripletList.push_back(T(6,6,F33));
        tripletList.push_back(T(7,0,F13));
        tripletList.push_back(T(7,7,F33));
        tripletList.push_back(T(7,8,F23));
        tripletList.push_back(T(8,0,F12));
        tripletList.push_back(T(8,7,F32));
        tripletList.push_back(T(8,8,F22));
        
        dPsidchi.setFromTriplets(tripletList.begin(), tripletList.end());
        return;
    }
    
    void compute_dPsidchi(const Matrix_3x3 &F, Matrix_9x9 &dPsidchi){
        /*!==========================
        |    compute_dPsidchi    |
        ==========================
        
        Compute the derivative of Psi with respect to chi.
        
        */

        dPsidchi = Matrix_9x9::Zero();

        dPsidchi(0,0) = F(0,0);
        dPsidchi(0,7) = F(2,0);
        dPsidchi(0,8) = F(1,0);
        dPsidchi(1,1) = F(1,1);
        dPsidchi(1,5) = F(0,1);
        dPsidchi(1,6) = F(2,1);
        dPsidchi(2,2) = F(2,2);
        dPsidchi(2,3) = F(1,2);
        dPsidchi(2,4) = F(0,2);
        dPsidchi(3,2) = F(2,1);
        dPsidchi(3,3) = F(1,1);
        dPsidchi(3,4) = F(0,1);
        dPsidchi(4,2) = F(2,0);
        dPsidchi(4,3) = F(1,0);
        dPsidchi(4,4) = F(0,0);
        dPsidchi(5,1) = F(1,0);
        dPsidchi(5,5) = F(0,0);
        dPsidchi(5,6) = F(2,0);
        dPsidchi(6,1) = F(1,2);
        dPsidchi(6,5) = F(0,2);
        dPsidchi(6,6) = F(2,2);
        dPsidchi(7,0) = F(0,2);
        dPsidchi(7,7) = F(2,2);
        dPsidchi(7,8) = F(1,2);
        dPsidchi(8,0) = F(0,1);
        dPsidchi(8,7) = F(2,1);
        dPsidchi(8,8) = F(1,1);

        return;
    }

    void compute_dGammadgrad_chi(const Matrix_3x3 &F, SpMat &dGammadgrad_chi){
        /*!=================================
        |    compute_dGammadgrad_chi    |
        =================================
        
        Computes the gradient of gamma w.r.t. the gradient 
        of chi.
        
        NOTE: The gradient of chi is assumed to be in the reference
              configuration. This means Gamma is defined as
              
              Gamma_IJK = F_iI chi_iJ,K
        */
        
        //Initialize the tripletList
        std::vector<T> tripletList;
        tripletList.reserve(81);

        //Extract F
        double F11 = F(0,0);
        double F12 = F(0,1);
        double F13 = F(0,2);
        double F21 = F(1,0);
        double F22 = F(1,1);
        double F23 = F(1,2);
        double F31 = F(2,0);
        double F32 = F(2,1);
        double F33 = F(2,2);

        //Assemble dGammadgrad_chi
        tripletList.push_back(T(0,0,F11));
        tripletList.push_back(T(0,9,F21));
        tripletList.push_back(T(0,18,F31));
        tripletList.push_back(T(1,1,F11));
        tripletList.push_back(T(1,10,F21));
        tripletList.push_back(T(1,19,F31));
        tripletList.push_back(T(2,2,F11));
        tripletList.push_back(T(2,11,F21));
        tripletList.push_back(T(2,20,F31));
        tripletList.push_back(T(3,3,F11));
        tripletList.push_back(T(3,12,F21));
        tripletList.push_back(T(3,21,F31));
        tripletList.push_back(T(4,4,F11));
        tripletList.push_back(T(4,13,F21));
        tripletList.push_back(T(4,22,F31));
        tripletList.push_back(T(5,5,F11));
        tripletList.push_back(T(5,14,F21));
        tripletList.push_back(T(5,23,F31));
        tripletList.push_back(T(6,6,F11));
        tripletList.push_back(T(6,15,F21));
        tripletList.push_back(T(6,24,F31));
        tripletList.push_back(T(7,7,F11));
        tripletList.push_back(T(7,16,F21));
        tripletList.push_back(T(7,25,F31));
        tripletList.push_back(T(8,8,F11));
        tripletList.push_back(T(8,17,F21));
        tripletList.push_back(T(8,26,F31));
        tripletList.push_back(T(9,0,F12));
        tripletList.push_back(T(9,9,F22));
        tripletList.push_back(T(9,18,F32));
        tripletList.push_back(T(10,1,F12));
        tripletList.push_back(T(10,10,F22));
        tripletList.push_back(T(10,19,F32));
        tripletList.push_back(T(11,2,F12));
        tripletList.push_back(T(11,11,F22));
        tripletList.push_back(T(11,20,F32));
        tripletList.push_back(T(12,3,F12));
        tripletList.push_back(T(12,12,F22));
        tripletList.push_back(T(12,21,F32));
        tripletList.push_back(T(13,4,F12));
        tripletList.push_back(T(13,13,F22));
        tripletList.push_back(T(13,22,F32));
        tripletList.push_back(T(14,5,F12));
        tripletList.push_back(T(14,14,F22));
        tripletList.push_back(T(14,23,F32));
        tripletList.push_back(T(15,6,F12));
        tripletList.push_back(T(15,15,F22));
        tripletList.push_back(T(15,24,F32));
        tripletList.push_back(T(16,7,F12));
        tripletList.push_back(T(16,16,F22));
        tripletList.push_back(T(16,25,F32));
        tripletList.push_back(T(17,8,F12));
        tripletList.push_back(T(17,17,F22));
        tripletList.push_back(T(17,26,F32));
        tripletList.push_back(T(18,0,F13));
        tripletList.push_back(T(18,9,F23));
        tripletList.push_back(T(18,18,F33));
        tripletList.push_back(T(19,1,F13));
        tripletList.push_back(T(19,10,F23));
        tripletList.push_back(T(19,19,F33));
        tripletList.push_back(T(20,2,F13));
        tripletList.push_back(T(20,11,F23));
        tripletList.push_back(T(20,20,F33));
        tripletList.push_back(T(21,3,F13));
        tripletList.push_back(T(21,12,F23));
        tripletList.push_back(T(21,21,F33));
        tripletList.push_back(T(22,4,F13));
        tripletList.push_back(T(22,13,F23));
        tripletList.push_back(T(22,22,F33));
        tripletList.push_back(T(23,5,F13));
        tripletList.push_back(T(23,14,F23));
        tripletList.push_back(T(23,23,F33));
        tripletList.push_back(T(24,6,F13));
        tripletList.push_back(T(24,15,F23));
        tripletList.push_back(T(24,24,F33));
        tripletList.push_back(T(25,7,F13));
        tripletList.push_back(T(25,16,F23));
        tripletList.push_back(T(25,25,F33));
        tripletList.push_back(T(26,8,F13));
        tripletList.push_back(T(26,17,F23));
        tripletList.push_back(T(26,26,F33));
        
        dGammadgrad_chi.setFromTriplets(tripletList.begin(), tripletList.end());
        return;
    }
    
    void compute_dGammadgrad_chi(const Matrix_3x3 &F, Matrix_27x27 &dGammadgrad_chi){
        /*!=================================
        |    compute_dGammadgrad_chi    |
        =================================
        
        Computes the gradient of gamma w.r.t. the gradient 
        of chi.
        
        NOTE: The gradient of chi is assumed to be in the reference
              configuration. This means Gamma is defined as
              
              Gamma_IJK = F_iI chi_iJ,K
        */

        dGammadgrad_chi = Matrix_27x27::Zero();

        dGammadgrad_chi(0,0) = F(0,0);
        dGammadgrad_chi(0,9) = F(1,0);
        dGammadgrad_chi(0,18) = F(2,0);
        dGammadgrad_chi(1,1) = F(0,0);
        dGammadgrad_chi(1,10) = F(1,0);
        dGammadgrad_chi(1,19) = F(2,0);
        dGammadgrad_chi(2,2) = F(0,0);
        dGammadgrad_chi(2,11) = F(1,0);
        dGammadgrad_chi(2,20) = F(2,0);
        dGammadgrad_chi(3,3) = F(0,0);
        dGammadgrad_chi(3,12) = F(1,0);
        dGammadgrad_chi(3,21) = F(2,0);
        dGammadgrad_chi(4,4) = F(0,0);
        dGammadgrad_chi(4,13) = F(1,0);
        dGammadgrad_chi(4,22) = F(2,0);
        dGammadgrad_chi(5,5) = F(0,0);
        dGammadgrad_chi(5,14) = F(1,0);
        dGammadgrad_chi(5,23) = F(2,0);
        dGammadgrad_chi(6,6) = F(0,0);
        dGammadgrad_chi(6,15) = F(1,0);
        dGammadgrad_chi(6,24) = F(2,0);
        dGammadgrad_chi(7,7) = F(0,0);
        dGammadgrad_chi(7,16) = F(1,0);
        dGammadgrad_chi(7,25) = F(2,0);
        dGammadgrad_chi(8,8) = F(0,0);
        dGammadgrad_chi(8,17) = F(1,0);
        dGammadgrad_chi(8,26) = F(2,0);
        dGammadgrad_chi(9,0) = F(0,1);
        dGammadgrad_chi(9,9) = F(1,1);
        dGammadgrad_chi(9,18) = F(2,1);
        dGammadgrad_chi(10,1) = F(0,1);
        dGammadgrad_chi(10,10) = F(1,1);
        dGammadgrad_chi(10,19) = F(2,1);
        dGammadgrad_chi(11,2) = F(0,1);
        dGammadgrad_chi(11,11) = F(1,1);
        dGammadgrad_chi(11,20) = F(2,1);
        dGammadgrad_chi(12,3) = F(0,1);
        dGammadgrad_chi(12,12) = F(1,1);
        dGammadgrad_chi(12,21) = F(2,1);
        dGammadgrad_chi(13,4) = F(0,1);
        dGammadgrad_chi(13,13) = F(1,1);
        dGammadgrad_chi(13,22) = F(2,1);
        dGammadgrad_chi(14,5) = F(0,1);
        dGammadgrad_chi(14,14) = F(1,1);
        dGammadgrad_chi(14,23) = F(2,1);
        dGammadgrad_chi(15,6) = F(0,1);
        dGammadgrad_chi(15,15) = F(1,1);
        dGammadgrad_chi(15,24) = F(2,1);
        dGammadgrad_chi(16,7) = F(0,1);
        dGammadgrad_chi(16,16) = F(1,1);
        dGammadgrad_chi(16,25) = F(2,1);
        dGammadgrad_chi(17,8) = F(0,1);
        dGammadgrad_chi(17,17) = F(1,1);
        dGammadgrad_chi(17,26) = F(2,1);
        dGammadgrad_chi(18,0) = F(0,2);
        dGammadgrad_chi(18,9) = F(1,2);
        dGammadgrad_chi(18,18) = F(2,2);
        dGammadgrad_chi(19,1) = F(0,2);
        dGammadgrad_chi(19,10) = F(1,2);
        dGammadgrad_chi(19,19) = F(2,2);
        dGammadgrad_chi(20,2) = F(0,2);
        dGammadgrad_chi(20,11) = F(1,2);
        dGammadgrad_chi(20,20) = F(2,2);
        dGammadgrad_chi(21,3) = F(0,2);
        dGammadgrad_chi(21,12) = F(1,2);
        dGammadgrad_chi(21,21) = F(2,2);
        dGammadgrad_chi(22,4) = F(0,2);
        dGammadgrad_chi(22,13) = F(1,2);
        dGammadgrad_chi(22,22) = F(2,2);
        dGammadgrad_chi(23,5) = F(0,2);
        dGammadgrad_chi(23,14) = F(1,2);
        dGammadgrad_chi(23,23) = F(2,2);
        dGammadgrad_chi(24,6) = F(0,2);
        dGammadgrad_chi(24,15) = F(1,2);
        dGammadgrad_chi(24,24) = F(2,2);
        dGammadgrad_chi(25,7) = F(0,2);
        dGammadgrad_chi(25,16) = F(1,2);
        dGammadgrad_chi(25,25) = F(2,2);
        dGammadgrad_chi(26,8) = F(0,2);
        dGammadgrad_chi(26,17) = F(1,2);
        dGammadgrad_chi(26,26) = F(2,2);

        return;
    }

    void compute_dAinvdA(const Matrix_3x3 &Ainv, Matrix_9x9 &dAinvdA){
        /*!=========================
        |    compute_dAinvdA    |
        =========================
        
        Compute the derivative of the inverse of a second order tensor w.r.t. the tensor.
        
        */

        int sot_to_voigt_map[3][3] = {{0,5,4},
                                      {8,1,3},
                                      {7,6,2}};

        int Ihat;
        int Jhat;
        
        double tmp1;
        
        for (int i=0; i<3; i++){
            for (int j=0; j<3; j++){
                Ihat = sot_to_voigt_map[i][j];
                for (int k=0; k<3; k++){
                    tmp1 = Ainv(i,k);
                    for (int l=0; l<3; l++){
                        Jhat = sot_to_voigt_map[k][l];
                        dAinvdA(Ihat,Jhat) = -tmp1*Ainv(l,j);
                    }
                }
            }
        }
        return;
    }
    
    void compute_dgrad_chidgrad_phi(const Matrix_3x3 &F, SpMat &dgrad_chidgrad_phi){
        /*!====================================
        |    compute_dgrad_chidgrad_phi    |
        ====================================
        
        Compute the gradient of the gradient of chi w.r.t. the gradient of phi.
        
        Note: We assume that grad_phi is a gradient of phi in the current configuration.
        
        */
        
        //Initialize the tripletList
        std::vector<T> tripletList;
        tripletList.reserve(81);

        //Extract F
        double F11 = F(0,0);
        double F12 = F(0,1);
        double F13 = F(0,2);
        double F21 = F(1,0);
        double F22 = F(1,1);
        double F23 = F(1,2);
        double F31 = F(2,0);
        double F32 = F(2,1);
        double F33 = F(2,2);

        //Assemble dgrad_chidgrad_phi
        tripletList.push_back(T(0,0,F11));
        tripletList.push_back(T(0,4,F31));
        tripletList.push_back(T(0,5,F21));
        tripletList.push_back(T(1,1,F22));
        tripletList.push_back(T(1,3,F32));
        tripletList.push_back(T(1,8,F12));
        tripletList.push_back(T(2,2,F33));
        tripletList.push_back(T(2,6,F23));
        tripletList.push_back(T(2,7,F13));
        tripletList.push_back(T(3,1,F23));
        tripletList.push_back(T(3,3,F33));
        tripletList.push_back(T(3,8,F13));
        tripletList.push_back(T(4,0,F13));
        tripletList.push_back(T(4,4,F33));
        tripletList.push_back(T(4,5,F23));
        tripletList.push_back(T(5,0,F12));
        tripletList.push_back(T(5,4,F32));
        tripletList.push_back(T(5,5,F22));
        tripletList.push_back(T(6,2,F32));
        tripletList.push_back(T(6,6,F22));
        tripletList.push_back(T(6,7,F12));
        tripletList.push_back(T(7,2,F31));
        tripletList.push_back(T(7,6,F21));
        tripletList.push_back(T(7,7,F11));
        tripletList.push_back(T(8,1,F21));
        tripletList.push_back(T(8,3,F31));
        tripletList.push_back(T(8,8,F11));
        tripletList.push_back(T(9,9,F11));
        tripletList.push_back(T(9,13,F31));
        tripletList.push_back(T(9,14,F21));
        tripletList.push_back(T(10,10,F22));
        tripletList.push_back(T(10,12,F32));
        tripletList.push_back(T(10,17,F12));
        tripletList.push_back(T(11,11,F33));
        tripletList.push_back(T(11,15,F23));
        tripletList.push_back(T(11,16,F13));
        tripletList.push_back(T(12,10,F23));
        tripletList.push_back(T(12,12,F33));
        tripletList.push_back(T(12,17,F13));
        tripletList.push_back(T(13,9,F13));
        tripletList.push_back(T(13,13,F33));
        tripletList.push_back(T(13,14,F23));
        tripletList.push_back(T(14,9,F12));
        tripletList.push_back(T(14,13,F32));
        tripletList.push_back(T(14,14,F22));
        tripletList.push_back(T(15,11,F32));
        tripletList.push_back(T(15,15,F22));
        tripletList.push_back(T(15,16,F12));
        tripletList.push_back(T(16,11,F31));
        tripletList.push_back(T(16,15,F21));
        tripletList.push_back(T(16,16,F11));
        tripletList.push_back(T(17,10,F21));
        tripletList.push_back(T(17,12,F31));
        tripletList.push_back(T(17,17,F11));
        tripletList.push_back(T(18,18,F11));
        tripletList.push_back(T(18,22,F31));
        tripletList.push_back(T(18,23,F21));
        tripletList.push_back(T(19,19,F22));
        tripletList.push_back(T(19,21,F32));
        tripletList.push_back(T(19,26,F12));
        tripletList.push_back(T(20,20,F33));
        tripletList.push_back(T(20,24,F23));
        tripletList.push_back(T(20,25,F13));
        tripletList.push_back(T(21,19,F23));
        tripletList.push_back(T(21,21,F33));
        tripletList.push_back(T(21,26,F13));
        tripletList.push_back(T(22,18,F13));
        tripletList.push_back(T(22,22,F33));
        tripletList.push_back(T(22,23,F23));
        tripletList.push_back(T(23,18,F12));
        tripletList.push_back(T(23,22,F32));
        tripletList.push_back(T(23,23,F22));
        tripletList.push_back(T(24,20,F32));
        tripletList.push_back(T(24,24,F22));
        tripletList.push_back(T(24,25,F12));
        tripletList.push_back(T(25,20,F31));
        tripletList.push_back(T(25,24,F21));
        tripletList.push_back(T(25,25,F11));
        tripletList.push_back(T(26,19,F21));
        tripletList.push_back(T(26,21,F31));
        tripletList.push_back(T(26,26,F11));
        
        dgrad_chidgrad_phi.setFromTriplets(tripletList.begin(), tripletList.end());
        return;
    }
    
    void compute_dgrad_chidgrad_phi(const Matrix_3x3 &F, Matrix_27x27 &dgrad_chidgrad_phi){
        /*!====================================
        |    compute_dgrad_chidgrad_phi    |
        ====================================
        
        Compute the gradient of the gradient of chi w.r.t. the gradient of phi.
        
        Note: We assume that grad_phi is a gradient of phi in the current configuration.
        
        */

        dgrad_chidgrad_phi = Matrix_27x27::Zero();

        dgrad_chidgrad_phi(0,0) = F(0,0);
        dgrad_chidgrad_phi(0,4) = F(2,0);
        dgrad_chidgrad_phi(0,5) = F(1,0);
        dgrad_chidgrad_phi(1,1) = F(1,1);
        dgrad_chidgrad_phi(1,3) = F(2,1);
        dgrad_chidgrad_phi(1,8) = F(0,1);
        dgrad_chidgrad_phi(2,2) = F(2,2);
        dgrad_chidgrad_phi(2,6) = F(1,2);
        dgrad_chidgrad_phi(2,7) = F(0,2);
        dgrad_chidgrad_phi(3,1) = F(1,2);
        dgrad_chidgrad_phi(3,3) = F(2,2);
        dgrad_chidgrad_phi(3,8) = F(0,2);
        dgrad_chidgrad_phi(4,0) = F(0,2);
        dgrad_chidgrad_phi(4,4) = F(2,2);
        dgrad_chidgrad_phi(4,5) = F(1,2);
        dgrad_chidgrad_phi(5,0) = F(0,1);
        dgrad_chidgrad_phi(5,4) = F(2,1);
        dgrad_chidgrad_phi(5,5) = F(1,1);
        dgrad_chidgrad_phi(6,2) = F(2,1);
        dgrad_chidgrad_phi(6,6) = F(1,1);
        dgrad_chidgrad_phi(6,7) = F(0,1);
        dgrad_chidgrad_phi(7,2) = F(2,0);
        dgrad_chidgrad_phi(7,6) = F(1,0);
        dgrad_chidgrad_phi(7,7) = F(0,0);
        dgrad_chidgrad_phi(8,1) = F(1,0);
        dgrad_chidgrad_phi(8,3) = F(2,0);
        dgrad_chidgrad_phi(8,8) = F(0,0);
        dgrad_chidgrad_phi(9,9) = F(0,0);
        dgrad_chidgrad_phi(9,13) = F(2,0);
        dgrad_chidgrad_phi(9,14) = F(1,0);
        dgrad_chidgrad_phi(10,10) = F(1,1);
        dgrad_chidgrad_phi(10,12) = F(2,1);
        dgrad_chidgrad_phi(10,17) = F(0,1);
        dgrad_chidgrad_phi(11,11) = F(2,2);
        dgrad_chidgrad_phi(11,15) = F(1,2);
        dgrad_chidgrad_phi(11,16) = F(0,2);
        dgrad_chidgrad_phi(12,10) = F(1,2);
        dgrad_chidgrad_phi(12,12) = F(2,2);
        dgrad_chidgrad_phi(12,17) = F(0,2);
        dgrad_chidgrad_phi(13,9) = F(0,2);
        dgrad_chidgrad_phi(13,13) = F(2,2);
        dgrad_chidgrad_phi(13,14) = F(1,2);
        dgrad_chidgrad_phi(14,9) = F(0,1);
        dgrad_chidgrad_phi(14,13) = F(2,1);
        dgrad_chidgrad_phi(14,14) = F(1,1);
        dgrad_chidgrad_phi(15,11) = F(2,1);
        dgrad_chidgrad_phi(15,15) = F(1,1);
        dgrad_chidgrad_phi(15,16) = F(0,1);
        dgrad_chidgrad_phi(16,11) = F(2,0);
        dgrad_chidgrad_phi(16,15) = F(1,0);
        dgrad_chidgrad_phi(16,16) = F(0,0);
        dgrad_chidgrad_phi(17,10) = F(1,0);
        dgrad_chidgrad_phi(17,12) = F(2,0);
        dgrad_chidgrad_phi(17,17) = F(0,0);
        dgrad_chidgrad_phi(18,18) = F(0,0);
        dgrad_chidgrad_phi(18,22) = F(2,0);
        dgrad_chidgrad_phi(18,23) = F(1,0);
        dgrad_chidgrad_phi(19,19) = F(1,1);
        dgrad_chidgrad_phi(19,21) = F(2,1);
        dgrad_chidgrad_phi(19,26) = F(0,1);
        dgrad_chidgrad_phi(20,20) = F(2,2);
        dgrad_chidgrad_phi(20,24) = F(1,2);
        dgrad_chidgrad_phi(20,25) = F(0,2);
        dgrad_chidgrad_phi(21,19) = F(1,2);
        dgrad_chidgrad_phi(21,21) = F(2,2);
        dgrad_chidgrad_phi(21,26) = F(0,2);
        dgrad_chidgrad_phi(22,18) = F(0,2);
        dgrad_chidgrad_phi(22,22) = F(2,2);
        dgrad_chidgrad_phi(22,23) = F(1,2);
        dgrad_chidgrad_phi(23,18) = F(0,1);
        dgrad_chidgrad_phi(23,22) = F(2,1);
        dgrad_chidgrad_phi(23,23) = F(1,1);
        dgrad_chidgrad_phi(24,20) = F(2,1);
        dgrad_chidgrad_phi(24,24) = F(1,1);
        dgrad_chidgrad_phi(24,25) = F(0,1);
        dgrad_chidgrad_phi(25,20) = F(2,0);
        dgrad_chidgrad_phi(25,24) = F(1,0);
        dgrad_chidgrad_phi(25,25) = F(0,0);
        dgrad_chidgrad_phi(26,19) = F(1,0);
        dgrad_chidgrad_phi(26,21) = F(2,0);
        dgrad_chidgrad_phi(26,26) = F(0,0);

        return;
    }

    void compute_dgrad_chidF(const Vector_27 &grad_phi, SpMat &dgrad_chidF){
        /*!=============================
        |    compute_dgrad_chidF    |
        =============================
        
        Compute the gradient of grad_chi w.r.t. the deformation gradient.
        
        Note: We assume that grad_phi is a gradient of phi in the current configuration
        
        */
        //Initialize the tripletList
        std::vector<T> tripletList;
        tripletList.reserve(81);

        //Extract grad_phi
        double grad_phi111 = grad_phi(0);
        double grad_phi122 = grad_phi(1);
        double grad_phi133 = grad_phi(2);
        double grad_phi123 = grad_phi(3);
        double grad_phi113 = grad_phi(4);
        double grad_phi112 = grad_phi(5);
        double grad_phi132 = grad_phi(6);
        double grad_phi131 = grad_phi(7);
        double grad_phi121 = grad_phi(8);
        double grad_phi211 = grad_phi(9);
        double grad_phi222 = grad_phi(10);
        double grad_phi233 = grad_phi(11);
        double grad_phi223 = grad_phi(12);
        double grad_phi213 = grad_phi(13);
        double grad_phi212 = grad_phi(14);
        double grad_phi232 = grad_phi(15);
        double grad_phi231 = grad_phi(16);
        double grad_phi221 = grad_phi(17);
        double grad_phi311 = grad_phi(18);
        double grad_phi322 = grad_phi(19);
        double grad_phi333 = grad_phi(20);
        double grad_phi323 = grad_phi(21);
        double grad_phi313 = grad_phi(22);
        double grad_phi312 = grad_phi(23);
        double grad_phi332 = grad_phi(24);
        double grad_phi331 = grad_phi(25);
        double grad_phi321 = grad_phi(26);

        //Assemble dgrad_chidgrad_phi
        tripletList.push_back(T(0,0,grad_phi111));
        tripletList.push_back(T(0,7,grad_phi113));
        tripletList.push_back(T(0,8,grad_phi112));
        tripletList.push_back(T(1,1,grad_phi122));
        tripletList.push_back(T(1,5,grad_phi121));
        tripletList.push_back(T(1,6,grad_phi123));
        tripletList.push_back(T(2,2,grad_phi133));
        tripletList.push_back(T(2,3,grad_phi132));
        tripletList.push_back(T(2,4,grad_phi131));
        tripletList.push_back(T(3,2,grad_phi123));
        tripletList.push_back(T(3,3,grad_phi122));
        tripletList.push_back(T(3,4,grad_phi121));
        tripletList.push_back(T(4,2,grad_phi113));
        tripletList.push_back(T(4,3,grad_phi112));
        tripletList.push_back(T(4,4,grad_phi111));
        tripletList.push_back(T(5,1,grad_phi112));
        tripletList.push_back(T(5,5,grad_phi111));
        tripletList.push_back(T(5,6,grad_phi113));
        tripletList.push_back(T(6,1,grad_phi132));
        tripletList.push_back(T(6,5,grad_phi131));
        tripletList.push_back(T(6,6,grad_phi133));
        tripletList.push_back(T(7,0,grad_phi131));
        tripletList.push_back(T(7,7,grad_phi133));
        tripletList.push_back(T(7,8,grad_phi132));
        tripletList.push_back(T(8,0,grad_phi121));
        tripletList.push_back(T(8,7,grad_phi123));
        tripletList.push_back(T(8,8,grad_phi122));
        tripletList.push_back(T(9,0,grad_phi211));
        tripletList.push_back(T(9,7,grad_phi213));
        tripletList.push_back(T(9,8,grad_phi212));
        tripletList.push_back(T(10,1,grad_phi222));
        tripletList.push_back(T(10,5,grad_phi221));
        tripletList.push_back(T(10,6,grad_phi223));
        tripletList.push_back(T(11,2,grad_phi233));
        tripletList.push_back(T(11,3,grad_phi232));
        tripletList.push_back(T(11,4,grad_phi231));
        tripletList.push_back(T(12,2,grad_phi223));
        tripletList.push_back(T(12,3,grad_phi222));
        tripletList.push_back(T(12,4,grad_phi221));
        tripletList.push_back(T(13,2,grad_phi213));
        tripletList.push_back(T(13,3,grad_phi212));
        tripletList.push_back(T(13,4,grad_phi211));
        tripletList.push_back(T(14,1,grad_phi212));
        tripletList.push_back(T(14,5,grad_phi211));
        tripletList.push_back(T(14,6,grad_phi213));
        tripletList.push_back(T(15,1,grad_phi232));
        tripletList.push_back(T(15,5,grad_phi231));
        tripletList.push_back(T(15,6,grad_phi233));
        tripletList.push_back(T(16,0,grad_phi231));
        tripletList.push_back(T(16,7,grad_phi233));
        tripletList.push_back(T(16,8,grad_phi232));
        tripletList.push_back(T(17,0,grad_phi221));
        tripletList.push_back(T(17,7,grad_phi223));
        tripletList.push_back(T(17,8,grad_phi222));
        tripletList.push_back(T(18,0,grad_phi311));
        tripletList.push_back(T(18,7,grad_phi313));
        tripletList.push_back(T(18,8,grad_phi312));
        tripletList.push_back(T(19,1,grad_phi322));
        tripletList.push_back(T(19,5,grad_phi321));
        tripletList.push_back(T(19,6,grad_phi323));
        tripletList.push_back(T(20,2,grad_phi333));
        tripletList.push_back(T(20,3,grad_phi332));
        tripletList.push_back(T(20,4,grad_phi331));
        tripletList.push_back(T(21,2,grad_phi323));
        tripletList.push_back(T(21,3,grad_phi322));
        tripletList.push_back(T(21,4,grad_phi321));
        tripletList.push_back(T(22,2,grad_phi313));
        tripletList.push_back(T(22,3,grad_phi312));
        tripletList.push_back(T(22,4,grad_phi311));
        tripletList.push_back(T(23,1,grad_phi312));
        tripletList.push_back(T(23,5,grad_phi311));
        tripletList.push_back(T(23,6,grad_phi313));
        tripletList.push_back(T(24,1,grad_phi332));
        tripletList.push_back(T(24,5,grad_phi331));
        tripletList.push_back(T(24,6,grad_phi333));
        tripletList.push_back(T(25,0,grad_phi331));
        tripletList.push_back(T(25,7,grad_phi333));
        tripletList.push_back(T(25,8,grad_phi332));
        tripletList.push_back(T(26,0,grad_phi321));
        tripletList.push_back(T(26,7,grad_phi323));
        tripletList.push_back(T(26,8,grad_phi322));
        
        dgrad_chidF.setFromTriplets(tripletList.begin(), tripletList.end());
        return;
    }
    
    void compute_dgrad_chidF(const Vector_27 &grad_phi, Matrix_27x9 &dgrad_chidF){
        /*!=============================
        |    compute_dgrad_chidF    |
        =============================
        
        Compute the gradient of grad_chi w.r.t. the deformation gradient.
        
        Note: We assume that grad_phi is a gradient of phi in the current configuration
        
        */

        dgrad_chidF = Matrix_27x9::Zero();

        dgrad_chidF(0,0) = grad_phi(0,0);
        dgrad_chidF(0,7) = grad_phi(4,0);
        dgrad_chidF(0,8) = grad_phi(5,0);
        dgrad_chidF(1,1) = grad_phi(1,0);
        dgrad_chidF(1,5) = grad_phi(8,0);
        dgrad_chidF(1,6) = grad_phi(3,0);
        dgrad_chidF(2,2) = grad_phi(2,0);
        dgrad_chidF(2,3) = grad_phi(6,0);
        dgrad_chidF(2,4) = grad_phi(7,0);
        dgrad_chidF(3,2) = grad_phi(3,0);
        dgrad_chidF(3,3) = grad_phi(1,0);
        dgrad_chidF(3,4) = grad_phi(8,0);
        dgrad_chidF(4,2) = grad_phi(4,0);
        dgrad_chidF(4,3) = grad_phi(5,0);
        dgrad_chidF(4,4) = grad_phi(0,0);
        dgrad_chidF(5,1) = grad_phi(5,0);
        dgrad_chidF(5,5) = grad_phi(0,0);
        dgrad_chidF(5,6) = grad_phi(4,0);
        dgrad_chidF(6,1) = grad_phi(6,0);
        dgrad_chidF(6,5) = grad_phi(7,0);
        dgrad_chidF(6,6) = grad_phi(2,0);
        dgrad_chidF(7,0) = grad_phi(7,0);
        dgrad_chidF(7,7) = grad_phi(2,0);
        dgrad_chidF(7,8) = grad_phi(6,0);
        dgrad_chidF(8,0) = grad_phi(8,0);
        dgrad_chidF(8,7) = grad_phi(3,0);
        dgrad_chidF(8,8) = grad_phi(1,0);
        dgrad_chidF(9,0) = grad_phi(9,0);
        dgrad_chidF(9,7) = grad_phi(13,0);
        dgrad_chidF(9,8) = grad_phi(14,0);
        dgrad_chidF(10,1) = grad_phi(10,0);
        dgrad_chidF(10,5) = grad_phi(17,0);
        dgrad_chidF(10,6) = grad_phi(12,0);
        dgrad_chidF(11,2) = grad_phi(11,0);
        dgrad_chidF(11,3) = grad_phi(15,0);
        dgrad_chidF(11,4) = grad_phi(16,0);
        dgrad_chidF(12,2) = grad_phi(12,0);
        dgrad_chidF(12,3) = grad_phi(10,0);
        dgrad_chidF(12,4) = grad_phi(17,0);
        dgrad_chidF(13,2) = grad_phi(13,0);
        dgrad_chidF(13,3) = grad_phi(14,0);
        dgrad_chidF(13,4) = grad_phi(9,0);
        dgrad_chidF(14,1) = grad_phi(14,0);
        dgrad_chidF(14,5) = grad_phi(9,0);
        dgrad_chidF(14,6) = grad_phi(13,0);
        dgrad_chidF(15,1) = grad_phi(15,0);
        dgrad_chidF(15,5) = grad_phi(16,0);
        dgrad_chidF(15,6) = grad_phi(11,0);
        dgrad_chidF(16,0) = grad_phi(16,0);
        dgrad_chidF(16,7) = grad_phi(11,0);
        dgrad_chidF(16,8) = grad_phi(15,0);
        dgrad_chidF(17,0) = grad_phi(17,0);
        dgrad_chidF(17,7) = grad_phi(12,0);
        dgrad_chidF(17,8) = grad_phi(10,0);
        dgrad_chidF(18,0) = grad_phi(18,0);
        dgrad_chidF(18,7) = grad_phi(22,0);
        dgrad_chidF(18,8) = grad_phi(23,0);
        dgrad_chidF(19,1) = grad_phi(19,0);
        dgrad_chidF(19,5) = grad_phi(26,0);
        dgrad_chidF(19,6) = grad_phi(21,0);
        dgrad_chidF(20,2) = grad_phi(20,0);
        dgrad_chidF(20,3) = grad_phi(24,0);
        dgrad_chidF(20,4) = grad_phi(25,0);
        dgrad_chidF(21,2) = grad_phi(21,0);
        dgrad_chidF(21,3) = grad_phi(19,0);
        dgrad_chidF(21,4) = grad_phi(26,0);
        dgrad_chidF(22,2) = grad_phi(22,0);
        dgrad_chidF(22,3) = grad_phi(23,0);
        dgrad_chidF(22,4) = grad_phi(18,0);
        dgrad_chidF(23,1) = grad_phi(23,0);
        dgrad_chidF(23,5) = grad_phi(18,0);
        dgrad_chidF(23,6) = grad_phi(22,0);
        dgrad_chidF(24,1) = grad_phi(24,0);
        dgrad_chidF(24,5) = grad_phi(25,0);
        dgrad_chidF(24,6) = grad_phi(20,0);
        dgrad_chidF(25,0) = grad_phi(25,0);
        dgrad_chidF(25,7) = grad_phi(20,0);
        dgrad_chidF(25,8) = grad_phi(24,0);
        dgrad_chidF(26,0) = grad_phi(26,0);
        dgrad_chidF(26,7) = grad_phi(21,0);
        dgrad_chidF(26,8) = grad_phi(19,0);

        return;
    }

    void compute_dFdgrad_u(const Matrix_3x3 &F, Matrix_9x9 &dFdgrad_u){
        /*!============================
        |    commpute_dFdgrad_u    |
        ============================
        
        Compute the derivative of the deformation gradient w.r.t. 
        the gradient of the deformation.
        
        */
        
        
        Matrix_3x3 Finv = F.inverse();
        Matrix_9x9 dFdFinv;
        compute_dAinvdA(F,dFdFinv);
        dFdgrad_u = -dFdFinv;

        return;
    }
    
    void compute_ddetAdA(const Matrix_3x3 &A, Matrix_3x3 &ddetAdA){
        /*!======================
        |    compute_dJdF    |
        ======================
        
        Compute the derivative of the determinant of the second order tensor A 
        w.r.t. A.
        
        */
        
        double detA = A.determinant();
        
        Matrix_3x3 Ainv = A.inverse();
        
        ddetAdA = detA*Ainv.transpose();
        
        return;
    }
    
    void map_stresses_to_current_configuration(const Matrix_3x3 &F, const Matrix_3x3 &chi,
                                               const Vector_9 &PK2, const Vector_9 &SIGMA, const Vector_27 &M,
                                               Vector_9 &cauchy, Vector_9 &s, Vector_27 &m){
        /*!===============================================
        |    map_stresses_to_current_configuration    |
        ===============================================

        Map the stresses to the current configuration.

        */

        //Compute the jacobian of deformation
        double Jac = F.determinant();

        //Map the PK2 stress to the cauchy stress
        Matrix_3x3 PK2_mat;
        undo_voigt_3x3_tensor(PK2,PK2_mat);
        voigt_3x3_tensor(F*PK2_mat*F.transpose()/Jac,cauchy);

        //Map the symmetric stress to the current configuration
        Matrix_3x3 SIGMA_mat;
        undo_voigt_3x3_tensor(SIGMA,SIGMA_mat);
        voigt_3x3_tensor(F*SIGMA_mat*F.transpose()/Jac,s);

        //Map the higher order stress to the current configuration
        Matrix_3x9 M_mat;
        undo_voigt_3x9_tensor(M,M_mat);
        voigt_3x9_tensor(F*M_mat,m);                 //Map the first index
        perform_left_positive_cyclic_permutation(m); //Cycle the indices
        undo_voigt_3x9_tensor(m,M_mat);
        voigt_3x9_tensor(F*M_mat,m);                 //Map the second index
        perform_left_positive_cyclic_permutation(m); //Cycle the indices
        undo_voigt_3x9_tensor(m,M_mat);
        voigt_3x9_tensor(chi*M_mat,m);               //Map the third index
        perform_left_positive_cyclic_permutation(m); //Cycle the indices
        m = m/Jac;

        return;
    }
    
    void map_jacobians_to_current_configuration(const Matrix_3x3  &F,            const Matrix_3x3  &chi,
                                                const Vector_9    &PK2_voigt,    const Vector_9    &SIGMA_voigt, const Vector_27    &M_voigt,
                                                const Vector_9    &cauchy_voigt, const Vector_9    &s_voigt,     const Vector_27    &m_voigt,
                                                const Matrix_9x9  &dPK2dF,       const Matrix_9x9  &dPK2dchi,    const Matrix_9x27  &dPK2dgrad_chi,
                                                const Matrix_9x9  &dSIGMAdF,     const Matrix_9x9  &dSIGMAdchi,  const Matrix_9x27  &dSIGMAdgrad_chi,
                                                const Matrix_27x9 &dMdF,         const Matrix_27x9 &dMdchi,      const Matrix_27x27 &dMdgrad_chi, 
                                                Matrix_9x9        &dcauchydF,    Matrix_9x9        &dcauchydchi, Matrix_9x27        &dcauchydgrad_chi,
                                                Matrix_9x9        &dsdF,         Matrix_9x9        &dsdchi,      Matrix_9x27        &dsdgrad_chi,
                                                Matrix_27x9       &dmdF,         Matrix_27x9       &dmdchi,      Matrix_27x27       &dmdgrad_chi){
    
        /*!================================================
        |    map_jacobians_to_current_configuration    |
        ================================================
        
        Function to map jacobians computed in the reference or intermediate configuration to 
        jacobians in the current configuration with respect to the fundamental deformation measures.
        
        Note: You should always write a test function for this in your code. It *should* work but 
              it is possible the previously written test coverage will miss a problem shown by
              your application.
        
        */
        
        //Compute the jacobian of deformation
        double J = F.determinant();
        
        //Compute the derivative of the jacobian of deformation w.r.t. F
        Matrix_3x3 dJdF;
        compute_ddetAdA(F,dJdF);
        
        //Map the cauchy stress
        map_dAdF_to_dadF(cauchy_voigt, PK2_voigt, dPK2dF, J, dJdF, F, dcauchydF);
        map_dAdchi_to_dadchi(dPK2dchi, J, F, dcauchydchi);
        map_dAdgrad_chi_to_dadgrad_chi(dPK2dgrad_chi, J, F, dcauchydgrad_chi);        
        
        //Map the symmetric stress
        map_dAdF_to_dadF(s_voigt, SIGMA_voigt, dSIGMAdF, J, dJdF, F, dsdF);
        map_dAdchi_to_dadchi(dSIGMAdchi, J, F, dsdchi);
        map_dAdgrad_chi_to_dadgrad_chi(dSIGMAdgrad_chi, J, F, dsdgrad_chi);
        
        //Map the higher order stress
        map_dAdF_to_dadF(m_voigt, M_voigt, dMdF, J, dJdF, F, chi, dmdF);
        map_dAdchi_to_dadchi(M_voigt, dMdchi, J, F, chi, dmdchi);
        map_dAdgrad_chi_to_dadgrad_chi(dMdgrad_chi, J, F, chi, dmdgrad_chi);
        
        return;
    }
    
    void map_dAdF_to_dadF(const Vector_9 &a,  const Vector_9 &A,  const Matrix_9x9 &dAdF,  const double &detF, const Matrix_3x3 &dJdF, const Matrix_3x3 &F, Matrix_9x9 &dadF){
        /*!==========================
        |    map_dAdF_to_dadF    |
        ==========================
        
        Map the jacobian of a stress measure in the reference configuration with respect to the 
        deformation gradient (either the PK2 stress or the symmetric stress) to the jacobian of 
        a corresponding stress measure in the current configuration (either the cauchy stress 
        or the symmetric stress) with respect to the deformation gradient.
        
        */
        
        dadF = Matrix_9x9::Zero();

        double eye[3][3] = {{1,0,0},
                            {0,1,0},
                            {0,0,1}};

        int sot_to_voigt_map[3][3] = {{0,5,4},
                                      {8,1,3},
                                      {7,6,2}};

        int Ihat;
        int Jhat;
        int Khat;

        double tmp1;
        double tmp2;
        double tmp3;
        
        for (int i=0; i<3; i++){
            for (int j=0; j<3; j++){
                Ihat = sot_to_voigt_map[i][j];
                for (int k=0; k<3; k++){
                    tmp1 = eye[i][k];
                    tmp2 = eye[j][k];
                    for (int K=0; K<3; K++){
                        Jhat = sot_to_voigt_map[k][K];
                        dadF(Ihat,Jhat) = -dJdF(k,K)*a[Ihat];

                        if(tmp1>1e-9){
                            for (int J=0; J<3; J++){
                                Khat = sot_to_voigt_map[K][J];
                                dadF(Ihat,Jhat) += F(j,J)*A(Khat);
                            }
                        }
                        
                        if(tmp2>1e-9){
                            for (int I=0; I<3; I++){
                                Khat = sot_to_voigt_map[I][K];
                                dadF(Ihat,Jhat) += F(i,I)*A(Khat);
                            }
                        }

                        for (int I=0; I<3; I++){
                            tmp3 = F(i,I);
                            for (int J=0; J<3; J++){
                                Khat = sot_to_voigt_map[I][J];
                                dadF(Ihat,Jhat) += tmp3*F(j,J)*dAdF(Khat,Jhat);
                            }
                        }
                    }
                }
            }
        }

        dadF /= detF;
        
        return;
    }

    void map_dAdF_to_dadF(const Vector_27& a, const Vector_27 &A, const Matrix_27x9 &dAdF, const double &detF, const Matrix_3x3 &dJdF, const Matrix_3x3 &F, const Matrix_3x3 &chi, Matrix_27x9 &dadF){
        /*!==========================
        |    map_dAdF_to_dadF    |
        ==========================
        
        Map the jacobian of a stress measure in the reference configuration with respect to the 
        deformation gradient (either the PK2 stress or the symmetric stress) to the jacobian of 
        a corresponding stress measure in the current configuration (either the cauchy stress 
        or the symmetric stress) with respect to the deformation gradient.
        
        This is for the higher-order stress measure.
        
        */

        double eye[3][3] = {{1,0,0},
                            {0,1,0},
                            {0,0,1}};

        int sot_to_voigt_map[3][3] = {{0,5,4},
                                      {8,1,3},
                                      {7,6,2}};

        int tot_to_voigt_map[3][3][3];
        deformation_measures::get_tot_to_voigt_map(tot_to_voigt_map);

        int Ihat;
        int Jhat;
        int Khat;
        
        double tmp1;
        double tmp2;
        double tmp3;
        double tmp4;

        for (int i=0; i<3; i++){
            for (int j=0; j<3; j++){
                for (int k=0; k<3; k++){
                    Ihat = tot_to_voigt_map[i][j][k];
                    for (int l=0; l<3; l++){
                        tmp1 = eye[i][l];
                        tmp2 = eye[j][l];
                        for (int L=0; L<3; L++){
                            Jhat = sot_to_voigt_map[l][L];
                            
                            dadF(Ihat,Jhat) = -dJdF(l,L)*a[Ihat];

                            if(tmp1>1e-9){
                                for (int J=0; J<3; J++){
                                    tmp3 = F(j,J);
                                    for (int K=0; K<3; K++){
                                        Khat = tot_to_voigt_map[L][J][K];
                                        dadF(Ihat,Jhat) += tmp3 * chi(k,K) * A(Khat);
                                    }
                                }
                            }

                            if(tmp2>1e-9){
                                for (int I=0; I<3; I++){
                                    tmp3 = F(i,I);
                                    for (int K=0; K<3; K++){
                                        Khat = tot_to_voigt_map[I][L][K];
                                        dadF(Ihat,Jhat) += tmp3 * chi(k,K) * A(Khat);
                                    }
                                }
                            }

                            for (int I=0; I<3; I++){
                                tmp3 = F(i,I);
                                for (int J=0; J<3; J++){
                                    tmp4 = F(j,J);
                                    for (int K=0; K<3; K++){
                                        Khat = tot_to_voigt_map[I][J][K];
                                        dadF(Ihat,Jhat) += tmp3 * tmp4 * chi(k,K) * dAdF(Khat,Jhat);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        dadF /= detF;
        return;
    }

    void map_dAdchi_to_dadchi(const Matrix_9x9 &dAdchi,  const double &detF, const Matrix_3x3 &F, Matrix_9x9 &dadchi){
        /*!==============================
        |    map_dAdchi_to_dadchi    |
        ==============================
        
        Map the jacobian of a stress measure w.r.t. chi in the reference configuration 
        to the current configuration.
        
        */
        
        dadchi = Matrix_9x9::Zero();

        int sot_to_voigt_map[3][3] = {{0,5,4},
                                      {8,1,3},
                                      {7,6,2}};

        int Ihat;
        int Jhat;
        int Khat;
        
        double tmp1;

        for (int i=0; i<3; i++){
            for (int j=0; j<3; j++){
                Ihat = sot_to_voigt_map[i][j];
                for (int k=0; k<3; k++){
                    for (int K=0; K<3; K++){
                        Jhat = sot_to_voigt_map[k][K];

                        for (int I=0; I<3; I++){
                            tmp1 = F(i,I);
                            for (int J=0; J<3; J++){
                                Khat = sot_to_voigt_map[I][J];
                                dadchi(Ihat,Jhat) += tmp1 * F(j,J) * dAdchi(Khat,Jhat);
                            }
                        }
                    }
                }
            }
        }
        dadchi /= detF;
        
        return;
    }
    
    void map_dAdchi_to_dadchi(const Vector_27 &A, const Matrix_27x9 &dAdchi, const double &detF, const Matrix_3x3 &F, const Matrix_3x3 &chi, Matrix_27x9 &dadchi){
        /*!==============================
        |    map_dAdchi_to_dadchi    |
        ==============================
        
        Map the jacobian of a stress measure w.r.t. chi in the reference configuration 
        to the current configuration.
        
        For the higher-order stress
        
        */
       
        double eye[3][3] = {{1,0,0},
                            {0,1,0},
                            {0,0,1}};

        int sot_to_voigt_map[3][3] = {{0,5,4},
                                      {8,1,3},
                                      {7,6,2}};

        int tot_to_voigt_map[3][3][3];
        deformation_measures::get_tot_to_voigt_map(tot_to_voigt_map);

        int Ihat;
        int Jhat;
        int Khat;

        dadchi = Matrix_27x9::Zero();

        double tmp1;
        double tmp2;
        
        for (int i=0; i<3; i++){
            for (int j=0; j<3; j++){
                for (int k=0; k<3; k++){
                    Ihat = tot_to_voigt_map[i][j][k];
                    for (int l=0; l<3; l++){
                        for (int L=0; L<3; L++){
                            Jhat = sot_to_voigt_map[l][L];

                            for (int I=0; I<3; I++){
                                tmp1 = F(i,I);
                                for (int J=0; J<3; J++){
                                    Khat = tot_to_voigt_map[I][J][L];
                                    dadchi(Ihat,Jhat) += tmp1 * F(j,J) * eye[k][l] * A(Khat);
                                }
                            }

                            for (int I=0; I<3; I++){
                                tmp1 = F(i,I);
                                for (int J=0; J<3; J++){
                                    tmp2 = F(j,J);
                                    for (int K=0; K<3; K++){
                                        Khat = tot_to_voigt_map[I][J][K];
                                        dadchi(Ihat,Jhat) += tmp1 * tmp2 * chi(k,K) * dAdchi(Khat,Jhat);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        dadchi /= detF;
        return;
    }

    void map_dAdgrad_chi_to_dadgrad_chi(const Matrix_9x27 &dAdgrad_chi,  const double &detF, const Matrix_3x3 &F, Matrix_9x27 &dadgrad_chi){
        /*!========================================
        |    map_dAdgrad_chi_to_dadgrad_chi    |
        ========================================
        
        Map the gradient of a stress tensor w.r.t. the gradient w.r.t. the reference coordinate X of the micro-deformation tensor 
        in the reference configuration to the current configuration.
        
        Note that grad_chi is chi_iI,J to the resulting gradient is dadgrad_chi_ijkK,L.
        */
        
        dadgrad_chi = Matrix_9x27::Zero();

        double eye[3][3] = {{1,0,0},
                            {0,1,0},
                            {0,0,1}};

        int sot_to_voigt_map[3][3] = {{0,5,4},
                                      {8,1,3},
                                      {7,6,2}};

        int tot_to_voigt_map[3][3][3];
        deformation_measures::get_tot_to_voigt_map(tot_to_voigt_map);

        int Ihat;
        int Jhat;
        int Khat;
        
        double tmp1;

        for (int i=0; i<3; i++){
            for (int j=0; j<3; j++){
                Ihat = sot_to_voigt_map[i][j];
                for (int k=0; k<3; k++){
                    for (int K=0; K<3; K++){
                        for (int L=0; L<3; L++){
                            Jhat = tot_to_voigt_map[k][K][L];
                            
                            for (int I=0; I<3; I++){
                                tmp1 = F(i,I);
                                for (int J=0; J<3; J++){
                                    Khat = sot_to_voigt_map[I][J];
                                    dadgrad_chi(Ihat,Jhat) += tmp1 * F(j,J) * dAdgrad_chi(Khat,Jhat);
                                }
                            }
                        }
                    }
                }
            }
        }
 
        dadgrad_chi /= detF;
        return;
    }
    
    void map_dAdgrad_chi_to_dadgrad_chi(const Matrix_27x27 &dAdgrad_chi, const double &detF, const Matrix_3x3 &F, const Matrix_3x3 &chi, Matrix_27x27 &dadgrad_chi){
        /*!========================================
        |    map_dAdgrad_chi_to_dadgrad_chi    |
        ========================================
        
        Map the gradient of a stress tensor w.r.t. the gradient w.r.t. the reference coordinate X of the micro-deformation tensor 
        in the reference configuration to the current configuration.
        
        Note that grad_chi is chi_iI,J to the resulting gradient is dadgrad_chi_ijklK,L.
        
        This is for the higher order stress
        */
        
        dadgrad_chi = Matrix_27x27::Zero();

        int tot_to_voigt_map[3][3][3];
        deformation_measures::get_tot_to_voigt_map(tot_to_voigt_map);

        int Ihat;
        int Jhat;
        int Khat;
        
        double tmp1;
        double tmp2;    

        for (int i=0; i<3; i++){
            for (int j=0; j<3; j++){
                for (int k=0; k<3; k++){
                    Ihat = tot_to_voigt_map[i][j][k];
                    for (int l=0; l<3; l++){
                        for (int L=0; L<3; L++){
                            for (int M=0; M<3; M++){
                                Jhat = tot_to_voigt_map[l][L][M];
                                for (int I=0; I<3; I++){
                                    tmp1 = F(i,I);
                                    for (int J=0; J<3; J++){
                                        tmp2 = F(j,J);
                                        for (int K=0; K<3; K++){
                                            Khat = tot_to_voigt_map[I][J][K];
                                            dadgrad_chi(Ihat,Jhat) += tmp1 * tmp2 * chi(k,K) * dAdgrad_chi(Khat,Jhat);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        dadgrad_chi /= detF;
        return;
    }
    
    void compute_total_derivatives(const Matrix_3x3  &F,         const Vector_27    &grad_phi,
                                   const Matrix_9x9  &dcauchydF, const Matrix_9x27  &dcauchydgrad_chi,
                                   const Matrix_9x9  &dsdF,      const Matrix_9x27  &dsdgrad_chi,
                                   const Matrix_27x9 &dmdF,      const Matrix_27x27 &dmdgrad_chi,
                                   Matrix_9x9  &DcauchyDgrad_u,  Matrix_9x27  &DcauchyDgrad_phi,
                                   Matrix_9x9  &DsDgrad_u,       Matrix_9x27  &DsDgrad_phi,
                                   Matrix_27x9 &DmDgrad_u,       Matrix_27x27 &DmDgrad_phi){
        /*!===================================
        |    compute_total_derivatives    |
        ===================================

        Compute the total derivatives of the deformation measures w.r.t. the displacement degrees of freedom and their 
        gradients.
        
        Note DxDchi = DxDphi because chi = eye + phi
        
        */        

        //Define the partial derivatives of grad_chi
        //Note: Removing sparse matrices because of problems with 
        //      MOOSE.
        //SpMat dgrad_chidF(27,9);
        //SpMat dgrad_chidgrad_phi(27,27);

        Matrix_27x9  dgrad_chidF;
        Matrix_27x27 dgrad_chidgrad_phi;
        
        //Define the derivative of the deformation gradient w.r.t. the gradient of u w.r.t. the local coordinates.
        Matrix_9x9 dFdgrad_u;
        compute_dFdgrad_u(F,dFdgrad_u);
        
        compute_dgrad_chidF(grad_phi, dgrad_chidF);
        compute_dgrad_chidgrad_phi(F,dgrad_chidgrad_phi);
        
        //Compute the total derivatives w.r.t. the deformation gradient.
        DcauchyDgrad_u = (dcauchydF + dcauchydgrad_chi*dgrad_chidF)*dFdgrad_u;
        DsDgrad_u      = (dsdF      +      dsdgrad_chi*dgrad_chidF)*dFdgrad_u;
        DmDgrad_u      = (dmdF      +      dmdgrad_chi*dgrad_chidF)*dFdgrad_u;
        
        //Compute the total derivatives w.r.t. the gradient of the micro-displacement dof.
        DcauchyDgrad_phi = dcauchydgrad_chi*dgrad_chidgrad_phi;
        DsDgrad_phi      = dsdgrad_chi*dgrad_chidgrad_phi;
        DmDgrad_phi      = dmdgrad_chi*dgrad_chidgrad_phi;
        
        return;
    }
}
