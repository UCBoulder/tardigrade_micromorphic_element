/*!============================================================================
   |                                                                          |
   |                       test_balance_equations.cpp                         |
   |                                                                          |
   ----------------------------------------------------------------------------
   | The unit test file for balance_equations.h/cpp. This file tests the      |
   | classes and functions defined in balance_equations.h/cpp.                |
   |                                                                          |
   | Generated files:                                                         |
   |    results.tex:  A LaTeX file which contains the results as they will be |
   |                  included in the generated report.                       |
   ============================================================================
   | Dependencies:                                                            |
   | Eigen:  An implementation of various matrix commands. Available at       |
   |         eigen.tuxfamily.org                                              |
   ============================================================================*/

#include<iostream>
#define USE_EIGEN
#include<vector_tools.h>
#include<error_tools.h>
#include<balance_equations.h>

typedef errorTools::Node errorNode;
typedef errorNode* errorOut;

typedef balance_equations::variableType variableType;
typedef balance_equations::variableVector variableVector;
typedef balance_equations::variableMatrix variableMatrix;

errorOut interpolate_values( const variableVector &etas, const variableMatrix &values, variableVector &v ){
    /*!
     * Interpolate values to a point
     *
     * :param const variableVector &etas: The interpolation function values ( npoints )
     * :param const variableMatrix &values: The values of the degrees of freedom at the known points ( ndof x npoints )
     * :param variableVector &v: The output value
     */

    v = vectorTools::dot( values, etas );
    return NULL;
}

errorOut interpolate_gradients( const variableMatrix &detadX, const variableMatrix &values, variableMatrix &dvdX ){
    /*!
     * Compute the gradients at a point
     *
     * :param const variableMatrix &detadX: The gradient of the shape functions ( npoints x 3 )
     * :param const variableMatrix &values: The values of the degrees of freedom at the known points ( ndof x npoints )
     * :param variableMatrix &dvdX: The gradients of the degrees of freedom.
     */

    dvdX = vectorTools::dot( values, detadX );
    return NULL;
}

errorOut _test_interpolate_values( ){
    /*!
     * Internal test for the interpolate values
     */

    variableVector etas = { 0.36852295, 0.97637554, 0.73179659, 0.68487472, 0.39762759, 0.31758111, 0.77389198, 0.61821572 };

    variableMatrix values =
        {
            {  0.17731668, -0.15865735,  0.34206721, -0.0840164 ,  0.22072846,  0.19713675, -0.05521133, -0.06724891 },
            {  0.36570213, -0.49773919, -0.0468549 , -0.14928391,  0.3566579 ,  0.05454419,  0.30139775,  0.10009692 },
            {  0.02839771, -0.27099594,  0.3268313 , -0.40346198,  0.23107736, -0.0216891 ,  0.07994532, -0.28122228 },
            {  0.08438573, -0.10177786, -0.32459302,  0.00686261,  0.34034989, -0.28430275, -0.43718291,  0.14568342 },
            { -0.35720521, -0.43625961,  0.39841842,  0.17191936, -0.36538435, -0.49708906,  0.11851704, -0.26731614 },
            { -0.3717092 ,  0.04059797, -0.20701823,  0.19374649, -0.07539915, -0.28326464, -0.29816502,  0.46869672 },
            { -0.3283136 , -0.20761489, -0.41540895,  0.33912041,  0.20656594,  0.38157274,  0.03904779, -0.24227912 },
            {  0.15126979,  0.3511807 ,  0.33206935,  0.44103036, -0.14856347, -0.44038337, -0.0889653 , -0.11631477 },
            {  0.41895973, -0.22126793,  0.48640171, -0.32228643,  0.18169337,  0.36786474,  0.05204352, -0.47173868 },
            { -0.07257373,  0.07680379,  0.18734109, -0.06067456, -0.35509802,  0.18593935, -0.37953488,  0.42246967 },
            { -0.45442497,  0.11123504, -0.42798247,  0.44491971, -0.08782663, -0.16396531, -0.20379889,  0.48399711 },
            {  0.01555576, -0.06202483, -0.35382355, -0.08608767,  0.24526508,  0.24108876,  0.46201566, -0.2337636  }
        };

    variableVector answer = {  0.16929172, -0.03346976, -0.31826779, -0.50433662, -0.52497972, -0.17707978,
                              -0.31168643,  0.60400088,  0.01128995,  0.02909782, -0.01283899,  0.01441026 };

    variableVector result;
    errorOut error = interpolate_values( etas, values, result );

    if ( error ){
        errorOut result = new errorNode( "_test_interpolate_values", "Error in interpolation" );
        result->addNext( error );
        result->print();
        assert( 1 == 0 );
    }

    if ( !vectorTools::fuzzyEquals( result, answer ) ){
        errorOut result = new errorNode( "_test_interpolate_values", "The interpolated values are not correct" );
        result->print();
        assert( 1 == 0 );
    }
    return NULL;
}

errorOut _test_interpolate_gradients( ){
    /*!
     * Internal test for the interpolate values gradients
     */
    variableMatrix detadX =
        {
            { -0.29444605,  0.07238605,  0.43713906 },
            { -0.04698417, -0.40157226,  0.16954795 },
            {  0.13448525,  0.03186528, -0.30307097 },
            { -0.24891382,  0.3754754 ,  0.28469287 },
            { -0.44101342,  0.33897349,  0.30851798 },
            { -0.41890348,  0.37183943, -0.07587246 },
            { -0.16728468,  0.04201381,  0.06121883 },
            { -0.19766519, -0.32000607, -0.46894013 }
        };

    variableMatrix values =
        {
            {  0.17731668, -0.15865735,  0.34206721, -0.0840164 ,  0.22072846,  0.19713675, -0.05521133, -0.06724891 },
            {  0.36570213, -0.49773919, -0.0468549 , -0.14928391,  0.3566579 ,  0.05454419,  0.30139775,  0.10009692 },
            {  0.02839771, -0.27099594,  0.3268313 , -0.40346198,  0.23107736, -0.0216891 ,  0.07994532, -0.28122228 },
            {  0.08438573, -0.10177786, -0.32459302,  0.00686261,  0.34034989, -0.28430275, -0.43718291,  0.14568342 },
            { -0.35720521, -0.43625961,  0.39841842,  0.17191936, -0.36538435, -0.49708906,  0.11851704, -0.26731614 },
            { -0.3717092 ,  0.04059797, -0.20701823,  0.19374649, -0.07539915, -0.28326464, -0.29816502,  0.46869672 },
            { -0.3283136 , -0.20761489, -0.41540895,  0.33912041,  0.20656594,  0.38157274,  0.03904779, -0.24227912 },
            {  0.15126979,  0.3511807 ,  0.33206935,  0.44103036, -0.14856347, -0.44038337, -0.0889653 , -0.11631477 },
            {  0.41895973, -0.22126793,  0.48640171, -0.32228643,  0.18169337,  0.36786474,  0.05204352, -0.47173868 },
            { -0.07257373,  0.07680379,  0.18734109, -0.06067456, -0.35509802,  0.18593935, -0.37953488,  0.42246967 },
            { -0.45442497,  0.11123504, -0.42798247,  0.44491971, -0.08782663, -0.16396531, -0.20379889,  0.48399711 },
            {  0.01555576, -0.06202483, -0.35382355, -0.08608767,  0.24526508,  0.24108876,  0.46201566, -0.2337636  }
        };

    variableMatrix answer =
        {
            { -0.13523668,  0.22322635,  0.00431969 },
            { -0.30378072,  0.290615  ,  0.12458104 },
            {  0.09814383,  0.13342045, -0.03774119 },
            { -0.05209227, -0.01611967,  0.15145471 },
            {  0.538848  ,  0.0084095 , -0.24432165 },
            {  0.14061976, -0.27045935, -0.27751987 },
            { -0.24343532,  0.46477681,  0.19450749 },
            {  0.16170967, -0.13452439,  0.18726231 },
            { -0.11701834,  0.36519224,  0.15900936 },
            {  0.116753  , -0.25527553, -0.43776361 },
            {  0.00611477, -0.17832836, -0.17751034 },
            { -0.26806111,  0.24943646,  0.27429083 }
        };

    variableMatrix result;
    errorOut error = interpolate_gradients( detadX, values, result );

    if ( error ){
        errorOut result = new errorNode( "_test_interpolate_gradients", "Error in interpolation" );
        result->addNext( error );
        result->print();
        assert( 1 == 0 );
    }

    if ( !vectorTools::fuzzyEquals( result, answer ) ){
        errorOut result = new errorNode( "_test_interpolate_gradients", "The interpolated gradients are not correct" );
        result->print();
        assert( 1 == 0 );
    }
    return NULL;
}

errorOut evaluate_model( const variableVector &etas, const variableMatrix &detadX, const variableMatrix &values,
                         variableVector &PK2, variableVector &SIGMA, variableVector &M,
                         variableMatrix &DPK2Dgrad_u, variableMatrix &DPK2Dphi, variableMatrix &DPK2Dgrad_phi,
                         variableMatrix &DSIGMADgrad_u, variableMatrix &DSIGMADphi, variableMatrix &DSIGMADgrad_phi,
                         variableMatrix &DMDgrad_u, variableMatrix &DMDphi, variableMatrix &DMDgrad_phi ){
    /*!
     * Evaluate a pseudo constitutive model at a point
     *
     * Note that this isn't a model so much as a method to check the jacobians.
     *
     * :param variableVector &etas: The interpolation function values
     * :param variableVector &detadX: The gradient of the interpolation functions.
     * :param variableMatrix &values: The values of the degrees of freedom at the known points ( ndof x npoints )
     * :param variableVector &PK2: The PK2 stress
     * :param variableVector &SIGMA: The symmetric micro-stress in the reference configuration
     * :param variableVector &M: The higher order stress in the reference configuration.
     * :param variableMatrix &DPK2Dgrad_u: The Jacobian of the PK2 stress w.r.t the gradient of the macro displacement
     * :param variableMatrix &DPK2Dphi: The Jacobian of the PK2 stress w.r.t. the micro displacement
     * :param variableMatrix &DPK2Dgrad_phi: The Jacobian of the PK2 stress w.r.t. the gradient of the micro displacement
     *     in the reference configuration.
     * :param variableMatrix &DSIGMADgrad_u: The Jacobian of the symmetric micro-stress in the reference configuration w.r.t 
     *     the gradient of the macro displacement
     * :param variableMatrix &DSIGMADphi: The Jacobian of the symmetric micro-stress in the reference configuration w.r.t.
     *      the micro displacement
     * :param variableMatrix &DSIGMADgrad_phi: The Jacobian of the symmetric micro-stress in the reference configuration w.r.t.
     *      the gradient of the micro displacement in the reference configuration.
     * :param variableMatrix &DMDgrad_u: The Jacobian of the higher order stress in the reference configuration w.r.t 
     *     the gradient of the macro displacement
     * :param variableMatrix &DMDphi: The Jacobian of the higher order stress in the reference configuration w.r.t.
     *      the micro displacement
     * :param variableMatrix &DMDgrad_phi: The Jacobian of the higher order stress in the reference configuration w.r.t.
     *      the gradient of the micro displacement in the reference configuration.
     */

    variableVector utilde;
    variableMatrix dUtildedX;

    errorOut error = interpolate_values( etas, values, utilde );

    if ( error ){
        errorOut result = new errorNode( "evaluate_model", "Error in the computation of the DOF" );
        result->addNext( error );
        return result;
    }

    error = interpolate_gradients( detadX, values, dUtildedX );

    if ( error ){
        errorOut result = new errorNode( "evaluate_model", "Error in the computation of the gradient of the DOF" );
        result->addNext( error );
        return result;
    }

    variableVector grad_u = vectorTools::appendVectors( { dUtildedX[ 0 ], dUtildedX[ 1 ], dUtildedX[ 2 ] } );
    variableVector phi( utilde.begin() + 3, utilde.begin() + 12 );
    variableVector grad_phi = vectorTools::appendVectors( { dUtildedX[ 3 ], dUtildedX[  4 ], dUtildedX[  5 ],
                                                            dUtildedX[ 6 ], dUtildedX[  7 ], dUtildedX[  8 ],
                                                            dUtildedX[ 9 ], dUtildedX[ 10 ], dUtildedX[ 11 ] } );

    DPK2Dgrad_u =
        {
            { 6.9004971e-01,  8.2775052e-01,  4.7553715e-01,  2.6702810e-01,
              5.0729606e-01,  4.2612341e-01,  4.0090086e-01,  5.3271760e-01,
              1.9360553e-01 },
            { 3.4040244e-01,  6.1701450e-01,  8.8825800e-01,  8.9656783e-01,
              6.7433536e-01,  2.4952374e-01,  5.5635840e-01,  3.8714706e-01,
              8.1300103e-01 },
            { 3.5251657e-01,  1.4093254e-01,  1.9352602e-01,  4.2250713e-01,
              2.4968324e-01,  3.1072018e-01,  6.1519857e-01,  3.0568488e-01,
              3.9448070e-01 },
            { 8.0921160e-01,  6.1559380e-01,  5.3463500e-01,  9.4059529e-01,
              1.7250008e-01,  8.8962709e-01,  9.6425935e-01,  7.6184517e-01,
              3.6084211e-03 },
            { 8.0696050e-01,  9.0236963e-01,  7.5410540e-01,  2.3152167e-01,
              9.7255678e-01,  3.6071622e-01,  2.8201392e-01,  7.0583085e-01,
              2.0652787e-01 },
            { 5.7184983e-01,  3.6117885e-01,  1.5989782e-01,  9.8392562e-02,
              5.6218546e-01,  9.7779690e-01,  1.4721884e-01,  1.9894670e-02,
              2.3820349e-01 },
            { 5.8360935e-01,  6.3492416e-01,  4.5233787e-01,  6.3913689e-01,
              3.4272018e-02,  2.6777079e-01,  7.8994569e-01,  6.7496934e-01,
              8.1774514e-01 },
            { 7.6728684e-01,  8.9039632e-01,  3.2562607e-01,  9.4358533e-01,
              4.3700129e-01,  8.8397738e-01,  1.8651321e-01,  5.9979179e-01,
              1.1164577e-02 },
            { 6.3285829e-02,  4.3995546e-01,  6.0213318e-01,  8.8219112e-01,
              7.1684251e-01,  8.1291815e-01,  1.5922261e-01,  5.4940902e-01,
              6.7553588e-01 }
        };

    DPK2Dphi =
        {
            { 4.9379743e-01,  4.7707099e-01,  6.8327952e-01,  7.2866513e-01,
              2.0078922e-01,  8.7382909e-01,  8.3105173e-01,  5.9370545e-01,
              3.8797777e-01 },
            { 8.5780160e-01,  8.7815178e-01,  3.1447383e-01,  9.1987410e-01,
              2.5146539e-02,  5.9188210e-01,  1.8229887e-01,  9.4297871e-01,
              2.5144159e-01 },
            { 5.5571446e-01,  3.3097470e-01,  8.3147129e-01,  8.4787335e-02,
              3.3644792e-01,  6.3259304e-01,  3.2305986e-01,  4.0282797e-01,
              3.6096126e-01 },
            { 7.2512280e-01,  8.2764531e-01,  1.2282280e-01,  2.1015231e-01,
              6.2486892e-01,  4.2737863e-01,  4.0148374e-03,  6.2637157e-01,
              4.9506177e-01 },
            { 7.7764066e-01,  8.4853607e-01,  5.5795834e-01,  8.7449984e-01,
              9.5179613e-01,  4.5513700e-02,  2.5767117e-01,  8.4951255e-01,
              4.5585201e-01 },
            { 8.2472945e-01,  3.4878762e-01,  1.9822281e-01,  8.3401220e-02,
              3.1426640e-01,  3.3956356e-01,  7.0908758e-01,  5.9081407e-01,
              3.1879682e-01 },
            { 3.1698577e-01,  9.5517881e-01,  3.6142626e-01,  9.2274765e-01,
              1.0975835e-01,  3.8290942e-01,  9.7953289e-01,  4.2081370e-01,
              5.5743656e-01 },
            { 8.1355757e-01,  7.5377673e-01,  2.6885713e-01,  7.4937773e-01,
              1.6881374e-01,  5.3098407e-01,  1.6606035e-01,  6.3394376e-01,
              5.5680516e-01 },
            { 2.2938286e-01,  3.1297678e-01,  1.1915296e-01,  1.0463658e-01,
              8.3240123e-01,  5.4194134e-02,  2.6849241e-01,  2.7858124e-01,
              5.6610100e-02 }
        };

    DPK2Dgrad_phi =
        {
            { 9.7954738e-01,  3.0905126e-01,  2.0362648e-01,  1.0504305e-01,
              9.3358716e-01,  6.0644742e-01,  5.8737957e-01,  1.6570662e-01,
              9.2003599e-02,  4.6880254e-02,  9.8260516e-01,  2.0073500e-01,
              4.4537634e-01,  2.2505138e-01,  9.1550788e-02,  4.6624223e-01,
              1.9973044e-01,  2.9703270e-01,  5.2146074e-01,  4.1463416e-01,
              5.6993730e-01,  5.7096199e-01,  3.2736665e-01,  6.1990210e-01,
              3.5611895e-01,  8.9311369e-02,  8.5790741e-01 },
            { 3.9242702e-01,  8.3796614e-01,  7.0129591e-01,  7.1312096e-01,
              9.9118171e-01,  2.1532719e-01,  8.4200261e-01,  7.1330113e-01,
              3.0835465e-01,  1.0219497e-01,  4.0984676e-01,  4.9444643e-02,
              6.1830479e-02,  1.8102367e-02,  3.4530391e-01,  2.7200256e-01,
              9.1921095e-01,  7.6276433e-01,  7.9572840e-01,  5.8935178e-01,
              3.1324755e-01,  9.0209175e-01,  9.6974732e-01,  5.8344744e-01,
              4.0694159e-01,  2.9809233e-01,  8.4724452e-01 },
            { 8.6604982e-01,  5.0136957e-01,  2.3365311e-01,  2.0038250e-01,
              8.0527295e-01,  1.6896297e-01,  7.2699647e-01,  5.2605987e-02,
              8.5009940e-01,  1.2084814e-01,  7.2562055e-02,  1.4952051e-01,
              2.7230407e-01,  9.7866220e-01,  7.4688349e-01,  1.3274344e-01,
              6.5260596e-01,  8.4451034e-01,  5.2235917e-02,  8.2739034e-01,
              4.7741085e-01,  6.5900533e-01,  3.9969220e-01,  7.8796082e-01,
              9.4075854e-01,  5.5125143e-01,  3.0644610e-01 },
            { 9.0632522e-01,  3.6457564e-01,  3.5261327e-01,  3.5093365e-02,
              7.9390362e-01,  2.3812393e-01,  1.0461793e-01,  7.2541685e-01,
              9.5082217e-01,  4.2742049e-01,  3.0788970e-01,  7.6446345e-01,
              9.2136180e-02,  9.1833971e-01,  2.8550424e-01,  6.9647186e-01,
              6.7193513e-02,  6.0124488e-01,  8.9540486e-01,  4.0340006e-01,
              6.8316014e-01,  9.5979341e-02,  4.6164650e-01,  9.5016810e-01,
              3.7375771e-01,  5.9196789e-01,  6.7438613e-01 },
            { 8.9657533e-01,  2.3896781e-01,  5.8323116e-01,  9.6341636e-01,
              2.0395180e-01,  6.8050326e-01,  8.3275120e-01,  7.5559120e-01,
              4.8162194e-02,  5.0046744e-01,  9.9428762e-01,  3.3013856e-01,
              2.1150002e-01,  5.5651186e-01,  7.9813694e-01,  1.0543553e-01,
              8.5300993e-01,  5.8709274e-01,  5.8152709e-01,  7.9569727e-01,
              7.8461153e-05,  8.1545425e-01,  4.6722221e-01,  5.4284570e-01,
              4.7911029e-02,  3.3621558e-01,  1.0592251e-01 },
            { 8.7643963e-01,  1.5312987e-01,  8.6580754e-01,  7.5154702e-01,
              7.2169925e-01,  4.4424500e-01,  3.0206711e-01,  4.5401659e-02,
              3.5663301e-01,  9.1218383e-01,  8.5657435e-01,  7.0356948e-01,
              1.7624817e-01,  7.2169958e-02,  8.4358757e-01,  5.7936700e-03,
              7.0744832e-02,  7.5575382e-01,  2.7876699e-01,  3.6723625e-01,
              8.4744053e-01,  7.0537783e-02,  8.9616579e-01,  6.8226623e-01,
              1.2680740e-01,  7.8737829e-01,  2.2769736e-01 },
            { 9.4744733e-01,  5.5887073e-01,  8.3663780e-01,  1.1717180e-01,
              1.0844145e-01,  2.4525290e-01,  4.0574208e-01,  1.8423280e-01,
              9.1265548e-01,  8.3994141e-01,  4.3388722e-02,  9.7045535e-01,
              4.2687869e-01,  3.4057264e-01,  4.3811628e-01,  9.9441978e-01,
              1.6981429e-01,  9.4487654e-01,  9.9826572e-01,  9.9943436e-02,
              1.4443132e-01,  8.3169217e-01,  2.0339757e-01,  4.3705696e-01,
              6.6455847e-01,  6.1859036e-01,  8.1433064e-01 },
            { 7.0172092e-02,  8.1868235e-01,  3.6154091e-01,  5.5889377e-01,
              3.6960338e-01,  7.5047021e-01,  4.8781881e-01,  1.9644804e-02,
              5.3252520e-01,  2.5923597e-01,  6.2992251e-01,  7.0560673e-01,
              5.0919656e-01,  8.9246326e-01,  1.5938504e-01,  1.4283166e-03,
              5.3121911e-01,  3.2148974e-01,  9.6787980e-01,  8.5385063e-01,
              3.2459950e-01,  3.7690399e-01,  5.5125585e-01,  5.4275868e-01,
              3.8874769e-01,  4.1439462e-01,  2.8971056e-01 },
            { 5.9016640e-01,  1.4888320e-01,  2.2818207e-01,  1.4343177e-01,
              5.2226655e-01,  8.6798427e-01,  7.0619492e-01,  7.7680667e-01,
              1.7584855e-01,  3.2479911e-01,  6.0572409e-01,  7.6991746e-01,
              1.3903616e-01,  5.6198697e-01,  1.6557283e-01,  9.2014554e-01,
              3.1930508e-01,  7.4338708e-01,  4.1101122e-01,  1.1009983e-01,
              9.7972267e-01,  8.4844527e-01,  9.0623999e-01,  6.0573672e-01,
              4.8978933e-03,  5.3147489e-02,  6.3477593e-01 }
        };

    DSIGMADgrad_u =
        {
            { 9.3740045e-01,  6.7644796e-01,  6.6050399e-01,  9.0255627e-01,
              9.9809215e-01,  4.1733199e-01,  6.8921139e-02,  7.2708184e-02,
              5.7571136e-01 },
            { 1.4679169e-01,  6.8112273e-01,  3.8947857e-01,  7.9628342e-01,
              1.8809485e-01,  2.7349141e-01,  3.9268625e-01,  4.8766772e-01,
              5.4848686e-01 },
            { 8.6544249e-02,  7.0101133e-01,  2.8846606e-01,  3.8523690e-01,
              7.3200464e-01,  2.0649846e-01,  8.7866874e-01,  6.4676104e-01,
              2.9665520e-01 },
            { 5.3514008e-01,  8.5165402e-02,  2.6373193e-02,  8.2207502e-01,
              7.5478011e-01,  5.0325448e-01,  9.5054237e-01,  6.2812571e-02,
              2.9951237e-01 },
            { 8.5208776e-02,  7.9151917e-01,  8.8768618e-01,  5.5793701e-01,
              8.6302622e-01,  6.4646675e-01,  6.4552219e-02,  1.1241669e-01,
              1.6673277e-03 },
            { 7.8909374e-01,  5.5291583e-01,  9.8829735e-01,  1.2487987e-01,
              7.6527228e-01,  6.5300401e-01,  2.7425875e-01,  1.9432565e-01,
              1.8955472e-01 },
            { 1.5876989e-01,  6.5858465e-01,  2.2378078e-01,  6.2275388e-01,
              2.1917125e-01,  1.8541705e-02,  5.0088886e-02,  6.8343244e-01,
              5.0952880e-01 },
            { 1.6264424e-01,  7.8827637e-01,  4.6276510e-01,  4.3969198e-01,
              7.9320814e-01,  3.6345275e-01,  8.9015472e-01,  1.6244732e-04,
              8.9631408e-01 },
            { 5.2061063e-01,  9.7055189e-02,  3.4277687e-01,  2.8502345e-01,
              2.8047343e-01,  1.6499882e-01,  2.3493431e-01,  8.1989395e-01,
              6.5024222e-01 }
        };

    DSIGMADphi =
        {
            { 3.8312497e-01,  6.4590028e-01,  8.1261287e-01,  5.6214705e-01,
              8.0969990e-01,  6.4870544e-01,  7.9035309e-01,  8.4487803e-01,
              6.9567692e-01 },
            { 8.3990636e-01,  2.8163587e-01,  5.0956981e-01,  7.7171640e-01,
              8.0877868e-01,  7.8545091e-01,  9.6989706e-01,  4.3848861e-01,
              3.0128193e-01 },
            { 8.0071054e-01,  6.7695990e-01,  6.0594269e-01,  6.1840062e-01,
              6.9850931e-01,  3.0783663e-01,  2.2973931e-01,  3.6494324e-01,
              7.6248463e-02 },
            { 7.6149121e-01,  6.8772897e-01,  4.5788546e-01,  9.9303752e-01,
              8.8693040e-01,  3.3268847e-01,  6.8172139e-01,  6.6331934e-01,
              5.7824836e-02 },
            { 7.7025745e-02,  8.7395963e-01,  4.7900513e-01,  8.4599978e-01,
              7.8896353e-02,  9.9188635e-01,  3.2747532e-01,  9.7523686e-01,
              1.5839723e-01 },
            { 9.2058926e-01,  9.0483130e-01,  5.9612460e-01,  4.5910133e-01,
              1.9657774e-01,  8.9665875e-01,  4.5516820e-01,  7.9165170e-01,
              8.3135823e-01 },
            { 4.2200346e-01,  5.3327894e-02,  3.7023830e-01,  7.2082632e-01,
              5.1498093e-01,  4.4436765e-01,  4.1682852e-01,  1.8585180e-01,
              5.1236294e-01 },
            { 3.0797554e-01,  9.3849723e-01,  8.2324536e-01,  2.2762638e-01,
              1.5307666e-01,  1.2143008e-01,  3.1171189e-01,  4.1103420e-01,
              5.3734427e-01 },
            { 6.6596478e-01,  4.2216095e-01,  9.0339973e-01,  8.0953760e-02,
              7.6355466e-02,  1.1849421e-01,  2.1062911e-02,  2.1899723e-01,
              7.5418488e-01 }
        };

    DSIGMADgrad_phi =
        {
            { 3.7166708e-01,  3.0494269e-01,  7.9114530e-01,  8.2289602e-02,
              3.0460017e-01,  1.3958530e-01,  6.9384968e-01,  1.0641978e-01,
              6.2244636e-01,  5.8113208e-01,  5.1897234e-01,  1.5936886e-01,
              4.2066768e-01,  1.0590859e-01,  1.1570046e-01,  3.2532861e-01,
              3.3411103e-01,  9.7081327e-01,  8.0985305e-01,  7.8958982e-01,
              8.2303042e-01,  8.5968467e-01,  4.0505583e-01,  7.9918178e-01,
              5.3211388e-01,  3.5156688e-01,  5.0893419e-01 },
            { 2.0469592e-01,  6.1436618e-01,  3.6012311e-01,  3.9906925e-01,
              7.9786325e-01,  6.0281894e-01,  7.5832117e-02,  3.4900367e-02,
              1.0943248e-01,  4.1358634e-01,  5.7295142e-01,  9.4900220e-01,
              4.4007992e-01,  5.8121702e-02,  5.3577684e-01,  4.6460385e-01,
              3.7595046e-01,  9.7176344e-01,  7.5919373e-01,  7.4774034e-01,
              2.9648832e-02,  6.7804169e-01,  5.0263259e-01,  7.3045062e-01,
              4.3884451e-01,  7.7202077e-01,  3.2240554e-01 },
            { 6.4224600e-01,  5.9375777e-01,  1.4879759e-01,  5.8814467e-01,
              9.8429808e-01,  9.9069284e-01,  7.4370342e-01,  1.7497560e-01,
              5.6277632e-01,  1.1419065e-01,  3.8160780e-01,  3.8876546e-01,
              2.6945023e-01,  7.6932887e-01,  7.4286529e-01,  9.2869076e-01,
              3.2420612e-01,  6.2394480e-01,  9.6969558e-01,  2.9190475e-01,
              6.2732539e-01,  9.1225555e-01,  7.1215107e-01,  5.8474653e-01,
              9.0604417e-01,  4.2951640e-01,  1.1255192e-01 },
            { 3.0788513e-01,  6.9639219e-01,  2.6779361e-01,  9.8879695e-01,
              6.7279386e-01,  9.4942699e-01,  8.7794250e-01,  8.7807257e-01,
              6.4079395e-01,  7.7524115e-02,  6.3435363e-01,  9.2902377e-01,
              1.0315006e-01,  9.7595228e-01,  9.3260211e-01,  3.2863492e-01,
              8.7412547e-01,  5.9628166e-01,  8.4040950e-01,  6.3838525e-01,
              4.9420230e-01,  1.2117228e-01,  6.6942594e-01,  6.3086130e-01,
              5.8721220e-01,  9.3739615e-01,  2.8915403e-03 },
            { 4.2057031e-01,  8.7265809e-01,  4.2686295e-01,  1.3188342e-01,
              6.4108601e-02,  9.4363543e-01,  5.5399584e-01,  6.5533375e-01,
              3.5693567e-01,  1.3576830e-01,  8.2543426e-01,  9.9281217e-01,
              3.2611387e-01,  3.9921122e-01,  6.6979051e-01,  4.5975774e-02,
              5.3166764e-01,  5.7809099e-01,  9.2621344e-01,  4.2637501e-01,
              9.9723579e-01,  3.2150212e-01,  2.7628829e-01,  2.4821717e-01,
              2.2255212e-01,  3.9589618e-01,  6.4782769e-01 },
            { 6.4279260e-01,  8.5050956e-01,  8.9839626e-01,  6.0806958e-01,
              4.0167103e-01,  5.5826212e-01,  1.0417455e-01,  9.8612422e-01,
              4.7902788e-01,  7.3431955e-01,  8.5578832e-01,  5.9205496e-01,
              1.7116130e-01,  7.5308101e-01,  8.8577884e-01,  7.8427340e-02,
              5.9626216e-01,  4.2136718e-02,  7.2637009e-01,  4.1856931e-01,
              5.6554854e-01,  8.0695144e-01,  5.4709893e-01,  7.1964027e-01,
              3.2177309e-01,  4.1996071e-01,  6.1399062e-01 },
            { 7.6805116e-01,  6.1671150e-01,  8.5558282e-01,  1.3521763e-02,
              9.7198236e-01,  5.1382298e-01,  6.4340213e-01,  1.6311937e-02,
              9.8607169e-03,  8.9362298e-01,  1.1044616e-02,  4.8792570e-01,
              9.7606554e-01,  3.0052489e-01,  9.7015583e-01,  9.8550767e-01,
              5.5434549e-02,  9.7524976e-01,  7.8121148e-01,  1.3290339e-01,
              9.5925202e-01,  5.6600318e-01,  1.8211327e-01,  5.3443528e-01,
              7.9410295e-01,  3.0380398e-01,  4.1062687e-01 },
            { 8.8652307e-01,  3.1519347e-01,  7.3787100e-01,  2.5124095e-01,
              3.8391476e-01,  7.9409123e-01,  5.2089008e-01,  5.8193943e-01,
              1.3657132e-01,  5.4047999e-01,  7.6902729e-01,  1.2265246e-01,
              2.4662531e-02,  3.1218428e-01,  6.4983261e-02,  4.5461626e-01,
              3.7652047e-01,  9.5097869e-01,  8.6191931e-02,  1.0885281e-02,
              2.8478288e-01,  3.0957018e-01,  3.6703717e-01,  4.9372061e-01,
              8.0578597e-01,  6.8863718e-01,  5.1067124e-01 },
            { 3.3944991e-02,  1.8177406e-01,  8.3932552e-01,  4.6342228e-01,
              4.9270248e-01,  6.0791049e-01,  4.4365963e-01,  4.6343124e-01,
              4.9446959e-01,  6.3075962e-01,  9.7332655e-01,  3.7289779e-02,
              2.6051286e-01,  4.0138775e-01,  9.3811947e-01,  4.0464781e-01,
              8.7274981e-02,  5.2773817e-01,  9.9087945e-01,  9.8433130e-01,
              7.8806472e-01,  4.7735569e-01,  6.4675987e-01,  6.1799162e-01,
              7.9914851e-01,  6.8802697e-01,  5.6560934e-02 }
        };

    DMDgrad_u =
        {
            { 1.7664736e-01,  4.0455862e-01,  3.6876244e-01,  2.9022634e-01,
              1.9295761e-01,  9.7628113e-01,  2.5833357e-01,  2.4092420e-01,
              4.1392078e-01 },
            { 7.7947719e-01,  9.9605702e-01,  3.1413857e-01,  6.9696383e-01,
              5.4637020e-01,  8.2471976e-01,  7.6063194e-01,  8.1934259e-01,
              5.4042800e-01 },
            { 3.6157574e-01,  6.2876547e-01,  3.8210177e-01,  1.4162301e-01,
              7.1475841e-01,  2.0253033e-01,  6.1059841e-01,  3.7712122e-03,
              3.7902568e-01 },
            { 1.8561446e-01,  1.9763965e-01,  2.6600998e-01,  5.9732983e-01,
              7.3627520e-01,  1.0315822e-01,  4.4396091e-01,  9.1618384e-01,
              9.7538680e-01 },
            { 9.4984584e-01,  6.0437192e-01,  4.8484012e-01,  7.8284606e-01,
              6.7751379e-01,  5.4254325e-01,  5.9387625e-01,  8.7736413e-01,
              4.8863925e-01 },
            { 1.8601102e-01,  8.1905563e-02,  8.1942730e-01,  4.5400526e-01,
              5.4200462e-02,  2.6967418e-01,  1.9408831e-01,  9.7529712e-01,
              3.3237043e-01 },
            { 9.0795046e-01,  6.4271629e-01,  8.1910760e-01,  5.5308631e-01,
              3.3180849e-01,  8.4021319e-01,  1.0000906e-01,  3.3938029e-01,
              9.2342833e-01 },
            { 3.1296811e-01,  4.2748496e-01,  5.5484655e-01,  5.6418171e-01,
              1.4274824e-01,  6.4742291e-01,  1.4489436e-01,  7.8307079e-01,
              8.0892519e-02 },
            { 8.2583177e-01,  2.9374563e-01,  7.9518324e-01,  8.3771039e-01,
              9.8846421e-01,  5.3911841e-01,  3.1618044e-01,  7.2679142e-01,
              3.8977471e-01 },
            { 2.7729925e-01,  9.7730676e-01,  3.6870359e-01,  2.5714020e-01,
              9.9074211e-01,  8.3698032e-02,  3.6820401e-01,  5.7789434e-02,
              3.5271061e-01 },
            { 2.6972583e-01,  5.0627234e-01,  7.8121002e-01,  8.8840316e-01,
              2.9104276e-01,  3.1092626e-02,  2.9768068e-01,  4.4027798e-01,
              1.1767461e-01 },
            { 9.8232458e-01,  8.8569172e-01,  8.9700627e-01,  5.9599383e-01,
              3.6866813e-01,  6.7250973e-02,  9.8485518e-01,  1.6147820e-01,
              2.7577532e-01 },
            { 1.7329667e-01,  7.5923524e-01,  9.4766330e-01,  1.4907987e-01,
              8.6533415e-03,  2.6132054e-01,  1.7086798e-01,  3.1697024e-01,
              3.5473909e-01 },
            { 5.4940936e-01,  2.3259694e-01,  8.0677236e-01,  6.5062208e-01,
              1.8484870e-01,  3.3372038e-01,  1.0063954e-01,  2.9156305e-01,
              2.7438360e-01 },
            { 5.2457671e-01,  3.2656521e-01,  7.7410144e-01,  9.4935968e-01,
              2.8068777e-01,  2.9683034e-01,  1.5887085e-01,  9.1331541e-01,
              5.2495063e-01 },
            { 9.1510019e-01,  2.7742674e-01,  7.2857813e-01,  3.5850649e-01,
              3.4743577e-01,  6.2621580e-01,  4.2544822e-01,  7.9266336e-01,
              7.2100329e-01 },
            { 1.1221969e-01,  1.1361961e-01,  5.4308396e-02,  9.6946283e-01,
              9.6844490e-01,  6.9500570e-02,  9.2619176e-01,  3.1119608e-01,
              9.0530211e-02 },
            { 4.5160205e-01,  6.4580586e-01,  1.8467001e-01,  8.3278382e-01,
              2.9038973e-01,  3.5737544e-01,  7.0623727e-01,  3.4525142e-01,
              2.6470162e-01 },
            { 9.3920376e-01,  5.0230484e-01,  6.7839485e-01,  2.8504473e-01,
              4.4716000e-01,  6.7721893e-01,  4.3438296e-01,  1.1465896e-01,
              9.4046692e-01 },
            { 7.1374407e-01,  2.9632185e-01,  5.7263444e-01,  8.7491404e-01,
              8.7911897e-01,  9.9874131e-01,  5.2463020e-02,  4.1244885e-01,
              9.3383700e-01 },
            { 8.9641605e-01,  9.7711121e-01,  6.0786576e-02,  9.4473277e-02,
              2.1532442e-01,  7.4214284e-01,  3.9205975e-01,  3.0958830e-02,
              6.4053175e-01 },
            { 5.1464829e-01,  7.3210973e-01,  1.4927625e-01,  9.1120212e-02,
              3.9275854e-01,  5.4954446e-01,  9.2379826e-02,  4.4518560e-01,
              5.9661442e-01 },
            { 3.8829878e-01,  3.2195868e-01,  5.3032614e-01,  3.1201950e-01,
              5.5087810e-01,  7.3553931e-02,  9.6663739e-01,  9.5813957e-01,
              5.6466670e-01 },
            { 5.0097962e-01,  4.6524749e-01,  1.1326400e-01,  7.9948927e-01,
              7.9090027e-01,  3.6361945e-02,  4.7533073e-01,  9.3643017e-01,
              9.5934546e-01 },
            { 1.3264059e-01,  9.6001681e-01,  6.3389279e-01,  5.7176658e-01,
              9.3124739e-01,  2.6982999e-01,  9.7934979e-01,  3.9642079e-01,
              7.4404930e-01 },
            { 8.5035730e-01,  2.2199979e-01,  3.6866459e-01,  7.0906911e-01,
              3.0122765e-01,  5.1165271e-01,  8.3381596e-01,  2.2666671e-01,
              2.6930492e-01 },
            { 9.3011294e-01,  3.4892777e-01,  7.3842345e-02,  1.9272540e-01,
              2.7399907e-01,  3.2807457e-01,  3.4838395e-02,  3.5461411e-01,
              1.8385543e-01 }
        };

    DMDphi =
        {
            { 8.4828143e-01,  6.4752593e-01,  9.7195042e-01,  9.6705815e-01,
              3.2946655e-02,  6.5354063e-01,  9.2650563e-01,  5.1015082e-01,
              8.9678608e-01 },
            { 9.8539042e-01,  2.9863255e-03,  3.7689830e-01,  2.2433606e-01,
              1.2844278e-01,  8.2783977e-02,  3.3848773e-01,  9.9194807e-01,
              9.4793497e-01 },
            { 5.5568102e-01,  9.8320714e-01,  7.4457405e-02,  3.2620680e-01,
              5.3675126e-01,  4.2299481e-01,  1.1372104e-01,  2.0560688e-01,
              2.3535589e-01 },
            { 2.0527273e-01,  2.0638418e-01,  1.3963221e-01,  4.9787928e-01,
              2.3691552e-01,  8.2658596e-01,  5.0490251e-01,  2.8048028e-01,
              5.4774112e-01 },
            { 3.2244334e-01,  1.2586970e-01,  5.5130520e-02,  8.8966882e-01,
              8.0160092e-01,  8.7075019e-01,  5.1899954e-01,  9.8063994e-01,
              9.3315931e-01 },
            { 1.5911264e-01,  9.6202777e-01,  9.5582777e-01,  8.6449012e-03,
              9.8363388e-02,  7.2640089e-01,  4.9684906e-01,  6.6008079e-01,
              5.3701051e-01 },
            { 6.6402637e-01,  5.3993565e-01,  2.3016365e-01,  6.1871985e-01,
              7.7742329e-01,  1.1928861e-01,  2.6695705e-01,  2.2067928e-01,
              7.7488626e-01 },
            { 5.0714085e-01,  5.4903494e-01,  8.0680083e-01,  8.2624059e-01,
              8.3191503e-01,  9.8791687e-01,  3.7376400e-01,  8.8824542e-01,
              2.4347395e-01 },
            { 9.5629637e-01,  9.3830063e-01,  7.5002637e-01,  5.7197625e-01,
              8.9535092e-01,  3.2179185e-01,  9.6971533e-02,  4.1067811e-01,
              8.1384492e-01 },
            { 4.2840784e-01,  5.6937181e-01,  8.1317710e-01,  8.7236307e-01,
              6.9131199e-01,  1.2748181e-03,  9.4535991e-01,  8.2016271e-01,
              9.3459928e-01 },
            { 2.8061256e-01,  9.6123757e-01,  4.8136909e-01,  2.2761114e-01,
              2.9230022e-01,  9.2665038e-01,  7.0942771e-01,  1.7188839e-01,
              7.1696791e-01 },
            { 6.1692821e-01,  9.0379162e-01,  7.8896623e-01,  6.9386310e-01,
              8.6741356e-01,  3.3432338e-01,  7.4967903e-01,  3.3298719e-01,
              7.3378392e-01 },
            { 3.0031004e-01,  8.5166584e-01,  2.2428529e-01,  1.0991171e-01,
              3.5084553e-01,  3.5547762e-01,  3.8131841e-01,  1.8847279e-01,
              6.7375878e-01 },
            { 1.4178125e-01,  4.1256346e-01,  9.7725852e-01,  3.8263637e-01,
              3.1869443e-01,  9.5032685e-01,  5.4660229e-01,  4.6016326e-01,
              3.4882206e-01 },
            { 6.0914700e-01,  9.0156447e-01,  9.2727206e-01,  7.1087205e-01,
              1.4264240e-01,  9.2678885e-02,  5.8271165e-01,  3.4662115e-01,
              7.4391784e-01 },
            { 4.7787921e-01,  2.8559006e-01,  1.4679759e-01,  3.4768130e-02,
              3.6577026e-01,  3.8628657e-02,  8.8091004e-01,  5.8494486e-01,
              9.3558054e-01 },
            { 7.2692281e-02,  4.5527064e-01,  9.7216252e-01,  6.4744327e-01,
              9.8914828e-01,  1.6416951e-01,  6.4432327e-01,  1.4803662e-01,
              6.9829535e-02 },
            { 9.7780525e-01,  1.0068935e-01,  7.8772794e-01,  5.3457471e-01,
              9.6566342e-01,  4.5997477e-01,  5.3420019e-01,  5.0485312e-01,
              2.7092425e-01 },
            { 6.3488772e-01,  4.6422410e-01,  3.4813017e-01,  7.3117057e-01,
              7.5387323e-01,  6.7855915e-01,  6.6282422e-01,  9.9884146e-01,
              4.2443008e-01 },
            { 1.6984907e-01,  7.3114794e-01,  9.9928829e-01,  6.6819969e-01,
              9.3148685e-01,  2.3678404e-01,  6.3351284e-01,  2.2463867e-01,
              5.2486151e-01 },
            { 4.3050376e-01,  9.3280730e-01,  4.1480528e-01,  4.7855822e-02,
              6.0721405e-01,  2.5149249e-01,  4.2992971e-01,  8.9949294e-01,
              6.8677231e-01 },
            { 4.3445294e-01,  7.8901896e-01,  1.7827631e-01,  7.5375245e-01,
              9.3373146e-01,  2.8721006e-01,  3.1818318e-01,  1.7707610e-01,
              5.6804227e-01 },
            { 1.5515193e-01,  5.4121220e-01,  9.5643861e-01,  9.0942368e-01,
              4.7077142e-01,  7.9055373e-01,  4.7571384e-02,  3.4643649e-01,
              2.4668893e-02 },
            { 8.4431286e-01,  7.8991903e-01,  5.8394995e-01,  3.8149089e-01,
              1.4022959e-01,  5.5489229e-01,  7.4566801e-01,  1.0996847e-01,
              9.5137851e-01 },
            { 7.8996842e-01,  4.2049228e-01,  1.0383186e-01,  2.4757350e-01,
              4.4778183e-01,  9.4484245e-01,  6.5033249e-01,  1.6831305e-01,
              4.3588825e-01 },
            { 5.8032000e-01,  7.8831901e-01,  7.1524458e-01,  1.2458493e-01,
              2.3732209e-01,  9.7084216e-01,  5.7235418e-01,  1.0127057e-01,
              1.0124689e-02 },
            { 1.0626779e-02,  6.1547069e-01,  4.0971978e-01,  1.0015736e-02,
              3.7909136e-01,  6.0171842e-01,  9.5992297e-01,  2.1653482e-01,
              3.3607272e-01 }
        };

    DMDgrad_phi =
        {
            { 7.3995390e-01,  4.7209362e-01,  5.1718944e-01,  1.3721433e-01,
              3.9870959e-01,  6.2885969e-02,  1.3632462e-02,  1.7706965e-01,
              7.6289419e-01,  3.0876940e-01,  2.2428956e-01,  7.6102875e-01,
              8.6352261e-01,  3.1848930e-01,  3.7336399e-01,  5.9596133e-01,
              7.6761219e-01,  1.4956650e-01,  8.3227499e-01,  2.6575638e-01,
              5.9206969e-02,  4.9116144e-01,  9.3172115e-01,  5.8492120e-02,
              7.7356892e-01,  1.9601208e-01,  5.9470655e-01 },
            { 8.5632687e-01,  6.1024148e-01,  2.7341137e-01,  8.2977469e-01,
              4.8679029e-01,  9.4117339e-01,  4.1681618e-01,  8.7864222e-01,
              2.8256052e-01,  5.3337066e-01,  2.5517803e-01,  7.1219952e-01,
              8.3805264e-01,  1.1172010e-02,  7.6475025e-01,  1.7524992e-01,
              7.3024447e-01,  8.8805107e-01,  5.6229212e-01,  1.1633065e-01,
              7.1958260e-02,  7.7783326e-01,  4.8002112e-01,  7.4212353e-01,
              3.9580875e-01,  8.0999001e-01,  4.4069080e-01 },
            { 9.5158200e-01,  6.5399471e-01,  4.7444420e-01,  5.5393653e-01,
              7.5799800e-01,  2.1306980e-01,  5.8506831e-01,  9.3695354e-01,
              2.3097193e-01,  2.9351312e-01,  9.4773886e-02,  8.5736572e-01,
              9.1686537e-01,  7.3341314e-01,  1.3031104e-01,  3.6155650e-01,
              7.0920764e-02,  3.9673606e-01,  7.1714809e-01,  3.0009685e-01,
              7.1225379e-01,  7.0518926e-01,  8.0685549e-01,  1.9070980e-01,
              5.1114629e-01,  8.5435572e-01,  5.6959200e-01 },
            { 2.3108664e-01,  1.3503984e-01,  4.7584396e-01,  1.3368036e-01,
              3.7132282e-01,  8.2717243e-01,  9.3810073e-01,  9.2775712e-01,
              2.9013945e-01,  2.9791031e-01,  3.2274479e-02,  5.0722311e-01,
              9.0169811e-01,  5.0859050e-01,  7.3697815e-01,  1.9757588e-02,
              1.0904570e-01,  5.1576790e-01,  9.9412204e-01,  2.3356306e-01,
              9.7411102e-01,  8.2882588e-01,  6.1396755e-01,  1.0415059e-01,
              4.5425009e-02,  1.9965936e-01,  1.6371354e-01 },
            { 3.0383914e-01,  2.5227645e-01,  1.2845664e-01,  2.3975657e-01,
              3.0573782e-01,  1.7621441e-01,  3.3374538e-01,  8.3824506e-02,
              7.5389293e-01,  7.9512964e-01,  1.8423313e-01,  1.5134616e-01,
              9.8263498e-01,  6.8514685e-01,  7.4780061e-01,  5.8754264e-01,
              9.4535495e-01,  6.0712366e-01,  9.9334136e-02,  9.4458149e-01,
              6.2194488e-01,  5.4165136e-01,  5.3553448e-01,  8.6508471e-01,
              5.3131934e-01,  6.9325385e-01,  8.2028443e-01 },
            { 6.7550150e-01,  6.4269433e-01,  7.6705955e-01,  4.8143839e-01,
              8.7224235e-01,  9.8621368e-01,  3.2677400e-01,  8.0278254e-01,
              9.1767588e-01,  9.7733865e-01,  3.2983254e-01,  3.7008081e-01,
              9.5636021e-02,  3.2560160e-02,  7.3434803e-01,  9.6482689e-01,
              1.1717612e-01,  3.2120905e-01,  4.1968347e-01,  8.4734398e-01,
              8.8142514e-01,  3.6262916e-01,  8.7256401e-01,  1.0145587e-01,
              4.9622856e-01,  7.1709217e-01,  9.4408265e-01 },
            { 7.4033115e-01,  7.5314006e-02,  9.3216376e-01,  4.0251364e-01,
              7.5114575e-01,  1.0213783e-01,  2.3702190e-01,  8.1860117e-01,
              7.3675360e-01,  4.8159530e-01,  1.0148374e-02,  5.4898318e-01,
              6.2310619e-02,  9.2023297e-01,  1.3033189e-01,  1.4804910e-01,
              9.5927696e-01,  2.1625016e-01,  8.1375165e-01,  2.3740566e-01,
              6.8386703e-01,  2.2276500e-02,  8.5796925e-01,  9.4631313e-01,
              4.6910539e-03,  6.9859628e-01,  7.7882649e-01 },
            { 4.5300746e-01,  8.7586231e-01,  8.8891198e-01,  2.3928847e-01,
              4.9145307e-01,  3.7237496e-01,  7.0763717e-01,  8.5605115e-01,
              3.3767603e-01,  1.1198152e-01,  9.6580843e-01,  4.5416064e-01,
              1.4321546e-01,  6.0446722e-01,  9.0627318e-01,  7.3261530e-01,
              3.2889932e-01,  4.5824748e-01,  1.8650543e-01,  9.8571277e-01,
              3.8830278e-02,  4.0523568e-01,  3.3815394e-02,  5.9926935e-01,
              7.4409013e-01,  7.5271587e-01,  1.4366820e-01 },
            { 8.0458334e-01,  5.8404093e-01,  6.2012145e-01,  5.5752234e-01,
              2.8386216e-01,  9.1903216e-01,  3.7888592e-01,  6.0848051e-01,
              3.8525043e-01,  9.1344729e-02,  8.7334414e-01,  6.2622722e-01,
              8.5502173e-02,  4.8957253e-01,  2.7667951e-01,  9.0741127e-01,
              1.2721983e-01,  1.3995835e-01,  8.1724933e-01,  2.9047114e-01,
              1.0343391e-01,  6.2346794e-01,  1.0947153e-02,  8.8419890e-01,
              3.6945383e-01,  9.0255337e-01,  4.0047274e-02 },
            { 5.1261991e-01,  2.7896460e-01,  1.1186994e-01,  7.9279167e-01,
              4.3096030e-01,  7.6150125e-01,  7.8424937e-01,  5.7524908e-02,
              3.7264604e-01,  9.6404705e-01,  4.8908792e-01,  2.1599367e-01,
              7.7032161e-01,  5.4443910e-01,  8.5177712e-01,  2.9740587e-01,
              8.7081628e-01,  9.3164037e-01,  2.7269608e-01,  4.3394801e-01,
              4.8350387e-01,  3.0527383e-01,  7.4275355e-01,  4.8647642e-01,
              2.5618692e-01,  5.4285268e-01,  8.1426503e-01 },
            { 7.5284236e-01,  9.6756820e-01,  6.7258821e-01,  5.4564161e-01,
              4.6481338e-01,  2.8253442e-01,  2.0395717e-01,  2.9263331e-01,
              1.2745529e-01,  3.8723119e-01,  3.9599965e-01,  4.3527402e-01,
              8.5386889e-01,  8.1953819e-01,  9.4729893e-01,  7.9638894e-01,
              5.0099449e-01,  4.8592930e-01,  5.0838511e-01,  3.6870610e-01,
              1.1073164e-01,  8.7427911e-01,  6.4936656e-01,  2.8457420e-01,
              9.1959530e-01,  5.8913156e-01,  8.8869444e-01 },
            { 1.8505627e-01,  7.6607607e-01,  4.2866156e-01,  5.7086956e-01,
              8.1110538e-02,  3.4519736e-01,  9.5185225e-01,  3.9320806e-01,
              9.9544999e-01,  2.5995977e-01,  1.5402817e-01,  2.0271701e-01,
              8.2856202e-01,  1.4083351e-01,  5.6636581e-01,  1.9640570e-02,
              6.1136955e-01,  7.5209529e-01,  7.2495853e-01,  9.2526751e-01,
              6.1171413e-01,  5.7424478e-01,  3.9988396e-01,  9.0878990e-01,
              1.4747143e-01,  6.8689002e-01,  6.5981610e-01 },
            { 9.0022176e-01,  1.0374176e-01,  4.4683175e-01,  2.0622446e-01,
              9.9164856e-02,  4.8957023e-01,  9.8970525e-01,  3.1337188e-02,
              6.5069621e-01,  7.1735962e-01,  4.8398626e-01,  9.7780047e-01,
              7.4430837e-01,  5.0056351e-01,  9.1272596e-01,  4.1473513e-01,
              9.8321608e-01,  3.0896607e-01,  4.9249534e-01,  4.2015332e-01,
              6.9865971e-01,  4.4095867e-01,  8.3884951e-01,  9.6721089e-01,
              6.6277396e-01,  4.3458161e-01,  8.4533620e-01 },
            { 2.7959176e-01,  3.2101010e-01,  9.9015378e-01,  1.1903799e-01,
              3.5071960e-01,  9.0282290e-01,  5.7849037e-02,  1.8150219e-01,
              9.3688537e-01,  7.1795488e-01,  4.1474841e-02,  4.6668289e-01,
              4.7851722e-01,  4.8692445e-01,  6.4254763e-01,  6.8137447e-01,
              8.7749193e-01,  2.1485952e-01,  5.2149737e-01,  5.1352443e-01,
              9.5144137e-01,  7.4457315e-01,  7.8041393e-01,  6.0010023e-01,
              9.6452879e-01,  2.9242516e-01,  5.9968892e-01 },
            { 8.7206380e-01,  2.7509384e-01,  7.3086036e-01,  3.4503798e-01,
              5.4498119e-01,  1.0373459e-01,  3.7878770e-01,  5.2280716e-01,
              6.4510260e-01,  2.3154324e-01,  7.2435932e-01,  9.6639554e-01,
              3.6948362e-01,  1.3388319e-01,  2.8866906e-01,  8.7589917e-01,
              3.5855847e-01,  1.4881824e-01,  5.7662596e-01,  9.3474588e-01,
              1.6125179e-01,  1.6498689e-01,  5.7312080e-01,  2.2515283e-02,
              9.1045869e-01,  5.7481187e-01,  5.7437540e-01 },
            { 9.7593110e-01,  4.4925146e-01,  8.9803135e-01,  9.6790375e-01,
              6.8432031e-01,  8.8546687e-02,  1.3430262e-01,  6.9537800e-01,
              6.5696370e-01,  1.5695021e-01,  2.1438844e-01,  2.8860296e-01,
              8.1988121e-01,  2.1735867e-01,  9.3585164e-01,  9.1709657e-01,
              5.5058009e-01,  4.3490752e-01,  9.1954109e-02,  5.8947985e-01,
              3.5767962e-03,  8.9506707e-03,  9.0505205e-01,  9.3092855e-01,
              4.9895475e-01,  4.4198852e-01,  8.8339444e-01 },
            { 3.7904175e-01,  5.2394380e-01,  7.8857846e-01,  4.8816744e-01,
              6.1090798e-01,  8.6642797e-01,  8.0420027e-01,  5.9088068e-02,
              5.8120679e-01,  8.6110277e-01,  4.5228658e-01,  3.6951425e-01,
              2.5510770e-01,  2.4179444e-01,  3.9121360e-01,  8.2805657e-01,
              5.6267402e-01,  2.7330905e-01,  4.9129892e-02,  2.9428290e-01,
              3.5863046e-01,  2.4282627e-01,  2.2971951e-01,  3.5496035e-01,
              8.7641772e-01,  9.0741650e-02,  7.9867693e-02 },
            { 8.3456588e-01,  9.8836881e-01,  7.5977815e-01,  6.9052348e-01,
              8.2477321e-01,  4.8827290e-01,  3.4351800e-01,  7.4582116e-01,
              2.7244992e-01,  3.9325486e-01,  9.0926505e-02,  7.7105478e-02,
              8.0676576e-01,  4.7114969e-01,  3.7673160e-01,  4.6697433e-01,
              4.0582502e-01,  8.7952232e-01,  8.3684072e-01,  5.5750330e-01,
              1.7107384e-02,  7.5647975e-02,  6.3402721e-01,  5.3254453e-01,
              8.6293278e-01,  5.4304897e-01,  4.0050436e-01 },
            { 9.3379570e-01,  6.5564638e-01,  1.2649384e-01,  9.8854774e-01,
              3.5340674e-01,  7.6553442e-01,  2.6248128e-01,  1.7014676e-02,
              3.7395730e-01,  5.9444880e-01,  2.1594713e-01,  9.6261881e-01,
              9.2035510e-01,  1.5055641e-03,  2.2352396e-01,  1.7013139e-01,
              3.2772868e-02,  7.9404771e-01,  6.0237869e-01,  2.9330715e-01,
              3.9086247e-01,  4.3128210e-01,  1.6687803e-02,  5.4704816e-02,
              1.4062105e-01,  9.1838543e-01,  8.9202968e-01 },
            { 7.4107307e-01,  2.4360755e-01,  4.0627133e-01,  6.4386192e-02,
              2.9503819e-01,  8.3520118e-01,  8.8520664e-01,  3.5152095e-02,
              5.1720946e-01,  2.6788808e-01,  2.7571520e-01,  4.7845830e-01,
              4.3811803e-01,  6.8941221e-01,  4.3872862e-01,  1.5976521e-01,
              9.4467384e-01,  8.6185461e-01,  6.1564145e-02,  1.9888991e-01,
              5.1401673e-01,  9.8102918e-02,  7.5992764e-01,  2.1810376e-01,
              4.4378378e-01,  1.7312307e-01,  7.7803468e-01 },
            { 1.4918626e-01,  5.9456441e-01,  9.2538820e-01,  3.2302321e-01,
              7.5600854e-01,  3.2803563e-01,  9.0319239e-01,  7.2055358e-01,
              2.4961927e-01,  2.1127578e-01,  9.0431435e-01,  9.0192385e-01,
              6.1944286e-01,  7.6940835e-01,  1.1733157e-01,  1.3059847e-01,
              5.4691929e-01,  5.4053801e-01,  8.0402281e-01,  8.6588073e-01,
              1.4402486e-01,  9.7640513e-01,  6.5272152e-01,  3.0962790e-01,
              8.1353634e-01,  7.7862694e-01,  8.5623962e-01 },
            { 7.3836989e-01,  3.3759771e-02,  3.3930065e-01,  7.5579553e-01,
              5.0732770e-02,  5.5220725e-01,  2.0610013e-01,  7.9315344e-01,
              4.0161132e-02,  2.8640118e-01,  6.6073123e-01,  6.8197856e-01,
              6.1558093e-01,  2.4707947e-01,  2.3993534e-01,  9.1596874e-01,
              9.6138847e-01,  9.8598328e-01,  7.0086373e-01,  8.4499892e-01,
              6.0689299e-01,  7.1653229e-01,  6.3858808e-01,  7.2656076e-01,
              7.6868034e-01,  9.7036433e-01,  1.8762443e-01 },
            { 4.3345351e-01,  6.6469720e-01,  6.8745214e-01,  4.0337211e-01,
              8.8511287e-01,  4.2098785e-01,  9.7951194e-01,  1.0193443e-01,
              8.5794224e-01,  1.1970587e-01,  5.2940646e-01,  5.6854497e-01,
              5.4960074e-01,  4.7664718e-01,  4.4301396e-01,  6.8428798e-02,
              7.6084062e-01,  4.1953742e-01,  9.4117055e-01,  3.1648076e-01,
              3.6202545e-01,  8.0236201e-01,  7.2657633e-01,  6.2798720e-01,
              3.6057230e-01,  6.4687140e-01,  1.4167002e-01 },
            { 4.3002738e-01,  5.8964824e-01,  3.2924835e-01,  1.5502000e-01,
              4.4872282e-01,  9.4313298e-01,  9.2613594e-01,  6.6158117e-01,
              6.0148626e-01,  3.6727031e-01,  8.0563154e-01,  6.8006417e-01,
              7.0353031e-01,  1.8160134e-01,  5.8319769e-01,  3.6300778e-01,
              2.2791826e-01,  6.2045172e-01,  2.7204329e-01,  4.0528293e-01,
              6.6020494e-01,  7.2154845e-01,  4.6332743e-01,  2.7197151e-01,
              9.4721907e-01,  4.7066676e-01,  4.7670386e-01 },
            { 8.0638463e-01,  9.9448941e-01,  7.6180997e-01,  5.9605512e-01,
              1.3767150e-02,  5.2206326e-01,  1.5109263e-01,  4.6377752e-01,
              9.1610881e-01,  2.4480577e-01,  7.3631319e-01,  8.0592581e-01,
              4.5758982e-01,  5.9042290e-01,  5.5944114e-01,  8.5798539e-01,
              9.2396597e-01,  1.9006200e-01,  5.1517911e-01,  4.7414784e-01,
              8.6571419e-01,  5.5416668e-01,  1.1812224e-01,  9.8171736e-01,
              3.5527103e-01,  3.6057511e-01,  1.7321853e-01 },
            { 4.1741526e-01,  6.6831149e-01,  9.0841320e-01,  4.4575593e-01,
              8.8679975e-01,  8.6328743e-02,  3.4767039e-01,  9.3563027e-01,
              1.3407545e-01,  6.7309803e-01,  6.5500107e-01,  3.4027911e-02,
              6.6950170e-01,  5.5596549e-01,  7.5292611e-01,  7.9545854e-01,
              3.7327807e-01,  4.5144157e-01,  4.4439440e-02,  5.5068927e-01,
              3.6435759e-01,  2.8214850e-01,  2.9224289e-01,  6.0058473e-01,
              4.1975122e-01,  1.5326834e-02,  4.7003877e-01 },
            { 4.1880661e-01,  6.8955087e-01,  4.6001235e-01,  2.4529396e-01,
              1.1578413e-01,  3.6951575e-01,  2.4061396e-01,  8.0894813e-01,
              1.7408068e-01,  7.8154759e-01,  9.9511713e-01,  9.5114707e-01,
              9.3527067e-01,  9.7348406e-01,  4.3603789e-01,  5.7435363e-01,
              2.5099351e-01,  9.5299739e-01,  1.5509192e-01,  7.7071790e-01,
              5.0396641e-01,  4.8195087e-01,  1.9753054e-01,  5.7293828e-01,
              7.5791447e-01,  1.0933231e-01,  2.9640682e-01 }
        };

    PK2   = vectorTools::dot( DPK2Dgrad_u, grad_u )   + vectorTools::dot( DPK2Dphi, phi )
          + vectorTools::dot( DPK2Dgrad_phi, grad_phi );

    SIGMA = vectorTools::dot( DSIGMADgrad_u, grad_u ) + vectorTools::dot( DSIGMADphi, phi )
          + vectorTools::dot( DSIGMADgrad_phi, grad_phi );

    M     = vectorTools::dot( DMDgrad_u, grad_u )     + vectorTools::dot( DMDphi, phi )
          + vectorTools::dot( DMDgrad_phi, grad_phi );

    return NULL;
}

errorOut evaluate_model( const variableVector &etas, const variableMatrix &detadX, const variableMatrix &values,
                         variableVector &PK2, variableVector &SIGMA, variableVector &M ){
    /*!
     * Evaluate a pseudo constitutive model at a point
     *
     * Note that this isn't a model so much as a method to check the jacobians.
     *
     * :param variableVector &etas: The interpolation function values.
     * :param variableMatrix &detadX: The gradient of the interpolation functions w.r.t. X.
     * :param variableMatrix &values: The values of the degrees of freedom at the known points ( ndof x npoints )
     * :param variableVector &PK2: The PK2 stress
     * :param variableVector &SIGMA: The symmetric micro-stress in the reference configuration
     * :param variableVector &M: The higher order stress in the reference configuration.
     */

    variableMatrix DPK2Dgrad_u, DPK2Dphi, DPK2Dgrad_phi,
                   DSIGMADgrad_u, DSIGMADphi, DSIGMADgrad_phi,
                   DMDgrad_u, DMDphi, DMDgrad_phi;

    return evaluate_model( etas, detadX, values, PK2, SIGMA, M, DPK2Dgrad_u, DPK2Dphi, DPK2Dgrad_phi,
                           DSIGMADgrad_u, DSIGMADphi, DSIGMADgrad_phi,
                           DMDgrad_u, DMDphi, DMDgrad_phi );
}

errorOut _test_evaluate_model( ){
    /*!
     * Internal test of the pseudo model.
     */

    variableVector etas = { 0.36852295, 0.97637554, 0.73179659, 0.68487472, 0.39762759, 0.31758111, 0.77389198, 0.61821572 };
    variableMatrix detadX =
        {
            { -0.29444605,  0.07238605,  0.43713906 },
            { -0.04698417, -0.40157226,  0.16954795 },
            {  0.13448525,  0.03186528, -0.30307097 },
            { -0.24891382,  0.3754754 ,  0.28469287 },
            { -0.44101342,  0.33897349,  0.30851798 },
            { -0.41890348,  0.37183943, -0.07587246 },
            { -0.16728468,  0.04201381,  0.06121883 },
            { -0.19766519, -0.32000607, -0.46894013 }
        };

    variableMatrix values =
        {
            {  0.17731668, -0.15865735,  0.34206721, -0.0840164 ,  0.22072846,  0.19713675, -0.05521133, -0.06724891 },
            {  0.36570213, -0.49773919, -0.0468549 , -0.14928391,  0.3566579 ,  0.05454419,  0.30139775,  0.10009692 },
            {  0.02839771, -0.27099594,  0.3268313 , -0.40346198,  0.23107736, -0.0216891 ,  0.07994532, -0.28122228 },
            {  0.08438573, -0.10177786, -0.32459302,  0.00686261,  0.34034989, -0.28430275, -0.43718291,  0.14568342 },
            { -0.35720521, -0.43625961,  0.39841842,  0.17191936, -0.36538435, -0.49708906,  0.11851704, -0.26731614 },
            { -0.3717092 ,  0.04059797, -0.20701823,  0.19374649, -0.07539915, -0.28326464, -0.29816502,  0.46869672 },
            { -0.3283136 , -0.20761489, -0.41540895,  0.33912041,  0.20656594,  0.38157274,  0.03904779, -0.24227912 },
            {  0.15126979,  0.3511807 ,  0.33206935,  0.44103036, -0.14856347, -0.44038337, -0.0889653 , -0.11631477 },
            {  0.41895973, -0.22126793,  0.48640171, -0.32228643,  0.18169337,  0.36786474,  0.05204352, -0.47173868 },
            { -0.07257373,  0.07680379,  0.18734109, -0.06067456, -0.35509802,  0.18593935, -0.37953488,  0.42246967 },
            { -0.45442497,  0.11123504, -0.42798247,  0.44491971, -0.08782663, -0.16396531, -0.20379889,  0.48399711 },
            {  0.01555576, -0.06202483, -0.35382355, -0.08608767,  0.24526508,  0.24108876,  0.46201566, -0.2337636  }
        };

    variableVector PK2Answer = { -0.16335427, -0.43476734, -0.65547666,
                                 -1.02621282,  0.82408532,  0.28247502,
                                 -0.70993856, -0.51221675,  0.05380615 };

    variableVector SIGMAAnswer = { -0.38577293,  0.3493224 , -0.39096691,
                                   -0.02902558, -0.12753987, -0.47446202,
                                   -0.33419166, -0.23793295, -0.7743247 };

    variableVector MAnswer = { -0.73212555,  0.53712951, -0.20549878, -0.32874987,  0.09887401,
                               -1.26342234, -0.30712162,  0.00707014, -0.23329895,  0.63135435,
                                0.03226065, -0.18293223,  0.02145701, -1.17581915, -0.81797602,
                                0.49896345, -0.02666209, -0.01179518,  0.69948545,  0.0433835 ,
                                0.6018377 ,  0.3977454 ,  0.34752708, -0.85284592,  0.14908603,
                               -0.63299163, -0.12651926 };

    variableVector PK2, SIGMA, M;
    
    errorOut error = evaluate_model( etas, detadX, values, PK2, SIGMA, M );

    if ( error ){
        errorOut result = new errorNode( "_test_evaluate_model", "Error in computation of pseudo model" );
        result->addNext( error );
        result->print();
        assert( 1 == 0 );
    }

    if ( !vectorTools::fuzzyEquals( PK2, PK2Answer ) ){
        errorOut result = new errorNode( "_test_evaluate_model", "The PK2 stress isn't what was expected" );
        result->print();
        assert( 1 == 0 );
    }

    if ( !vectorTools::fuzzyEquals( SIGMA, SIGMAAnswer ) ){
        errorOut result = new errorNode( "_test_evaluate_model", "The SIGMA stress isn't what was expected" );
        result->print();
        assert( 1 == 0 );
    }

    if ( !vectorTools::fuzzyEquals( M, MAnswer ) ){
        errorOut result = new errorNode( "_test_evaluate_model", "The M stress isn't what was expected" );
        result->print();
        assert( 1 == 0 );
    }

    return NULL;
}

int test_compute_internal_force( std::ofstream &results ){
    /*!
     * Test the computation of the internal force.
     *
     * :param std::ofstream &results: The output file
     */

    variableVector F = { 1, 2, 3,
                         4, 5, 6,
                         7, 8, 9 };

    variableVector PK2 = { 10, 11, 12,
                           13, 14, 15,
                           16, 17, 18 };

    double dNdX[ 3 ] = { 0.1, 0.2, 0.3 };

    variableVector answer = { -55.2, -136.2, -217.2 };

    double result[ 3 ];

    balance_equations::compute_internal_force( dNdX, F, PK2, result );

    for ( unsigned int i = 0; i < 3; i++ ){
        if ( !vectorTools::fuzzyEquals( result[ i ], answer[ i ] ) ){
            results << "test_compute_internal_force (test 1) & False\n";
            return 1;
        }

        double temp;
        balance_equations::compute_internal_force( i, dNdX, F, PK2, temp );

        if ( !vectorTools::fuzzyEquals( answer[ i ], temp ) ){
            results << "test_compute_internal_force (test 2) & False\n";
            return 1;
        }
    }

    results << "test_compute_internal_force & True\n";
    return 0;
}

int test_compute_body_force( std::ofstream &results ){
    /*!
     * Test the computation of the body force term.
     *
     * :param std::ofstream &results: The output file.
     */

    double b[ 3 ] = { 1, 2, 3 };
    variableType density = 4.15;
    variableType N = 0.271;

    double answer[ 3 ] = { 1.12465, 2.2493 , 3.37395 };
    double result[ 3 ];

    balance_equations::compute_body_force( N, density, b, result );

    for ( unsigned int i = 0; i < 3; i++ ){
        if ( !vectorTools::fuzzyEquals( result[ i ], answer[ i ] ) ){
            results << "test_compute_body_force (test 1) & False\n";
            return 1;
        }

        double temp;
        balance_equations::compute_body_force( i, N, density, b, temp );

        if ( !vectorTools::fuzzyEquals( answer[ i ], temp ) ){
            results << "test_compute_body_force (test 2) & False\n";
            return 1;
        }
    }

    results << "test_compute_body_force & True\n";
    return 0;
}

int test_compute_inertia_force( std::ofstream &results ){
    /*!
     * Test the computation of the intertial force term
     *
     * :param std::ofstream &results: The output file.
     */

    variableType N = 0.1262;
    variableType density = 2.137;
    double a[ 3 ] = { .261, .781, .512 };

    double answer[ 3 ] = { -0.07038893, -0.21062742, -0.13808097 };
    double result[ 3 ];

    balance_equations::compute_inertia_force( N, density, a, result );

    for ( unsigned int i = 0; i < 3; i++ ){
        if ( !vectorTools::fuzzyEquals( result[ i ], answer[ i ] ) ){
            results << "test_compute_inertia_force (test 1) & False\n";
            return 1;
        }

        double temp;
        balance_equations::compute_inertia_force( i, N, density, a, temp );

        if ( !vectorTools::fuzzyEquals( answer[ i ], temp ) ){
            results << "test_compute_inertia_force (test 2) & False\n";
            return 1;
        }
    }

    results << "test_compute_inertia_force & True\n";
    return 0;
}

int test_compute_internal_couple( std::ofstream &results ){
    /*!
     * Test the computation of the internal couple
     *
     * :param std::ofstream &results: The output file.
     */

    variableType N = 0.14940184445609295;
    variableVector F = { 0.12460812, 0.31971128, 0.67550862,
                         0.61095383, 0.87972732, 0.30872424,
                         0.32158187, 0.25480281, 0.45570006 };

    variableVector PK2 = { 0.69090695, 0.72388584, 0.14880964,
                           0.67520596, 0.15106516, 0.77810545,
                           0.07641724, 0.09367471, 0.15905979 };

    variableVector SIGMA = { 0.0651695 , 0.52150417, 0.91873444,
                             0.5622355 , 0.50199447, 0.26729942,
                             0.89858519, 0.09043229, 0.47643382 };

    double dNdX[ 3 ] = { 0.47156478, 0.70952355, 0.91143106 };

    variableVector chi = { 0.39978213, 0.75363408, 0.36656435,
                           0.5132958 , 0.70216153, 0.28540018,
                           0.78854133, 0.1480301 , 0.67998555 };

    variableVector M = { 0.56108707, 0.96515216, 0.75422717, 0.05993671, 0.31106832,
                         0.56857958, 0.137549  , 0.42936996, 0.69791426, 0.71632842,
                         0.93923384, 0.96486191, 0.02510584, 0.08724847, 0.35031414,
                         0.34463859, 0.54019298, 0.13329819, 0.31331963, 0.56039227,
                         0.86780486, 0.86123368, 0.44166717, 0.63443824, 0.74293527,
                         0.19282243, 0.05489031 };

    double answer[ 9 ] = { -1.46993722, -1.4602623 , -1.61520049,
                           -2.88148157, -2.75116191, -3.13204731,
                           -1.60662834, -1.54919786, -1.70457928 };

    double result[ 9 ];

    balance_equations::compute_internal_couple( N, dNdX, F, chi, PK2, SIGMA, M, result );

    for ( unsigned int i = 0; i < 9; i++ ){
        if ( !vectorTools::fuzzyEquals( result[ i ], answer[ i ] ) ){
            std::cout << i << "\n";
            results << "test_compute_internal_couple (test 1) & False\n";
            return 1;
        }

        double temp;
        balance_equations::compute_internal_couple( i / 3, i % 3, N, dNdX, F, chi, PK2, SIGMA, M, temp );
        if ( !vectorTools::fuzzyEquals( answer[ i ], temp ) ){
            results << "test_compute_internal_couple (test 2) & False\n";
            return 1;
        }
    }

    results << "test_compute_internal_couple & True\n";
    return 0;
}

int test_compute_body_couple( std::ofstream &results ){
    /*!
     * Test the computation of the body force couple
     *
     * :param std::ofstream &results: The output file
     */

    variableType N = 0.24498934519109938;
    variableType density = 0.5124212990408172;
    double l[ 9 ] = { 0.37607047, 0.28205641, 0.84962159,
                      0.37917927, 0.89360894, 0.17644279,
                      0.72736826, 0.53971981, 0.22072536 };

    double answer[ 9 ] = { 0.04721104, 0.03540873, 0.10665959,
                           0.04760132, 0.11218166, 0.02215023,
                           0.09131218, 0.06775522, 0.02770937 };

    double result[ 9 ];

    balance_equations::compute_body_couple( N, density, l, result );

    for ( unsigned int i = 0; i < 9; i++ ){
        if ( !vectorTools::fuzzyEquals( result[ i ], answer[ i ] ) ){
            results << "test_compute_body_couple (test 1) & False\n";
            return 1;
        }

        double temp;
        balance_equations::compute_body_couple( i / 3, i % 3, N, density, l, temp );
        if ( !vectorTools::fuzzyEquals( temp, answer[ i ] ) ){
            results << "test_compute_body_couple (test 2) & False\n";
            return 1;
        }
    }

    results << "test_compute_body_couple & True\n";
    return 0;
}

int test_compute_inertia_couple( std::ofstream &results ){
    /*!
     * Test the computation of the inertia couple term
     *
     * :param std::ofstream &results: The output file.
     */

    variableType N = 0.5619258626089889;
    variableType density = 0.9913690562264066;
    double omega[ 9 ] = { 0.25013355, 0.27169262, 0.23286954,
                          0.90426712, 0.10991883, 0.58144111,
                          0.35675061, 0.75618734, 0.02762653 };
    double answer[ 9 ] = { -0.13934337, -0.15135341, -0.12972601,
                           -0.50374543, -0.06123313, -0.32390684,
                           -0.19873717, -0.42125375, -0.01539008 };
    double result[ 9 ];

    balance_equations::compute_inertia_couple( N, density, omega, result );

    for ( unsigned int i = 0; i < 9; i++ ){
        if ( !vectorTools::fuzzyEquals( result[ i ], answer[ i ] ) ){
            results << "test_compute_inertia_couple (test 1) & False\n";
            return 1;
        }

        double temp;
        balance_equations::compute_inertia_couple( i / 3, i % 3, N, density, omega, temp );
        if ( !vectorTools::fuzzyEquals( temp, answer[ i ] ) ){
            results << "test_compute_inertia_couple (test 2) & False\n";
            return 1;
        }
    }

    results << "test_compute_inertia_couple & True\n";
    return 0;
}

int test_compute_internal_force_jacobian( std::ofstream &results ){
    /*!
     * Test the computation of the internal force jacobian
     *
     * :param std::ofstream &results: The output file.
     */

    variableVector etas = { 0.36852295, 0.97637554, 0.73179659, 0.68487472, 0.39762759, 0.31758111, 0.77389198, 0.61821572 };

    variableMatrix detadX =
        {
            { -0.29444605,  0.07238605,  0.43713906 },
            { -0.04698417, -0.40157226,  0.16954795 },
            {  0.13448525,  0.03186528, -0.30307097 },
            { -0.24891382,  0.3754754 ,  0.28469287 },
            { -0.44101342,  0.33897349,  0.30851798 },
            { -0.41890348,  0.37183943, -0.07587246 },
            { -0.16728468,  0.04201381,  0.06121883 },
            { -0.19766519, -0.32000607, -0.46894013 }
        };


    variableType N = 0.271;
    variableType dNdX[ 3 ] = { 0.282, -.771, .420 };

    variableMatrix values =
        {
            {  0.17731668, -0.15865735,  0.34206721, -0.0840164 ,  0.22072846,  0.19713675, -0.05521133, -0.06724891 },
            {  0.36570213, -0.49773919, -0.0468549 , -0.14928391,  0.3566579 ,  0.05454419,  0.30139775,  0.10009692 },
            {  0.02839771, -0.27099594,  0.3268313 , -0.40346198,  0.23107736, -0.0216891 ,  0.07994532, -0.28122228 },
            {  0.08438573, -0.10177786, -0.32459302,  0.00686261,  0.34034989, -0.28430275, -0.43718291,  0.14568342 },
            { -0.35720521, -0.43625961,  0.39841842,  0.17191936, -0.36538435, -0.49708906,  0.11851704, -0.26731614 },
            { -0.3717092 ,  0.04059797, -0.20701823,  0.19374649, -0.07539915, -0.28326464, -0.29816502,  0.46869672 },
            { -0.3283136 , -0.20761489, -0.41540895,  0.33912041,  0.20656594,  0.38157274,  0.03904779, -0.24227912 },
            {  0.15126979,  0.3511807 ,  0.33206935,  0.44103036, -0.14856347, -0.44038337, -0.0889653 , -0.11631477 },
            {  0.41895973, -0.22126793,  0.48640171, -0.32228643,  0.18169337,  0.36786474,  0.05204352, -0.47173868 },
            { -0.07257373,  0.07680379,  0.18734109, -0.06067456, -0.35509802,  0.18593935, -0.37953488,  0.42246967 },
            { -0.45442497,  0.11123504, -0.42798247,  0.44491971, -0.08782663, -0.16396531, -0.20379889,  0.48399711 },
            {  0.01555576, -0.06202483, -0.35382355, -0.08608767,  0.24526508,  0.24108876,  0.46201566, -0.2337636  }
        };

    //Form the numeric gradients
    variableVector eye( 9 );
    vectorTools::eye( eye );

    unsigned int n = 0;
    variableType eps = 1e-6;

    variableMatrix DfintDU_numeric( 3, variableVector( 12, 0 ) );

    for ( unsigned int i = 0; i < 12; i++ ){
        variableMatrix delta( 12, variableVector( 8, 0 ) );
        delta[ i ][ n ] = eps * fabs( values[ i ][ n ] ) + eps;

        variableMatrix dUtildedX_P, dUtildedX_M;

        variableVector PK2_P, SIGMA_P, M_P,
                       PK2_M, SIGMA_M, M_M;

        double fint_P[ 3 ], fint_M[ 3 ];

        //Compute the positive perturbation
        interpolate_gradients( detadX, values + delta, dUtildedX_P );

        variableVector F_P = vectorTools::appendVectors( { dUtildedX_P[ 0 ], dUtildedX_P[ 1 ], dUtildedX_P[ 2 ] } );
        F_P += eye;

        errorOut error = evaluate_model( etas, detadX, values + delta, PK2_P, SIGMA_P, M_P );

        if ( error ){
            error->print();
            results << "test_compute_internal_force_jacobian & False\n";
            return 1;
        }

        balance_equations::compute_internal_force( dNdX, F_P, PK2_P, fint_P );

        //Compute the negative perturbation
        interpolate_gradients( detadX, values - delta, dUtildedX_M );

        variableVector F_M = vectorTools::appendVectors( { dUtildedX_M[ 0 ], dUtildedX_M[ 1 ], dUtildedX_M[ 2 ] } );
        F_M += eye;

        error = evaluate_model( etas, detadX, values - delta, PK2_M, SIGMA_M, M_M );

        if ( error ){
            error->print();
            results << "test_compute_internal_force_jacobian & False\n";
            return 1;
        }

        balance_equations::compute_internal_force( dNdX, F_M, PK2_M, fint_M );
        
        for ( unsigned int j = 0; j < 3; j++ ){
            DfintDU_numeric[ j ][ i ] = ( fint_P[ j ] - fint_M[ j ] ) / ( 2 * delta[ i ][ n ] );
        }
    }

    variableMatrix dUtildedX;
    interpolate_gradients( detadX, values, dUtildedX );
    variableVector F = vectorTools::appendVectors( { dUtildedX[ 0 ], dUtildedX[ 1 ], dUtildedX[ 2 ] } ) + eye;

    variableVector PK2, SIGMA, M;
    variableMatrix DPK2Dgrad_u, DPK2Dphi, DPK2Dgrad_phi,
                   DSIGMADgrad_u, DSIGMADphi, DSIGMADgrad_phi,
                   DMDgrad_u, DMDphi, DMDgrad_phi;

    errorOut error = evaluate_model( etas, detadX, values, PK2, SIGMA, M, DPK2Dgrad_u, DPK2Dphi, DPK2Dgrad_phi,
                                     DSIGMADgrad_u, DSIGMADphi, DSIGMADgrad_phi,
                                     DMDgrad_u, DMDphi, DMDgrad_phi );

    if ( error ){
        error->print();
        results << "test_compute_internal_force_jacobian & False\n";
        return 1;
    }

    //Evaluate the analytic gradients
    variableMatrix DfintDU_analytic;
    variableType detadX_n[ 3 ] = { detadX[ n ][ 0 ], detadX[ n ][ 1 ], detadX[ n ][ 2 ] };
    balance_equations::compute_internal_force_jacobian( N, dNdX, etas[ n ], detadX_n, F, PK2,
                                                        DPK2Dgrad_u, DPK2Dphi, DPK2Dgrad_phi,
                                                        DfintDU_analytic );

    if ( !vectorTools::fuzzyEquals( DfintDU_numeric, DfintDU_analytic ) ){
        results << "test_compute_internal_force_jacobian (test 1) & False\n";
        return 1;
    }

    for ( unsigned int i = 0; i < 3; i++ ){
        for ( unsigned int j = 0; j < 12; j++ ){
            variableType DfintDU_ij;
            balance_equations::compute_internal_force_jacobian( i, j, N, dNdX, etas[ n ], detadX_n, F, PK2,
                                                                DPK2Dgrad_u, DPK2Dphi, DPK2Dgrad_phi, DfintDU_ij );

            if ( !vectorTools::fuzzyEquals( DfintDU_ij, DfintDU_numeric[ i ][ j ] ) ){
                results << "test_compute_internal_force_jacobian (test 2) & False\n";
                return 1;
            }
        }
    }

    results << "test_compute_internal_force_jacobian & True\n";
    return 1;
}

int test_compute_internal_couple_jacobian( std::ofstream &results ){
    /*!
     * Test the computation of the internal couple jacobian
     *
     * :param std::ofstream &results: The output file.
     */

    variableVector etas = { 0.36852295, 0.97637554, 0.73179659, 0.68487472, 0.39762759, 0.31758111, 0.77389198, 0.61821572 };

    variableMatrix detadX =
        {
            { -0.29444605,  0.07238605,  0.43713906 },
            { -0.04698417, -0.40157226,  0.16954795 },
            {  0.13448525,  0.03186528, -0.30307097 },
            { -0.24891382,  0.3754754 ,  0.28469287 },
            { -0.44101342,  0.33897349,  0.30851798 },
            { -0.41890348,  0.37183943, -0.07587246 },
            { -0.16728468,  0.04201381,  0.06121883 },
            { -0.19766519, -0.32000607, -0.46894013 }
        };


    variableType N = 0.271;
    variableType dNdX[ 3 ] = { 0.282, -.771, .420 };

    variableMatrix values =
        {
            {  0.17731668, -0.15865735,  0.34206721, -0.0840164 ,  0.22072846,  0.19713675, -0.05521133, -0.06724891 },
            {  0.36570213, -0.49773919, -0.0468549 , -0.14928391,  0.3566579 ,  0.05454419,  0.30139775,  0.10009692 },
            {  0.02839771, -0.27099594,  0.3268313 , -0.40346198,  0.23107736, -0.0216891 ,  0.07994532, -0.28122228 },
            {  0.08438573, -0.10177786, -0.32459302,  0.00686261,  0.34034989, -0.28430275, -0.43718291,  0.14568342 },
            { -0.35720521, -0.43625961,  0.39841842,  0.17191936, -0.36538435, -0.49708906,  0.11851704, -0.26731614 },
            { -0.3717092 ,  0.04059797, -0.20701823,  0.19374649, -0.07539915, -0.28326464, -0.29816502,  0.46869672 },
            { -0.3283136 , -0.20761489, -0.41540895,  0.33912041,  0.20656594,  0.38157274,  0.03904779, -0.24227912 },
            {  0.15126979,  0.3511807 ,  0.33206935,  0.44103036, -0.14856347, -0.44038337, -0.0889653 , -0.11631477 },
            {  0.41895973, -0.22126793,  0.48640171, -0.32228643,  0.18169337,  0.36786474,  0.05204352, -0.47173868 },
            { -0.07257373,  0.07680379,  0.18734109, -0.06067456, -0.35509802,  0.18593935, -0.37953488,  0.42246967 },
            { -0.45442497,  0.11123504, -0.42798247,  0.44491971, -0.08782663, -0.16396531, -0.20379889,  0.48399711 },
            {  0.01555576, -0.06202483, -0.35382355, -0.08608767,  0.24526508,  0.24108876,  0.46201566, -0.2337636  }
        };

    //Form the numeric gradients
    variableVector eye( 9 );
    vectorTools::eye( eye );

    unsigned int n = 0;
    variableType eps = 1e-6;

    variableMatrix DcintDU_numeric( 9, variableVector( 12, 0 ) );

    int errorCode;

    for ( unsigned int i = 0; i < 12; i++ ){
        variableMatrix delta( 12, variableVector( 8, 0 ) );
        delta[ i ][ n ] = eps * fabs( values[ i ][ n ] ) + eps;

        variableVector utilde_P, utilde_M;
        variableMatrix dUtildedX_P, dUtildedX_M;

        variableVector PK2_P, SIGMA_P, M_P,
                       PK2_M, SIGMA_M, M_M;

        double cint_P[ 9 ], cint_M[ 9 ];

        //Compute the positive perturbation
        interpolate_values( etas, values + delta, utilde_P );
        interpolate_gradients( detadX, values + delta, dUtildedX_P );

        variableVector F_P = vectorTools::appendVectors( { dUtildedX_P[ 0 ], dUtildedX_P[ 1 ], dUtildedX_P[ 2 ] } );
        F_P += eye;

        variableVector chi_P( utilde_P.begin() + 3, utilde_P.begin() + 12 );
        chi_P += eye;

        errorOut error = evaluate_model( etas, detadX, values + delta, PK2_P, SIGMA_P, M_P );

        if ( error ){
            error->print();
            results << "test_compute_internal_couple_jacobian & False\n";
            return 1;
        }

        errorCode = balance_equations::compute_internal_couple( N, dNdX, F_P, chi_P, PK2_P, SIGMA_P, M_P, cint_P );

        if ( errorCode != 0 ){
            std::cout << "errorCode positive perturbation: " << errorCode << "\n";
            results << "test_compute_internal_couple_jacobian & False\n";
            return 1;
        }

        //Compute the negative perturbation
        interpolate_values( etas, values - delta, utilde_M );
        interpolate_gradients( detadX, values - delta, dUtildedX_M );

        variableVector F_M = vectorTools::appendVectors( { dUtildedX_M[ 0 ], dUtildedX_M[ 1 ], dUtildedX_M[ 2 ] } );
        F_M += eye;

        variableVector chi_M( utilde_M.begin() + 3, utilde_M.begin() + 12 );
        chi_M += eye;

        error = evaluate_model( etas, detadX, values - delta, PK2_M, SIGMA_M, M_M );

        if ( error ){
            error->print();
            results << "test_compute_internal_couple_jacobian & False\n";
            return 1;
        }

        errorCode = balance_equations::compute_internal_couple( N, dNdX, F_M, chi_M, PK2_M, SIGMA_M, M_M, cint_M );

        if ( errorCode != 0 ){
            std::cout << "errorCode negative perturbation: " << errorCode << "\n";
            results << "test_compute_internal_couple_jacobian & False\n";
            return 1;
        }
        
        for ( unsigned int j = 0; j < 9; j++ ){
            DcintDU_numeric[ j ][ i ] = ( cint_P[ j ] - cint_M[ j ] ) / ( 2 * delta[ i ][ n ] );
        }
    }

    variableVector utilde;
    interpolate_values( etas, values, utilde );

    variableMatrix dUtildedX;
    interpolate_gradients( detadX, values, dUtildedX );

    variableVector F = vectorTools::appendVectors( { dUtildedX[ 0 ], dUtildedX[ 1 ], dUtildedX[ 2 ] } ) + eye;
    variableVector chi = variableVector( utilde.begin() + 3, utilde.begin() + 12 ) + eye;

    variableVector PK2, SIGMA, M;
    variableMatrix DPK2Dgrad_u, DPK2Dphi, DPK2Dgrad_phi,
                   DSIGMADgrad_u, DSIGMADphi, DSIGMADgrad_phi,
                   DMDgrad_u, DMDphi, DMDgrad_phi;

    errorOut error = evaluate_model( etas, detadX, values, PK2, SIGMA, M, DPK2Dgrad_u, DPK2Dphi, DPK2Dgrad_phi,
                                     DSIGMADgrad_u, DSIGMADphi, DSIGMADgrad_phi,
                                     DMDgrad_u, DMDphi, DMDgrad_phi );

    if ( error ){
        error->print();
        results << "test_compute_internal_couple_jacobian & False\n";
        return 1;
    }

    //Evaluate the analytic gradients
    variableMatrix DcintDU_analytic;
    variableType detadX_n[ 3 ] = { detadX[ n ][ 0 ], detadX[ n ][ 1 ], detadX[ n ][ 2 ] };
    errorCode = balance_equations::compute_internal_couple_jacobian( N, dNdX, etas[ n ], detadX_n, F, chi,
                                                                     PK2, SIGMA, M,
                                                                     DPK2Dgrad_u, DPK2Dphi, DPK2Dgrad_phi,
                                                                     DSIGMADgrad_u, DSIGMADphi, DSIGMADgrad_phi,
                                                                     DMDgrad_u, DMDphi, DMDgrad_phi,
                                                                     DcintDU_analytic );

    if ( errorCode != 0 ){
        std::cout << "errorCode internal couple jacobian: " << errorCode << "\n";
        results << "test_compute_internal_couple_jacobian & False\n";
        return 1;
    }

    if ( !vectorTools::fuzzyEquals( DcintDU_numeric, DcintDU_analytic ) ){
        results << "test_compute_internal_couple_jacobian (test 1) & False\n";
        return 1;
    }

    for ( unsigned int i = 0; i < 3; i++ ){
        for ( unsigned int j = 0; j < 12; j++ ){
            variableType DcintDU_ij;
            balance_equations::compute_internal_couple_jacobian( i, j,
                                                                 N, dNdX, etas[ n ], detadX_n, F, chi,
                                                                 PK2, SIGMA, M,
                                                                 DPK2Dgrad_u, DPK2Dphi, DPK2Dgrad_phi,
                                                                 DSIGMADgrad_u, DSIGMADphi, DSIGMADgrad_phi,
                                                                 DMDgrad_u, DMDphi, DMDgrad_phi,
                                                                 DcintDU_ij );


            if ( !vectorTools::fuzzyEquals( DcintDU_ij, DcintDU_numeric[ i ][ j ] ) ){
                results << "test_compute_internal_couple_jacobian (test 2) & False\n";
                return 1;
            }
        }
    }

    results << "test_compute_internal_couple_jacobian & True\n";
    return 1;
}

int test_compute_inertia_couple2( std::ofstream &results ){
    /*!
     * Test the computation of the inertia couple from the reference inertia
     *
     * :param std::ofstream &results: The output file
     */

    const unsigned int dim = 3;

    const double N = 0.3371389492810266;

    const double density = 1043.6283367753965;

    const double chi[ 9 ] = { 0.85797594,  0.05294924,  0.87252168,
                              0.9070523 ,  0.26088588, -0.1660408 ,
                             -0.52573607,  0.18003511, -0.32771471 };

    const double d2chidt2[ 9 ] = { 0.75606571, -0.07025688,  1.2479219 ,
                                   0.13319623,  1.17223211, -0.10365243,
                                  -1.80243195, -0.05143313,  0.63628868 };

    const double microInertia[ 9 ] = { -0.20347042,  0.14105765,  0.41256371,
                                       -0.19506964,  0.62635855, -0.95446547,
                                        0.18102142,  0.22379139,  0.03727777 };

    const double answer[ 9 ] = { 162.88863477,   33.89950296,  -43.26956434,
                                -397.07694359,   41.75746339,  220.13324203,
                                 -60.10805413,  182.97025566,  -22.77962088 };

    double result[ 9 ];

    balance_equations::compute_inertia_couple( N, density, chi, d2chidt2, microInertia, result );

    for ( unsigned int i = 0; i < dim * dim; i++ ){

        if ( !vectorTools::fuzzyEquals( result[ i ], answer[ i ] ) ){

            results << "test_compute_inertia_couple2 (test 1) & False\n";
            return 1;

        }

    }

    double result_ij;

    for ( unsigned int i = 0; i < dim; i++ ){

        for ( unsigned int j = 0; j < dim; j++ ){

            balance_equations::compute_inertia_couple( i, j, N, density, chi, d2chidt2, microInertia, result_ij );

            if ( !vectorTools::fuzzyEquals( result_ij, answer[ dim * i + j ] ) ){

                results << "test_compute_inertia_couple2 (test 2) & False\n";
                return 1;

            }

        }

    }

    results << "test_compute_inertia_couple2 & True\n";
    return 1;
}

int main(){
    /*!==========================
    |         main            |
    ===========================
    
    The main loop which runs the tests defined in the 
    accompanying functions. Each function should output
    the function name followed by & followed by True or 
    False if the test passes or fails respectively.*/

    std::ofstream results;
    //Open the results file
    results.open ("results.tex");

    //Internal tests
    _test_interpolate_values( );
    _test_interpolate_gradients( );
    _test_evaluate_model( );

    //Tests of the terms in the balance of linear momentum
    test_compute_internal_force( results );
    test_compute_body_force( results );
    test_compute_inertia_force( results );

    //Tests of the terms in the balance of the first moment of momentum
    test_compute_internal_couple( results );
    test_compute_body_couple( results );
    test_compute_inertia_couple( results );
    test_compute_inertia_couple2( results );

    //Tests of the Jacobians of the balance of linear momentum
    test_compute_internal_force_jacobian( results );

    //Tests of the Jacobians of the balance of the first moment of momentum
    test_compute_internal_couple_jacobian( results );

    //Close the results file
    results.close();
}
