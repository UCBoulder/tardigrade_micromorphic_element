/*!===========================================================================
   |                                                                         |
   |                         deformation_measures.h                          |
   |                                                                         |
   ===========================================================================
   | The header file for a wrapper that converts variables and their         |
   | gradients generated by MOOSE into deformation measures which can be     |
   | used to compute the micromorphic stress measures and their tangents.    |
   | This is done to avoid any possible assumptions of symmetry which could  |
   | be present in the Tensor Mechanics physics module.                      |
   ===========================================================================
   | Dependencies:                                                           |
   |     Eigen: A matrix library available at eigen.tuxfamily.org            |
   ===========================================================================
   */
   
#include <Eigen/Dense>

//!Type definitions of common vector and matrix sizes.
typedef Eigen::Matrix<double, 6,1> Vector_6;
typedef Eigen::Matrix<double, 9,1> Vector_9;
typedef Eigen::Matrix<double,27,1> Vector_27;
typedef Eigen::Matrix<double, 3,3> Matrix_3x3;
typedef Eigen::Matrix<double, 3,9> Matrix_3x9;


namespace deformation_measures
{

    void get_deformation_gradient(const double (&_grad_u)[3][3], Matrix_3x3 &F);

    void assemble_chi(const double (&_phi)[9], Matrix_3x3 &chi);

    void assemble_grad_chi(const double (&_grad_phi)[9][3], const Matrix_3x3 &F, Matrix_3x9 &grad_chi);

    void get_right_cauchy_green(const Matrix_3x3 &F, Matrix_3x3 &RCG);

    void get_left_cauchy_green(const Matrix_3x3 &F, Matrix_3x3 &LCG);

    void get_lagrange_strain(const Matrix_3x3 &F, Matrix_3x3 &E);

    void get_almansi_strain(const Matrix_3x3 &F, Matrix_3x3 &e);

    void get_small_strain(const double (&_grad_u)[3][3], Matrix_3x3 &epsilon);

    void get_psi(const Matrix_3x3 &F, const Matrix_3x3 &chi, Matrix_3x3 &psi);

    void get_gamma(const Matrix_3x3 &F, const Matrix_3x9 &grad_chi, Matrix_3x9 &gamma);

    void voigt_3x3_symm_tensor(const Matrix_3x3 &A, Vector_6 &v);

    void voigt_3x3_tensor(const Matrix_3x3 &A, Vector_9 &v);

    void voigt_3x9_tensor(const Matrix_3x9 &A, Vector_27 &v);

    void get_micro_strain(const Matrix_3x3 &psi, Matrix_3x3 &E_micro);
    
    void undo_voigt_3x3_tensor(const Vector_9 &v, Matrix_3x3 &A);
    
    void undo_voigt_3x9_tensor(const Vector_27 &v, Matrix_3x9 &A);
    
    void perform_positive_cyclic_permutation(Matrix_3x9 &A);
}
