/*!===========================================================================
   |                                                                         |
   |                         deformation_measures.h                          |
   |                                                                         |
   ===========================================================================
   | The header file for a wrapper that converts variables and their         |
   | gradients generated by MOOSE into deformation measures which can be     |
   | used to compute the micromorphic stress measures and their tangents.    |
   | This is done to avoid any possible assumptions of symmetry which could  |
   | be present in the Tensor Mechanics physics module.                      |
   ===========================================================================
   | Dependencies:                                                           |
   |     Eigen: A matrix library available at eigen.tuxfamily.org            |
   ===========================================================================
   */
   
#ifndef DEFORMATION_MEASURES_H
#define DEFORMATION_MEASURES_H
   
#include <iostream>
#include <cassert>
#include <Eigen/Dense>
#include <Eigen/Sparse>

//!Type definitions of common vector and matrix sizes.
typedef Eigen::Matrix<double, 6, 1> Vector_6;
typedef Eigen::Matrix<double, 9, 1> Vector_9;
typedef Eigen::Matrix<double,27, 1> Vector_27;
typedef Eigen::Matrix<double, 3, 3> Matrix_3x3;
typedef Eigen::Matrix<double, 3, 9> Matrix_3x9;
typedef Eigen::Matrix<double, 9, 9> Matrix_9x9;
typedef Eigen::Matrix<double, 9,27> Matrix_9x27;
typedef Eigen::Matrix<double,27, 9> Matrix_27x9;
typedef Eigen::Matrix<double,27,27> Matrix_27x27;

//Sparse matrix type definitions
typedef Eigen::SparseMatrix<double> SpMat;
typedef Eigen::Triplet<double> T;

namespace deformation_measures
{

    void get_deformation_gradient(const double (&_grad_u)[3][3], Matrix_3x3 &F);

    void assemble_chi(const double (&_phi)[9], Matrix_3x3 &chi);

    void assemble_grad_chi(const double (&_grad_phi)[9][3], const Matrix_3x3 &F, Matrix_3x9 &grad_chi);

    void get_right_cauchy_green(const Matrix_3x3 &F, Matrix_3x3 &RCG);

    void get_left_cauchy_green(const Matrix_3x3 &F, Matrix_3x3 &LCG);

    void get_lagrange_strain(const Matrix_3x3 &F, Matrix_3x3 &E);

    void get_almansi_strain(const Matrix_3x3 &F, Matrix_3x3 &e);

    void get_small_strain(const double (&_grad_u)[3][3], Matrix_3x3 &epsilon);

    void get_psi(const Matrix_3x3 &F, const Matrix_3x3 &chi, Matrix_3x3 &psi);

    void get_gamma(const Matrix_3x3 &F, const Matrix_3x9 &grad_chi, Matrix_3x9 &gamma);

    void voigt_3x3_symm_tensor(const Matrix_3x3 &A, Vector_6 &v);

    void voigt_3x3_tensor(const Matrix_3x3 &A, Vector_9 &v);

    void voigt_3x9_tensor(const Matrix_3x9 &A, Vector_27 &v);

    void get_micro_strain(const Matrix_3x3 &psi, Matrix_3x3 &E_micro);
    
    void undo_voigt_3x3_tensor(const Vector_9 &v, Matrix_3x3 &A);
    
    void undo_voigt_3x9_tensor(const Vector_27 &v, Matrix_3x9 &A);
    
    void perform_left_positive_cyclic_permutation(Vector_27 &A);
    
    void perform_right_positive_cyclic_permutation(Vector_27 &A);
    
    void dot_2ot_4ot(const int &i, const int &mode, const Matrix_3x3 &sot, const Matrix_9x9  &fot, Matrix_9x9  &result);
    
    void dot_2ot_5ot(const int &i, const Matrix_3x3 &sot, const Matrix_9x27 &fot, Matrix_9x27 &result);
    
    void dot_2ot_5ot(const int &i, const Matrix_3x3 &sot, const Matrix_27x9 &fot, Matrix_27x9 &result);
    
    void two_sot_to_fot(const int &swap, const Matrix_3x3 &A, const Matrix_3x3 &B, Matrix_9x9 &C);
    
    //Compute the non-zero gradients of the derived deformation measures
    //w.r.t. the fundamental deformation measures
    void compute_dRCGdF(const Matrix_3x3 &F, SpMat &dRCGdF);
    
    void compute_dPsidF(const Matrix_3x3 &chi, SpMat &dPsidF);

    void compute_dGammadF(const Vector_27 &grad_chi, SpMat &dGammadF);
    
    void compute_dPsidchi(const Matrix_3x3 &F, SpMat &dPsidchi);
    
    void compute_dGammadgrad_chi(const Matrix_3x3 &F, SpMat &dGammadgrad_chi);
    
    //Compute the gradients of grad_chi with respect to the deformation gradient and 
    //the gradient of phi w.r.t. the current coordinates.
    void compute_dgrad_chidgrad_phi(const Matrix_3x3 &F, SpMat &dgrad_chidgrad_phi);
    
    void compute_dgrad_chidF(const Vector_27 &grad_phi, SpMat &dgrad_chidF);
    
    void compute_dAinvdA(const Matrix_3x3 &A, Matrix_9x9 &dAinvdA);
    
    void compute_ddetAdA(const Matrix_3x3 &A, Matrix_3x3 &ddetAdA);
    
    //Map stresses between configurations
    void map_stresses_to_current_configuration(const Matrix_3x3 &F, const Matrix_3x3 &chi,
                                               const Vector_9 &PK2, const Vector_9 &SIGMA, const Vector_27 &M,
                                               Vector_9 &cauchy, Vector_9 &s, Vector_27 &m);
                                               
    //Map jacobians between configurations
    void map_dAdF_to_dadF(const Vector_9 &a,  const Vector_9 &A,  const Matrix_9x9 &dAdF,  const double &J, const Matrix_3x3 &dJdF, const Matrix_3x3 &F, Matrix_9x9 &dadF);
    void map_dAdF_to_dadF(const Vector_27& a, const Vector_27 &A, const Matrix_27x9 &dAdF, const double &J, const Matrix_3x3 &dJdF, const Matrix_3x3 &F, const Matrix_3x3 &chi, Matrix_27x9 &dadF);
    
    void map_dAdchi_to_dadchi(const Vector_9 &A,  const Matrix_9x9 &dAdchi,  const double &J, const Matrix_3x3 &F, Matrix_9x9 dadchi);
    void map_dAdchi_to_dadchi(const Vector_27 &A, const Matrix_27x9 &dAdchi, const double &J, const Matrix_3x3 &F, const Matrix_3x3 &chi, Matrix_27x9 dadchi);
    
    void map_dAdgrad_chi_to_dadgrad_chi(const Vector_9 &A,  const Matrix_9x27 &dAdgrad_chi,  const double &J, const Matrix_3x3 &F, Matrix_9x27 dadgrad_chi);
    void map_dAdgrad_chi_to_dadgrad_chi(const Vector_27 &A, const Matrix_27x27 &dAdgrad_chi, const double &J, const Matrix_3x3 &F, const Matrix_3x3 &chi, Matrix_27x27 dadgrad_chi);
}

#endif
