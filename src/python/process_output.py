import numpy as np
import os
import sys
import re
import copy

class Step(object):
    """A class for a step in an Abaqus simulation"""


    def __init__(self,inc,data):
        """The initialization for the Step object"""

        self.increments = {inc:data}

    def __repr__(self):
        """Define the repr string"""
        return "Step({0},{1})".format(self.increments.keys(),self.increments.values())

class Element(object):
    """A class for an element in an Abaqus simulation"""
    
    def __init__(self,stp,inc,data):
        """The initialization for the Element object"""
        self.steps = {stp:Step(inc,data)}
        self.steps.update({stp:Step(inc,data)})
    def __repr__(self):
        return "Element(steps = {0}, increments = {1})".format(self.steps.keys(),self.steps.values())

class ProcessMicroMorphic(object):
    """ Process the results generated by an abaqus simulation of a micromorphic finite element"""

    def __init__(self,directory):
        """The initilization given a directory to read the data from"""
        self.directory = ""
        self.elements = {}
        self.directory = directory
        self._get_files()
        self.process_files()

        
    def _get_files(self):
        """Get the files which exist in the directory"""
        self.files = [os.path.join(self.directory,f) for f in os.listdir(self.directory)\
                      if (os.path.isfile(os.path.join(self.directory, f)) and (f[0] is not "."))]

    def process_files(self):
        """Process the files to collect the required information"""

        for fn in self.files:
            #Get element, step, and increment information
            el,stp,inc = [int(v) for v in fn.split("_")[-3:]]
            data       = self.get_data(fn)
            
            if(el not in self.elements.keys()):
                self.elements[el] = copy.deepcopy(Element(stp,inc,data))

            elif(stp not in self.elements[el].steps.keys()):
                self.elements[el].steps[inc] = copy.deepcopy(Step(inc,data))
            
            elif(inc not in self.elements[el].steps[stp].increments.keys()):
                self.elements[el].steps[stp].increments[inc] = copy.deepcopy(data)

            else:
                print "Error: Multiple definitions for\nElement: {0}\nStep: {1}\nIncrement: {2}\n".format(el,stp,inc)
                raise IOError

    def get_data(self,fn):
        """Get the data from a given file"""
        output = {}
        key  = None #Set the initial value of the key
        data = []
        with open(fn) as f:
            for line in f:
                #Check if comment
                if(line[0]!="*"):

                    #Split the line at the commas
                    sline = [v.strip() for v in line.split(",")]
                    #Try to see if the line is a new keyword
                    if(self._is_keyword(sline)):
                        if(key != None):
                            output.update({key:data})
                            data = []
                        key = sline[0]
                    else:
                        data = data + [float(v) for v in sline]
            output.update({key:data})
            f.close()
        return output
                        
                
    def _is_keyword(self,sline):
        """Check if the line is a keyword"""
        if(len(sline)>1):
            return False
                
        try:
            float(sline[0])
            return False
        except:
            return True

    def __repr__(self):
        return "ProcessMicroMorphic(" + directory + ")"
